<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SampSharp.GameMode</name>
    </assembly>
    <members>
        <member name="T:SampSharp.GameMode.Controllers.CommandController">
            <summary>
                A controller processing all commands.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Tools.Disposable">
            <summary>
                Defines methods to release allocated resources and to check whether this resource has been disposed.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Disposable.Dispose">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Disposable.Dispose(System.Boolean)">
            <summary>
                Performs tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether managed resources should be disposed.</param>
        </member>
        <member name="P:SampSharp.GameMode.Tools.Disposable.Disposed">
            <summary>
                Gets whether this resource has been disposed.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.IEventListener">
            <summary>
                Provides the functionality for an <see cref="T:SampSharp.GameMode.Controllers.IController"/> to act on events.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.IController">
            <summary>
                Provides the functionality for a controller.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.IEventListener.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this <see cref="T:SampSharp.GameMode.Controllers.IEventListener"/> wants to listen to.
            </summary>
            <param name="gameMode">An instance of the <see cref="T:SampSharp.GameMode.BaseMode"/> currently running.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.CommandController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this GlobalObjectController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.ControllerCollection">
            <summary>
                Represents a list of <see cref="T:SampSharp.GameMode.Controllers.IController"/> instances.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for this collection.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for this collection.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.Add(SampSharp.GameMode.Controllers.IController)">
            <summary>
                Adds a <see cref="T:SampSharp.GameMode.Controllers.IController"/> to this collection.
            </summary>
            <param name="controller">The <see cref="T:SampSharp.GameMode.Controllers.IController"/> to add to this collection.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.Remove(SampSharp.GameMode.Controllers.IController)">
            <summary>
                Removes a <see cref="T:SampSharp.GameMode.Controllers.IController"/> from this collection.
            </summary>
            <param name="controller">The <see cref="T:SampSharp.GameMode.Controllers.IController"/> to remove from this collection.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ControllerCollection.Remove``1">
            <summary>
                Removes all <see cref="T:SampSharp.GameMode.Controllers.IController"/> instances of the given type from this collection.
            </summary>
            <typeparam name="T">The type to remove from this collection.</typeparam>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.DialogController">
            <summary>
                A controller processing all dialog actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.DialogController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this DialogController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.GlobalObjectController">
            <summary>
                A controller processing all global-object actions.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.ITypeProvider">
            <summary>
                Provides the functionality for an <see cref="T:SampSharp.GameMode.Controllers.IController"/> to register types.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.ITypeProvider.RegisterTypes">
            <summary>
                Registers types this <see cref="T:SampSharp.GameMode.Controllers.ITypeProvider"/> requires the system to use.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.GlobalObjectController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this GlobalObjectController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.GlobalObjectController.RegisterTypes">
            <summary>
                Registers types this GlobalObjectController requires the system to use.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.MenuController">
            <summary>
                A controller processing all menu actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.MenuController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this PlayerController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PickupController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this TextDrawController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PickupController.RegisterTypes">
            <summary>
                Registers types this PickupController requires the system to use.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.GtaPlayerController">
            <summary>
                A controller processing all player actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.GtaPlayerController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this PlayerController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.GtaPlayerController.RegisterTypes">
            <summary>
                Registers types this PlayerController requires the system to use.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.PlayerObjectController">
            <summary>
                A controller processing all player-object actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PlayerObjectController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this PlayerObjectController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PlayerObjectController.RegisterTypes">
            <summary>
                Registers types this PlayerObjectController requires the system to use.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.PlayerTextDrawController">
            <summary>
                A controller processing all player-textdraw actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PlayerTextDrawController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this PlayerTextDrawController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.PlayerTextDrawController.RegisterTypes">
            <summary>
                Registers types this PlayerTextDrawController requires the system to use.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.SyncController">
            <summary>
                A controller processing sync requests.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.SyncController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this SyncController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.SyncController.Start">
            <summary>
                Start waiting for a gamemode tick to sync all resync requests.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Controllers.SyncController.IsMainThread">
            <summary>
                Gets whether the current thread is the main VM thread.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.TextDrawController">
            <summary>
                A controller processing all textdraw actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.TextDrawController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this TextDrawController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.TextDrawController.RegisterTypes">
            <summary>
                Registers types this TextDrawController requires the system to use.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.TimerController">
            <summary>
                A controller processing all timer actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.TimerController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this TimerController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.TimerController.RegisterTypes">
            <summary>
                Registers types this TimerController requires the system to use.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Controllers.GtaVehicleController">
            <summary>
                A controller processing all vehicle actions.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.GtaVehicleController.RegisterEvents(SampSharp.GameMode.BaseMode)">
            <summary>
                Registers the events this VehicleController wants to listen to.
            </summary>
            <param name="gameMode">The running GameMode.</param>
        </member>
        <member name="M:SampSharp.GameMode.Controllers.GtaVehicleController.RegisterTypes">
            <summary>
                Registers types this VehicleController requires the system to use.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.BodyPart">
            <summary>
                Contains all available body parts.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.Chest">
            <summary>
                The Chest of the player.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.Crotch">
            <summary>
                The crotch of the player.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.LeftArm">
            <summary>
                The left arm of the player.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.RightArm">
            <summary>
                The right arm of the player.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.LeftLeg">
            <summary>
                The left leg of the player.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.RightLeg">
            <summary>
                The right leg of the player.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BodyPart.Head">
            <summary>
                The head of the the player.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.CameraMode">
            <summary>
                Contains all camera modes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.Invalid">
            <summary>
                Invalid mode.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.BehindCar">
            <summary>
                Camera is behind a car.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.FollowPed">
            <summary>
                Camera is behind a Ped.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.SniperAiming">
            <summary>
                Sniper view.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.RocketLauncherAiming">
            <summary>
                Rocket launcher view.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.Fixed">
            <summary>
                Camera is set to a fixed point (e.g. after setting <see cref="P:SampSharp.GameMode.World.GtaPlayer.CameraPosition"/>)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.FirstPerson">
            <summary>
                Camera is in first person mode (e.g. when looking from inside the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.NormalCar">
            <summary>
                Camera 'normally' behind a car.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.BehindBoat">
            <summary>
                Camera behind a boat.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.CameraWeaponAiming">
            <summary>
                Camera when aiming.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.HeatseekingRocketLauncher">
            <summary>
                Heatseeking rochet launcher view.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.AimingWeapon">
            <summary>
                Aiming a weapon.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.VehicleDriveBy">
            <summary>
                Drive by view.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraMode.HelicopterChaseCam">
            <summary>
                Helicopter chase view.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.CheckpointType">
            <summary>
                Contains all racecheckpoint types.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CheckpointType.Normal">
            <summary>
                Normal racecheckpoint. (Normal red cilinder)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CheckpointType.Finish">
            <summary>
                Finish racecheckpoint. (Finish flag in red cilinder)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CheckpointType.Nothing">
            <summary>
                No checkpoint.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CheckpointType.Air">
            <summary>
                Air racecheckpoint. (normal red circle in the air)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CheckpointType.AirFinish">
            <summary>
                Finish air racecheckpoint. (Finish flag in red circle in the air)
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.DialogButton">
            <summary>
                Contains all dialogbuttons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogButton.Right">
            <summary>
                Right button of the dialog.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogButton.Left">
            <summary>
                Left button of the dialog.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.EnterExit">
            <summary>
                Contains enter/exit garage states.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.EnterExit.Exited">
            <summary>
                Has exited garage.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.EnterExit.Entered">
            <summary>
                Has entered garage.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.ObjectType">
            <summary>
                Contains all object types
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectType.GlobalObject">
            <summary>
                Global object.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectType.PlayerObject">
            <summary>
                Player object.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.DisconnectReason">
            <summary>
                Contains all reasons for a Player to disconnect.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DisconnectReason.TimedOut">
            <summary>
                The Player timed out.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DisconnectReason.Left">
            <summary>
                The Player left. (/q(uit) or trough the menu)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DisconnectReason.Kicked">
            <summary>
                The Player was kicked or banned.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.ShopName">
            <summary>
                Contains all shopnames.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.PizzaStack">
            <summary>
                The Well Stacked Pizza Co.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.BurgerShot">
            <summary>
                Burger Shot.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.CluckinBell">
            <summary>
                Cluckin' Bell.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.Ammunation1">
            <summary>
                Ammunation 1.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.Ammunation2">
            <summary>
                Ammunation 2.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.Ammunation3">
            <summary>
                Ammunation 3.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.Ammunation4">
            <summary>
                Ammunation 4.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ShopName.Ammunation5">
            <summary>
                Ammunation 5.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.TextDrawAlignment">
            <summary>
                Contains all textdraw alignments.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawAlignment.Left">
            <summary>
                Align left.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawAlignment.Center">
            <summary>
                Align center.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawAlignment.Right">
            <summary>
                Align right.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.Print(System.String)">
            <summary>
                Prints a message to the serverlog.
            </summary>
            <param name="msg">The message to print to the serverlog.</param>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetCodepage(System.Int32)">
            <summary>
                Sets the currently active codepage.
            </summary>
            <param name="codepage">Codepage to use.</param>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreateObject(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates an object.
            </summary>
            <param name="modelid">The model you want to use.</param>
            <param name="x">The X coordinate to create the object at.</param>
            <param name="y">The Y coordinate to create the object at.</param>
            <param name="z">The Z coordinate to create the object at.</param>
            <param name="rX">The X rotation of the object.</param>
            <param name="rY">The Y rotation of the object.</param>
            <param name="rZ">The Z rotation of the object.</param>
            <param name="drawDistance">
                The distance that San Andreas renders objects at. 0.0 will cause objects to render at their
                default distances.
            </param>
            <returns>The ID of the object that was created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachObjectToVehicle(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Attach an object to a vehicle.
            </summary>
            <param name="objectid">The ID of the object to attach to the vehicle.</param>
            <param name="vehicleid">The ID of the vehicle to attach the object to.</param>
            <param name="offsetX">The X axis offset.</param>
            <param name="offsetY">The Y axis offset.</param>
            <param name="offsetZ">The Z axis offset.</param>
            <param name="rotX">The X rotation offset.</param>
            <param name="rotY">The Y rotation offset.</param>
            <param name="rotZ">The Z rotation offset.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachObjectToObject(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                You can use this function to attach objects to other objects. The objects will folow the main object.
            </summary>
            <param name="objectid">The object to attach to another object.</param>
            <param name="attachtoid">The object to attach the object to.</param>
            <param name="offsetX">The distance between the main object and the object in the X direction.</param>
            <param name="offsetY">The distance between the main object and the object in the Y direction.</param>
            <param name="offsetZ">The distance between the main object and the object in the Z direction.</param>
            <param name="rotX">The X rotation between the object and the main object.</param>
            <param name="rotY">The Y rotation between the object and the main object.</param>
            <param name="rotZ">The Z rotation between the object and the main object.</param>
            <param name="syncRotation">
                If set to false, objects' rotation will not be changed. See ferriswheel filterscript for
                example.
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachObjectToPlayer(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Attach an object to a player.
            </summary>
            <param name="objectid">The ID of the object to attach to the player.</param>
            <param name="playerid">The ID of the player to attach the object to.</param>
            <param name="offsetX">The distance between the player and the object in the X direction.</param>
            <param name="offsetY">The distance between the player and the object in the Y direction.</param>
            <param name="offsetZ">The distance between the player and the object in the Z direction.</param>
            <param name="rotX">The X rotation between the object and the player.</param>
            <param name="rotY">The Y rotation between the object and the player.</param>
            <param name="rotZ">The Z rotation between the object and the player.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetObjectPos(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Change the position of an object.
            </summary>
            <param name="objectid">The ID of the object to set the position of.</param>
            <param name="x">The X coordinate to position the object at.</param>
            <param name="y">The Y coordinate to position the object at.</param>
            <param name="z">The Z coordinate to position the object at.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetObjectPos(System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Returns the coordinates of the current position of the given object.
            </summary>
            <param name="objectid">The object's id of which you want the current location.</param>
            <param name="x">The variable to store the X coordinate, passed by reference.</param>
            <param name="y">The variable to store the Y coordinate, passed by reference.</param>
            <param name="z">The variable to store the Z coordinate, passed by reference.</param>
            <returns>The objects position.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetObjectRot(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Rotates an object in all directions.
            </summary>
            <param name="objectid">The objectid of the object you want to rotate.</param>
            <param name="rotX">The X rotation.</param>
            <param name="rotY">The Y rotation.</param>
            <param name="rotZ">The Z rotation.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetObjectRot(System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Use this function to get the objects current rotation. The rotation is saved by reference in three RotX/RotY/RotZ
                variables.
            </summary>
            <param name="objectid">The objectid of the object you want to get the rotation from.</param>
            <param name="rotX">The variable to store the X rotation, passed by reference.</param>
            <param name="rotY">The variable to store the Y rotation, passed by reference.</param>
            <param name="rotZ">The variable to store the Z rotation, passed by reference.</param>
            <returns>The objects rotation.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsValidObject(System.Int32)">
            <summary>
                Check if the given objectid is valid.
            </summary>
            <param name="objectid">The objectid to check the validity of.</param>
            <returns>True if the object exists, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DestroyObject(System.Int32)">
            <summary>
                Destroys (removes) the given object.
            </summary>
            <param name="objectid">The objectid from the object you want to delete.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.MoveObject(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Move an object to a new position with a set speed. Players/vehicles will 'surf' the object as it moves.
            </summary>
            <param name="objectid">The ID of the object to move.</param>
            <param name="x">The X coordinate to move the object to.</param>
            <param name="y">The Y coordinate to move the object to.</param>
            <param name="z">The Z coordinate to move the object to.</param>
            <param name="speed">The speed at which to move the object (units per second).</param>
            <param name="rotX">The FINAL X rotation (optional).</param>
            <param name="rotY">The FINAL Y rotation (optional).</param>
            <param name="rotZ">The FINAL Z rotation (optional).</param>
            <returns>The time it will take for the object to move in milliseconds.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.StopObject(System.Int32)">
            <summary>
                Stop a moving object after <see cref="M:SampSharp.GameMode.Natives.Native.MoveObject(System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.World.Vector)"/> has been used.
            </summary>
            <param name="objectid">The ID of the object to stop moving.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsObjectMoving(System.Int32)">
            <summary>
                Checks if the given objectid is moving.
            </summary>
            <param name="objectid">The objectid you want to check if is moving.</param>
            <returns>True if the object is moving, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.EditObject(System.Int32,System.Int32)">
            <summary>
                Allows a player to edit an object (position and rotation) using a GUI (Graphical User Interface).
            </summary>
            <param name="playerid">The ID of the player that should edit the object.</param>
            <param name="objectid">The ID of the object to be edited by the player.</param>
            <returns>True on success, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.EditPlayerObject(System.Int32,System.Int32)">
            <summary>
                Let the player edit (move, rotate) the given player object.
            </summary>
            <param name="playerid">The ID of the player that should edit the object.</param>
            <param name="objectid">The object to be edited by the player.</param>
            <returns>True on success and 0, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SelectObject(System.Int32)">
            <summary>
                Display the cursor and allow the player to select an object. <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSelectObject(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)"/> is called
                when the player selects an object.
            </summary>
            <param name="playerid">The ID of the player that should be able to select the object.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CancelEdit(System.Int32)">
            <summary>
                Cancel object edition mode for a player.
            </summary>
            <param name="playerid">The ID of the player to cancel edition for.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreatePlayerObject(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates an object which will be visible to only one player.
            </summary>
            <param name="playerid">The ID of the player to create the object for.</param>
            <param name="modelid">The model to create.</param>
            <param name="x">The X coordinate to create the object at.</param>
            <param name="y">The Y coordinate to create the object at.</param>
            <param name="z">The Z coordinate to create the object at.</param>
            <param name="rX">The X rotation of the object.</param>
            <param name="rY">The Y rotation of the object.</param>
            <param name="rZ">The Z rotation of the object.</param>
            <param name="drawDistance">
                The distance from which objects will appear to players. 0.0 will cause an object to render
                at its default distance. Leaving this parameter out will cause objects to be rendered at their default distance.
            </param>
            <returns>The ID of the object that was created, or INVALID_OBJECT_ID if the object limit (MAX_OBJECTS) was reached.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachPlayerObjectToPlayer(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                The same as <see cref="M:SampSharp.GameMode.Natives.Native.AttachObjectToPlayer(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector)"/> but for objects which were created for
                player.
            </summary>
            <param name="objectplayer">The id of the player which is linked with the object.</param>
            <param name="objectid">The objectid you want to attach to the player.</param>
            <param name="attachplayerid">The id of the player you want to attach to the object.</param>
            <param name="offsetX">The distance between the player and the object in the X direction.</param>
            <param name="offsetY">The distance between the player and the object in the Y direction.</param>
            <param name="offsetZ">The distance between the player and the object in the Z direction.</param>
            <param name="rX">The X rotation.</param>
            <param name="rY">The Y rotation.</param>
            <param name="rZ">The Z rotation.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachPlayerObjectToVehicle(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Attach a player object to a vehicle.
            </summary>
            <param name="playerid">The ID of the player the object was created for.</param>
            <param name="objectid">The ID of the object to attach to the vehicle.</param>
            <param name="vehicleid">The ID of the vehicle to attach the object to.</param>
            <param name="offsetX">The X position offset for attachment.</param>
            <param name="offsetY">The Y position offset for attachment.</param>
            <param name="offsetZ">The Z position offset for attachment.</param>
            <param name="rotX">The X rotation offset for attachment.</param>
            <param name="rotY">The Y rotation offset for attachment.</param>
            <param name="rotZ">The Z rotation offset for attachment.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerObjectPos(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Sets the position of a player-object to the specified coordinates.
            </summary>
            <param name="playerid">The ID of the player whose player-object to set the position of.</param>
            <param name="objectid">
                The ID of the player-object to set the position of. Returned by
                <see cref="M:SampSharp.GameMode.Natives.Native.CreatePlayerObject(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Single)"/>.
            </param>
            <param name="x">The X coordinate to put the object at.</param>
            <param name="y">The Y coordinate to put the object at.</param>
            <param name="z">The Z coordinate to put the object at.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerObjectPos(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Returns the coordinates of the current position of the given object. The position is saved by reference in three
                x/y/z variables.
            </summary>
            <param name="playerid">The player you associated this object to.</param>
            <param name="objectid">The object's id of which you want the current location.</param>
            <param name="x">The variable to store the X coordinate, passed by reference.</param>
            <param name="y">The variable to store the Y coordinate, passed by reference.</param>
            <param name="z">The variable to store the Z coordinate, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerObjectRot(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Rotates an object in all directions.
            </summary>
            <param name="playerid">The player you associated this object to.</param>
            <param name="objectid">The objectid of the object you want to rotate.</param>
            <param name="rotX">The X rotation.</param>
            <param name="rotY">The Y rotation.</param>
            <param name="rotZ">The Z rotation.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerObjectRot(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Use this function to get the object' s current rotation. The rotation is saved by reference in three RotX/RotY/RotZ
                variables.
            </summary>
            <param name="playerid">The player you associated this object to.</param>
            <param name="objectid">The objectid of the object you want to get the rotation from.</param>
            <param name="rotX">The variable to store the X rotation, passed by reference.</param>
            <param name="rotY">The variable to store the Y rotation, passed by reference.</param>
            <param name="rotZ">The variable to store the Z rotation, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsValidPlayerObject(System.Int32,System.Int32)">
            <summary>
                Checks if the given objectid is valid for the given player.
            </summary>
            <param name="playerid">The player you associated this object to.</param>
            <param name="objectid">The objectid you want to validate.</param>
            <returns>True if the object exists, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DestroyPlayerObject(System.Int32,System.Int32)">
            <summary>
                Destroy a player-object.
            </summary>
            <param name="playerid">The ID of the player the object is associated to.</param>
            <param name="objectid">
                The ID of the player-object to delete (returned by
                <see cref="M:SampSharp.GameMode.Natives.Native.CreatePlayerObject(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Single)"/>).
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.MovePlayerObject(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Move an object with a set speed. Also supports rotation. Players/vehicles will surf moving objects.
            </summary>
            <param name="playerid">The ID of the player whose player-object to move.</param>
            <param name="objectid">The ID of the object to move.</param>
            <param name="x">The X coordinate to move the object to.</param>
            <param name="y">The Y coordinate to move the object to.</param>
            <param name="z">The Z coordinate to move the object to.</param>
            <param name="speed">The speed at which to move the object.</param>
            <param name="rotX">The final X rotation (optional).</param>
            <param name="rotY">The final Y rotation (optional).</param>
            <param name="rotZ">The final Z rotation (optional).</param>
            <returns>The time it will take for the object to move in milliseconds.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.StopPlayerObject(System.Int32,System.Int32)">
            <summary>
                Stop a moving player-object after <see cref="M:SampSharp.GameMode.Natives.Native.MovePlayerObject(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.World.Vector)"/> has been used.
            </summary>
            <param name="playerid">The ID of the player whose player-object to stop.</param>
            <param name="objectid">The ID of the player-object to stop.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerObjectMoving(System.Int32,System.Int32)">
            <summary>
                Checks if the given player objectid is moving.
            </summary>
            <param name="playerid">The ID of the player whose player-object you want to theck if is moving.</param>
            <param name="objectid">The player objectid you want to check if is moving.</param>
            <returns>True if the player object is moving, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetObjectMaterial(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
                Replace the texture of an object with the texture from another model in the game.
            </summary>
            <param name="objectid">The ID of the object to change the texture of.</param>
            <param name="materialindex">The material index on the object to change.</param>
            <param name="modelid">
                The modelid on which the replacement texture is located. Use 0 for alpha. Use -1 to change the
                material color without altering the texture.
            </param>
            <param name="txdname">The name of the txd file which contains the replacement texture (use "none" if not required).</param>
            <param name="texturename">The name of the texture to use as the replacement (use "none" if not required).</param>
            <param name="materialcolor">
                The object color to set, as an integer or hex in ARGB color format. Using 0 keeps the
                existing material color.
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerObjectMaterial(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
                Replace the texture of a player-object with the texture from another model in the game.
            </summary>
            <param name="playerid">The ID of the player the object is associated to.</param>
            <param name="objectid">The ID of the object to replace the texture of.</param>
            <param name="materialindex">The material index on the object to change.</param>
            <param name="modelid">
                The modelid on which replacement texture is located. Use 0 for alpha. Use -1 to change the
                material color without altering the existing texture.
            </param>
            <param name="txdname">The name of the txd file which contains the replacement texture (use "none" if not required).</param>
            <param name="texturename">The name of the texture to use as the replacement (use "none" if not required).</param>
            <param name="materialcolor">
                The object color to set, as an integer or hex in ARGB format. Using 0 keeps the existing
                material color.
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetObjectMaterialText(System.Int32,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
                Replace the texture of an object with text.
            </summary>
            <param name="objectid">The ID of the object to replace the texture of with text.</param>
            <param name="text">The text to show on the object.</param>
            <param name="materialindex">The object's material index to replace with text.</param>
            <param name="materialsize">The size of the material.</param>
            <param name="fontface">The font to use.</param>
            <param name="fontsize">The size of the text (MAX 255).</param>
            <param name="bold">Bold text. Set to True for bold, False for not.</param>
            <param name="fontcolor">The color of the text, in ARGB format.</param>
            <param name="backcolor">The background color, in ARGB format.</param>
            <param name="textalignment">The alignment of the text (default: left).</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerObjectMaterialText(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
                Replace the texture of a player object with text.
            </summary>
            <param name="playerid">The ID of the player whose player object to set the text of.</param>
            <param name="objectid">The ID of the object on which to place the text.</param>
            <param name="text">The text to set.</param>
            <param name="materialindex">The material index to replace with text (DEFAULT: 0).</param>
            <param name="materialsize">The size of the material (DEFAULT: 256x128).</param>
            <param name="fontface">The font to use (DEFAULT: Arial).</param>
            <param name="fontsize">The size of the text (DEFAULT: 24) (MAX 255).</param>
            <param name="bold">Bold text. Set to True for bold, False for not (DEFAULT: True).</param>
            <param name="fontcolor">The color of the text (DEFAULT: White).</param>
            <param name="backcolor">The background color (DEFAULT: None (transparent)).</param>
            <param name="textalignment">The alignment of the text (DEFAULT: Left).</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreateObject(System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Single)">
            <summary>
                Creates an object.
            </summary>
            <param name="modelid">The model you want to use.</param>
            <param name="position">The coordinate to create the object at.</param>
            <param name="rotation">The rotation of the object.</param>
            <param name="drawDistance">
                The distance that San Andreas renders objects at. 0.0 will cause objects to render at their
                default distances.
            </param>
            <returns>The ID of the object that was created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachObjectToVehicle(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector)">
            <summary>
                Attach an object to a vehicle.
            </summary>
            <param name="objectid">The ID of the object to attach to the vehicle.</param>
            <param name="vehicleid">The ID of the vehicle to attach the object to.</param>
            <param name="offset">The offset.</param>
            <param name="rotation">The rotation offset.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachObjectToObject(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Boolean)">
            <summary>
                You can use this function to attach objects to other objects. The objects will folow the main object.
            </summary>
            <param name="objectid">The object to attach to another object.</param>
            <param name="attachtoid">The object to attach the object to.</param>
            <param name="offset">The distance between the main object and the object.</param>
            <param name="rotation">The rotation between the object and the main object.</param>
            <param name="syncRotation">
                If set to false, objects' rotation will not be changed. See ferriswheel filterscript for
                example.
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachObjectToPlayer(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector)">
            <summary>
                Attach an object to a player.
            </summary>
            <param name="objectid">The ID of the object to attach to the player.</param>
            <param name="playerid">The ID of the player to attach the object to.</param>
            <param name="offset">The distance between the player and the object.</param>
            <param name="rotation">The rotation between the object and the player.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetObjectPos(System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Change the position of an object.
            </summary>
            <param name="objectid">The ID of the object to set the position of.</param>
            <param name="position">The coordinate to position the object at.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetObjectPos(System.Int32)">
            <summary>
                Returns the coordinates of the current position of the given object.
            </summary>
            <param name="objectid">The object's id of which you want the current location.</param>
            <returns>The objects position.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetObjectRot(System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Rotates an object in all directions.
            </summary>
            <param name="objectid">The objectid of the object you want to rotate.</param>
            <param name="rotation">The rotation.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetObjectRot(System.Int32)">
            <summary>
                Use this function to get the objects current rotation.
            </summary>
            <param name="objectid">The objectid of the object you want to get the rotation from.</param>
            <returns>The objects rotation.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.MoveObject(System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.World.Vector)">
            <summary>
                Move an object to a new position with a set speed. Players/vehicles will 'surf' the object as it moves.
            </summary>
            <param name="objectid">The ID of the object to move.</param>
            <param name="position">The coordinate to move the object to.</param>
            <param name="speed">The speed at which to move the object (units per second).</param>
            <param name="rotation">The final rotation.</param>
            <returns>The time it will take for the object to move in milliseconds.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreatePlayerObject(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Single)">
            <summary>
                Creates an object which will be visible to only one player.
            </summary>
            <param name="playerid">The ID of the player to create the object for.</param>
            <param name="modelid">The model to create.</param>
            <param name="position">The coordinate to create the object at.</param>
            <param name="rotation">The rotation of the object.</param>
            <param name="drawDistance">
                The distance from which objects will appear to players. 0.0 will cause an object to render
                at its default distance. Leaving this parameter out will cause objects to be rendered at their default distance.
            </param>
            <returns>The ID of the object that was created, or INVALID_OBJECT_ID if the object limit (MAX_OBJECTS) was reached.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachPlayerObjectToPlayer(System.Int32,System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector)">
            <summary>
                The same as <see cref="M:SampSharp.GameMode.Natives.Native.AttachObjectToPlayer(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector)"/> but for objects which were created for
                player.
            </summary>
            <param name="objectplayer">The id of the player which is linked with the object.</param>
            <param name="objectid">The objectid you want to attach to the player.</param>
            <param name="attachplayerid">The id of the player you want to attach to the object.</param>
            <param name="offset">The distance between the player and the object.</param>
            <param name="rotation">The rotation.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachPlayerObjectToVehicle(System.Int32,System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector)">
            <summary>
                Attach a player object to a vehicle.
            </summary>
            <param name="playerid">The ID of the player the object was created for.</param>
            <param name="objectid">The ID of the object to attach to the vehicle.</param>
            <param name="vehicleid">The ID of the vehicle to attach the object to.</param>
            <param name="offset">The position offset for attachment.</param>
            <param name="rotation">The rotation offset for attachment.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerObjectPos(System.Int32,System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Sets the position of a player-object to the specified coordinates.
            </summary>
            <param name="playerid">The ID of the player whose player-object to set the position of.</param>
            <param name="objectid">
                The ID of the player-object to set the position of. Returned by
                <see cref="M:SampSharp.GameMode.Natives.Native.CreatePlayerObject(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Single)"/>.
            </param>
            <param name="position">The coordinate to put the object at.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerObjectPos(System.Int32,System.Int32)">
            <summary>
                Returns the coordinates of the current position of the given object.
            </summary>
            <param name="playerid">The player you associated this object to.</param>
            <param name="objectid">The object's id of which you want the current location.</param>
            <returns>The position of the object.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerObjectRot(System.Int32,System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Rotates an object in all directions.
            </summary>
            <param name="playerid">The player you associated this object to.</param>
            <param name="objectid">The objectid of the object you want to rotate.</param>
            <param name="rotation">The rotation.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerObjectRot(System.Int32,System.Int32)">
            <summary>
                Use this function to get the object' s current rotation. The rotation is saved by reference in three RotX/RotY/RotZ
                variables.
            </summary>
            <param name="playerid">The player you associated this object to.</param>
            <param name="objectid">The objectid of the object you want to get the rotation from.</param>
            <returns>The rotation of the object.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.MovePlayerObject(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.World.Vector)">
            <summary>
                Move an object with a set speed. Also supports rotation. Players/vehicles will surf moving objects.
            </summary>
            <param name="playerid">The ID of the player whose player-object to move.</param>
            <param name="objectid">The ID of the object to move.</param>
            <param name="position">The coordinate to move the object to.</param>
            <param name="speed">The speed at which to move the object.</param>
            <param name="rotation">The final rotation.</param>
            <returns>The time it will take for the object to move in milliseconds.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SendClientMessage(System.Int32,System.Int32,System.String)">
            <summary>
                This function sends a message to a specific player with a chosen color in the chat. The whole line in the chatbox
                will be in the set color unless colour embedding is used.
            </summary>
            <param name="playerid">The ID of the player to display the message to.</param>
            <param name="color">The color of the message.</param>
            <param name="message">The text that will be displayed (max 144 characters).</param>
            <returns>
                True: The function was successful (the message was sucessfully displayed (NOTE: success will be returned even
                if the message is too long (more than 144 characters) and fails to be sent)). False: The function failed (The
                message was not displayed (player not connected?)).
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SendClientMessageToAll(System.Int32,System.String)">
            <summary>
                Displays a message in chat to all players. This is a multi-player equivalent of <see cref="M:SampSharp.GameMode.Natives.Native.SendClientMessage(System.Int32,System.Int32,System.String)"/>.
            </summary>
            <param name="color">The color of the message (RGBA Hex format).</param>
            <param name="message">The message to show (max 144 characters).</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SendPlayerMessageToPlayer(System.Int32,System.Int32,System.String)">
            <summary>
                Sends a message in the name of a player to another player on the server. The message will appear in the chat box
                but can only be seen by the user specified with <paramref name="playerid" />. The line will start with the
                <paramref name="senderid" />'s name in his color, followed by the <paramref name="message" /> in white.
            </summary>
            <param name="playerid">The ID of the player who will recieve the message</param>
            <param name="senderid">The sender's ID. If invalid, the message will not be sent.</param>
            <param name="message">The message that will be sent.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SendPlayerMessageToAll(System.Int32,System.String)">
            <summary>
                Sends a message in the name of a player to all other players on the server. The line will start with the
                <paramref name="senderid" />'s name in their color, followed by the <paramref name="message" /> in white.
            </summary>
            <param name="senderid">The ID of the sender. If invalid, the message will not be sent.</param>
            <param name="message">The message that will be sent.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SendDeathMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
                Adds a death to the 'killfeed' on the right-hand side of the screen.
            </summary>
            <param name="killer">The ID of the killer (can be <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidPlayerId"/>).</param>
            <param name="killee">The ID of the player that died.</param>
            <param name="weapon">
                The reason (not always a weapon) for the <paramref name="killee"/>'s death. Special icons can
                also be used (ICON_CONNECT and ICON_DISCONNECT).
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GameTextForAll(System.String,System.Int32,System.Int32)">
            <summary>
                Shows 'game text' (on-screen text) for a certain length of time for all players.
            </summary>
            <param name="text">The text to be displayed.</param>
            <param name="time">The duration of the text being shown in milliseconds.</param>
            <param name="style">The style of text to be displayed.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GameTextForPlayer(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
                Shows 'game text' (on-screen text) for a certain length of time for a specific player.
            </summary>
            <param name="playerid">The ID of the player to show the gametext for.</param>
            <param name="text">The text to be displayed.</param>
            <param name="time">The duration of the text being shown in milliseconds.</param>
            <param name="style">The style of text to be displayed.</param>
            <returns>True on success, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetTickCount">
            <summary>
                Returns the uptime of the actual server in milliseconds.
            </summary>
            <returns>Uptime of the SA:MP server(NOT the physical box).</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetMaxPlayers">
            <summary>
                Returns the maximum number of players that can join the server, as set by the server var 'maxplayers' in
                server.cfg.
            </summary>
            <returns>The maximum number of players that can join the server.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetGameModeText(System.String)">
            <summary>
                Set the name of the game mode, which appears in the server browser.
            </summary>
            <param name="text">GameMode name.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetTeamCount(System.Int32)">
            <summary>
                This function is used to change the amount of teams used in the gamemode. It has no obvious way of being used, but
                can help to indicate the number of teams used for better (more effective) internal handling. This function should
                only be used in the <see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/> callback.
            </summary>
            <remarks>
                You can pass 2 billion here if you like, this function has no effect at all.
            </remarks>
            <param name="count">Number of teams the gamemode knows.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AddPlayerClass(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="spawnX">The X coordinate of the spawnpoint of this class.</param>
            <param name="spawnY">The Y coordinate of the spawnpoint of this class.</param>
            <param name="spawnZ">The Z coordinate of the spawnpoint of this class.</param>
            <param name="zAngle">The direction in which the player should face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the primary spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawnweapon.</param>
            <returns>
                The ID of the class which was just added. 300 if the class limit (300) was reached. The highest possible class
                ID is 299.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AddPlayerClassEx(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                This function is exactly the same as the <see cref="M:SampSharp.GameMode.Natives.Native.AddPlayerClass(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> function, with the addition of a team
                parameter.
            </summary>
            <param name="teamid">The team you want the player to spawn in.</param>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="spawnX">The X coordinate of the class' spawn position.</param>
            <param name="spawnY">The Y coordinate of the class' spawn position.</param>
            <param name="spawnZ">The Z coordinate of the class' spawn position.</param>
            <param name="zAngle">The direction in which the player will face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the first spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawnweapon.</param>
            <returns>The ID of the class that was just created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AddStaticVehicle(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Adds a 'static' vehicle (models are pre-loaded for players)to the gamemode. Can only be used when the server first
                starts (in <see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/>).
            </summary>
            <param name="modelid">The Model ID for the vehicle.</param>
            <param name="spawnX">The X-coordinate for the vehicle.</param>
            <param name="spawnY">The Y-coordinate for the vehicle.</param>
            <param name="spawnZ">The Z-coordinate for the vehicle.</param>
            <param name="zAngle">Direction of vehicle - angle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <returns>
                The vehicle ID of the vehicle created (1 - <see cref="F:SampSharp.GameMode.Definitions.Limits.MaxVehicles"/>).
                <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidVehicleId"/> (65535) if vehicle was not created (vehicle limit reached or invalid vehicle
                model ID passed).
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AddStaticVehicleEx(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
                Adds a 'static' vehicle (models are pre-loaded for players)to the gamemode. Can only be used when the server first
                starts (under <see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/>). Differs from <see cref="M:SampSharp.GameMode.Natives.Native.AddStaticVehicle(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)"/> in only one
                way: allows a respawn time to be set for when the vehicle is left unoccupied by the driver.
            </summary>
            <param name="modelid">The Model ID for the vehicle.</param>
            <param name="spawnX">The X-coordinate for the vehicle.</param>
            <param name="spawnY">The Y-coordinate for the vehicle.</param>
            <param name="spawnZ">The Z-coordinate for the vehicle.</param>
            <param name="zAngle">The facing - angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <param name="respawnDelay">The delay until the car is respawned without a driver, in seconds.</param>
            <returns>
                The vehicle ID of the vehicle created (1 - <see cref="F:SampSharp.GameMode.Definitions.Limits.MaxVehicles"/>).
                <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidVehicleId"/> (65535) if vehicle was not created (vehicle limit reached or invalid vehicle
                model ID passed).
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AddStaticPickup(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                This function adds a 'static' pickup to the game. These pickups support weapons, health, armor etc., with the
                ability to function without scripting them (weapons/health/armor will be given automatically).
            </summary>
            <param name="model">The model of the pickup.</param>
            <param name="type">The pickup spawn type.</param>
            <param name="x">The X coordinate to create the pickup at.</param>
            <param name="y">The Y coordinate to create the pickup at.</param>
            <param name="z">The Z coordinate to create the pickup at.</param>
            <param name="virtualworld">The virtual world ID of the pickup. Use -1 to show the pickup in all worlds.</param>
            <returns>1 if the pickup is successfully created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreatePickup(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                This function does exactly the same as <see cref="M:SampSharp.GameMode.Natives.Native.AddStaticPickup(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32)"/>, except it returns a pickup ID which can be
                used to destroy it afterwards and be tracked using <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerPickUpPickup(System.Int32,System.Int32)"/>.
            </summary>
            <param name="model">The model of the pickup.</param>
            <param name="type">The pickup spawn type.</param>
            <param name="x">The X coordinate to create the pickup at.</param>
            <param name="y">The Y coordinate to create the pickup at.</param>
            <param name="z">The Z coordinate to create the pickup at.</param>
            <param name="virtualworld">The virtual world ID of the pickup. Use -1 to make the pickup show in all worlds.</param>
            <returns>The ID of the created pickup, -1 on failure (pickup max limit).</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DestroyPickup(System.Int32)">
            <summary>
                Destroys a pickup.
            </summary>
            <param name="pickupid">The ID of the pickup to destroy.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ShowNameTags(System.Boolean)">
            <summary>
                Toggle the drawing of player nametags, healthbars and armor bars above players.
            </summary>
            <param name="show">False to disable, True to enable.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ShowPlayerMarkers(System.Int32)">
            <summary>
                A function that can be used in <see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/> to enable or disable the players markers,
                which would normally be shown on the radar. If you want to change the marker settings at some other point in the
                gamemode, have a look at <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerMarkerForPlayer(System.Int32,System.Int32,System.Int32)"/> which does exactly that.
            </summary>
            <param name="mode">The mode you want to use.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GameModeExit">
            <summary>
                Ends the currently active gamemode.
            </summary>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetWorldTime(System.Int32)">
            <summary>
                Sets the world time to a specific hour.
            </summary>
            <param name="hour">Which time to set.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetWeaponName(System.Int32,System.String@,System.Int32)">
            <summary>
                Get the name of a weapon.
            </summary>
            <param name="weaponid">The ID of the weapon to get the name of.</param>
            <param name="name">An array to store the weapon's name in, passed by reference.</param>
            <param name="size">The length of the weapon name.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.EnableTirePopping(System.Boolean)">
            <summary>
                With this function you can enable or disable tire popping.
            </summary>
            <param name="enable">True to enable, False to disable tire popping.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.EnableVehicleFriendlyFire">
            <summary>
                Enable friendly fire for team vehicles.
            </summary>
            <remarks>
                Players will be unable to damage teammates' vehicles (<see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerTeam(System.Int32,System.Int32)"/> must be used!)
            </remarks>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AllowInteriorWeapons(System.Boolean)">
            <summary>
                Toggle whether the usage of weapons in interiors is allowed or not.
            </summary>
            <param name="allow">True to enable weapons in interiors (enabled by default), False to disable weapons in interiors.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetWeather(System.Int32)">
            <summary>
                Set the world weather for all players.
            </summary>
            <param name="weatherid">The weather to set.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetGravity(System.Single)">
            <summary>
                Set the gravity for all players.
            </summary>
            <param name="gravity">The value that the gravity should be set to (between -50 and 50).</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AllowAdminTeleport(System.Boolean)">
            <summary>
                This function will determine whether RCON admins will be teleported to their waypoint when they set one.
            </summary>
            <param name="allow">False to disable and True to enable.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetDeathDropAmount(System.Int32)">
            <summary>
                Set the amount of money dropped when a player dies.
            </summary>
            <remarks>
                This function does not work in the current SA:MP version.
            </remarks>
            <param name="amount">Tthe amount of money dropped when a player dies.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreateExplosion(System.Single,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
                Create an explosion at the specified coordinates.
            </summary>
            <param name="x">The X coordinate of the explosion.</param>
            <param name="y">The Y coordinate of the explosion.</param>
            <param name="z">The Z coordinate of the explosion.</param>
            <param name="type">The type of explosion.</param>
            <param name="radius">The explosion radius.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.EnableZoneNames(System.Boolean)">
            <summary>
                This function allows to turn on zone / area names such as the "Vinewood" or "Doherty" text at the bottom-right of
                the screen as they enter the area. This is a gamemode option and should be set in the callback
                <see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/>.
            </summary>
            <param name="enable">A toggle option for whether or not you'd like zone names on or off. False is off and True is on.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.UsePlayerPedAnims">
            <summary>
                Uses standard player walking animation (animation of CJ) instead of custom animations for every skin (e.g. skating
                for skater skins).
            </summary>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DisableInteriorEnterExits">
            <summary>
                Disable all the interior entrances and exits in the game (the yellow arrows at doors).
            </summary>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetNameTagDrawDistance(System.Single)">
            <summary>
                Set the maximum distance to display the names of players.
            </summary>
            <param name="distance">The distance to set.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DisableNameTagLOS">
            <summary>
                Disables the nametag Line-Of-Sight checking so players can see nametags through objects.
            </summary>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.LimitGlobalChatRadius(System.Single)">
            <summary>
                Set a radius limitation for the chat. Only players at a certain distance from the player will see their message in
                the chat. Also changes the distance at which a player can see other players on the map at the same distance.
            </summary>
            <param name="chatRadius">Radius limit.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.LimitPlayerMarkerRadius(System.Single)">
            <summary>
                Set the player marker radius.
            </summary>
            <param name="markerRadius">The radius that markers will show at.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ConnectNPC(System.String,System.String)">
            <summary>
                Connect an NPC to the server.
            </summary>
            <param name="name">The name the NPC should connect as. Must follow the same rules as normal player names.</param>
            <param name="script">The NPC script name that is located in the npcmodes folder (without the .amx extension).</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerNPC(System.Int32)">
            <summary>
                Check if a player is an actual player or an NPC.
            </summary>
            <param name="playerid">The ID of the player to check.</param>
            <returns>True if the player is an NPC, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerAdmin(System.Int32)">
            <summary>
                Check if a player is logged into RCON.
            </summary>
            <param name="playerid">The ID of the player to check.</param>
            <returns>True if the player is logged into RCON, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.Kick(System.Int32)">
            <summary>
                Kicks a player from the server. They will have to quit the game and re-connect if they wish to continue playing.
            </summary>
            <param name="playerid">The ID of the player to kick.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.Ban(System.Int32)">
            <summary>
                Ban a player who currently in the server. The ban will be IP-based, and be saved in the samp.ban file in the
                server's root directory. <see cref="M:SampSharp.GameMode.Natives.Native.BanEx(System.Int32,System.String)"/> allows you to ban with a reason, while you can ban and unban IPs
                using the RCON banip and unbanip commands.
            </summary>
            <param name="playerid">The ID of the player to ban.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.BanEx(System.Int32,System.String)">
            <summary>
                Ban a player with a reason.
            </summary>
            <param name="playerid">The ID of the player to ban.</param>
            <param name="reason">The reason for the ban.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SendRconCommand(System.String)">
            <summary>
                Sends an RCON command.
            </summary>
            <param name="command">The RCON command to be executed.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetServerVarAsString(System.String,System.String@,System.Int32)">
            <summary>
                Retrieve a string server variable, for example 'hostname'. Typing 'varlist' in the console will display a list of
                available server variables.
            </summary>
            <param name="varname">The name of the string variable to retrieve.</param>
            <param name="value">An array to store the retrieved string in.</param>
            <param name="size">Maximum length of the return string.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetServerVarAsInt(System.String)">
            <summary>
                Get the integer value of a server variable, for example 'port'.
            </summary>
            <param name="varname">A string containing the name of the integer variable to retrieve.</param>
            <returns>The value of the specified server variable as an integer.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetServerVarAsBool(System.String)">
            <summary>
                Gets a boolean parameter from the server.cfg file for use in scripts. Typing varlist in the server will give a list
                of server.cfg vars and their types.
            </summary>
            <param name="varname">Name of the server.cfg var you want to get the value of.</param>
            <returns>The value of the specified server var as a boolean.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerNetworkStats(System.Int32,System.String@,System.Int32)">
            <summary>
                Gets a player's network stats and saves them into a string.
            </summary>
            <param name="playerid">The ID of the player you want to get the networkstats of.</param>
            <param name="retstr">The string to store the networkstats in, passed by reference.</param>
            <param name="size">The length of the string that should be stored.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetNetworkStats(System.String@,System.Int32)">
            <summary>
                Gets the server's network stats and stores them in a string.
            </summary>
            <param name="retstr">The string to store the network stats in, passed by reference.</param>
            <param name="size">The length of the string to be stored.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerVersion(System.Int32,System.String@,System.Int32)">
            <summary>
                Returns the SA-MP client revision as reported by the player.
            </summary>
            <param name="playerid">The ID of the player to get the version of.</param>
            <param name="version">The string to store the player's version in, passed by reference.</param>
            <param name="len">The maximum size of the version.</param>
            <returns>True on success, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreateMenu(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Create a menu.
            </summary>
            <param name="title">The title for the new menu.</param>
            <param name="columns">How many colums shall the new menu have.</param>
            <param name="x">The X position of the menu (640x460 canvas - 0 would put the menu at the far left).</param>
            <param name="y">The Y position of the menu (640x460 canvas - 0 would put the menu at the far top).</param>
            <param name="col1Width"> The width for the first column.</param>
            <param name="col2Width"> The width for the second column.</param>
            <returns>The ID of the new menu or -1 on failure.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DestroyMenu(System.Int32)">
            <summary>
                Destroys the specified menu.
            </summary>
            <param name="menuid">The menu ID to destroy.</param>
            <returns>True if the destroying was successful, otherwise false.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AddMenuItem(System.Int32,System.Int32,System.String)">
            <summary>
                Adds an item to a specified menu.
            </summary>
            <param name="menuid">The menu id to add an item to.</param>
            <param name="column">The column to add the item to.</param>
            <param name="menutext">The title for the new menu item.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetMenuColumnHeader(System.Int32,System.Int32,System.String)">
            <summary>
                Sets the caption of a column in a menu.
            </summary>
            <param name="menuid">ID of the menu which shall be manipulated.</param>
            <param name="column">Which column in the menu shall be manipulated.</param>
            <param name="columnheader">The caption-text for the column.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ShowMenuForPlayer(System.Int32,System.Int32)">
            <summary>
                Shows a previously created menu for a player.
            </summary>
            <param name="menuid">The ID of the menu to show.</param>
            <param name="playerid">The ID of the player to whom the menu will be shown.</param>
            <returns>True on succeeded, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.HideMenuForPlayer(System.Int32,System.Int32)">
            <summary>
                Hides a menu for a player.
            </summary>
            <param name="menuid">The ID of the menu to hide.</param>
            <param name="playerid">The ID of the player that the menu will be hidden for.</param>
            <returns>True on succeeeded, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsValidMenu(System.Int32)">
            <summary>
                Check whether the given menu has been created.
            </summary>
            <param name="menuid">The ID of the menu to check.</param>
            <returns>True if valid, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DisableMenu(System.Int32)">
            <summary>
                Disable a menu.
            </summary>
            <param name="menuid">The menu to disable.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DisableMenuRow(System.Int32,System.Int32)">
            <summary>
                Disable a specific row in a menu.
            </summary>
            <param name="menuid">The menu to disable a row of.</param>
            <param name="row">The row to disable.</param>
            <returns>True on succeeded, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerMenu(System.Int32)">
            <summary>
                Gets the ID of the menu the player is currently viewing.
            </summary>
            <param name="playerid">The ID of the player to check whether the menu is show for.</param>
            <returns>The ID of the player's currently shown menu or 255 on failure.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawCreate(System.Single,System.Single,System.String)">
            <summary>
                Creates a textdraw.
            </summary>
            <param name="x">X-Coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="text">The text in the textdraw.</param>
            <returns>The ID of the created textdraw.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawDestroy(System.Int32)">
            <summary>
                Destroys a textdraw.
            </summary>
            <param name="text">The ID of the textdraw to destroy.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawLetterSize(System.Int32,System.Single,System.Single)">
            <summary>
                Sets the width and height of the letters.
            </summary>
            <param name="text">The TextDraw to change.</param>
            <param name="x">Width of a char.</param>
            <param name="y">Height of a char.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawTextSize(System.Int32,System.Single,System.Single)">
            <summary>
                Change the size of a textdraw (box if <see cref="M:SampSharp.GameMode.Natives.Native.TextDrawUseBox(System.Int32,System.Boolean)"/> is enabled and/or clickable area for use with
                <see cref="M:SampSharp.GameMode.Natives.Native.TextDrawSetSelectable(System.Int32,System.Boolean)"/>).
            </summary>
            <param name="text">The TextDraw to set the size of.</param>
            <param name="x">The size on the X axis (left/right) following the same 640x480 grid as TextDrawCreate.</param>
            <param name="y">The size on the Y axis (up/down) following the same 640x480 grid as TextDrawCreate.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawAlignment(System.Int32,System.Int32)">
            <summary>
                Aligns the text in the draw area.
            </summary>
            <param name="text">The ID of the textdraw to set the alignment of.</param>
            <param name="alignment">1-left 2-centered 3-right.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawColor(System.Int32,System.Int32)">
            <summary>
                Sets the text color of a textdraw.
            </summary>
            <param name="text">The TextDraw to change.</param>
            <param name="color">The color in hexadecimal format.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawUseBox(System.Int32,System.Boolean)">
            <summary>
                Toggle whether a textdraw uses a box.
            </summary>
            <param name="text">The textdraw to toggle the box on.</param>
            <param name="use">True to show a box or False to not show a box.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawBoxColor(System.Int32,System.Int32)">
            <summary>
                Adjusts the text box colour (only used if <see cref="M:SampSharp.GameMode.Natives.Native.TextDrawUseBox(System.Int32,System.Boolean)"/> is set to True).
            </summary>
            <remarks>
                Opacity is set by the alpha intensity of colour (eg. color 0x000000FF has a solid black box opacity, whereas
                0x000000AA has a semi-transparent black box opacity)
            </remarks>
            <param name="text">The TextDraw to change.</param>
            <param name="color">The colour.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawSetShadow(System.Int32,System.Int32)">
            <summary>
                Adds a shadow to the lower right side of the text. The shadow font matches the text font. The shadow can be cut by
                the box area if the size is set too big for the area.
            </summary>
            <param name="text">The textdraw to change the shadow of.</param>
            <param name="size">The size of the shadow.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawSetOutline(System.Int32,System.Int32)">
            <summary>
                Sets the thickness of a textdraw's text's outline. <see cref="M:SampSharp.GameMode.Natives.Native.TextDrawBackgroundColor(System.Int32,System.Int32)"/> can be used to change the
                color.
            </summary>
            <param name="text">The ID of the text draw to set the outline thickness of.</param>
            <param name="size">The thickness of the outline, as an integer. 0 for no outline.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawBackgroundColor(System.Int32,System.Int32)">
            <summary>
                Adjusts the text draw area background color (the outline/shadow - NOT the box. For box color, see
                <see cref="M:SampSharp.GameMode.Natives.Native.TextDrawBoxColor(System.Int32,System.Int32)"/>).
            </summary>
            <param name="text">The ID of the textdraw to set the background color of.</param>
            <param name="color">The color that the textdraw should be set to.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawFont(System.Int32,System.Int32)">
            <summary>
                Changes the text font.
            </summary>
            <param name="text">The TextDraw to change.</param>
            <param name="font">
                There are four font styles as shown below. Font value 4 specifies that this is a txd sprite; 5
                specifies that this textdraw can display preview models. A font value greater than 5 does not display, and anything
                greater than 16 crashes the client.
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawSetProportional(System.Int32,System.Boolean)">
            <summary>
                Appears to scale text spacing to a proportional ratio. Useful when using TextDrawLetterSize to ensure the text has
                even character spacing.
            </summary>
            <param name="text">The ID of the textdraw to set the proportionality of.</param>
            <param name="set">True to enable proportionality, False to disable.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawSetSelectable(System.Int32,System.Boolean)">
            <summary>
                Sets the text draw to be selectable or not.
            </summary>
            <param name="text">The textdraw id that should be made selectable.</param>
            <param name="set">Set the textdraw selectable (True) or non-selectable (False). By default this is False.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawShowForPlayer(System.Int32,System.Int32)">
            <summary>
                Shows a textdraw for a specific player.
            </summary>
            <param name="playerid">The ID of the player to show the textdraw for.</param>
            <param name="text">The ID of the textdraw to show.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawHideForPlayer(System.Int32,System.Int32)">
            <summary>
                Hides a textdraw for a specific player.
            </summary>
            <param name="playerid">The ID of the player that the textdraw should be hidden for.</param>
            <param name="text">The ID of the textdraw to hide.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawShowForAll(System.Int32)">
            <summary>
                Shows a textdraw for all players.
            </summary>
            <param name="text">The textdraw to show.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawHideForAll(System.Int32)">
            <summary>
                Hides a text draw for all players.
            </summary>
            <param name="text">The TextDraw to hide.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawSetString(System.Int32,System.String)">
            <summary>
                Changes the text on a textdraw.
            </summary>
            <param name="text">The TextDraw to change.</param>
            <param name="str">The new string for the TextDraw.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawSetPreviewModel(System.Int32,System.Int32)">
            <summary>
                Set the model for a textdraw model preview.
            </summary>
            <param name="text">The textdraw id that will display the 3D preview.</param>
            <param name="modelindex">The GTA SA or SA:MP model ID to display.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawSetPreviewRot(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the rotation and zoom of a 3D model preview textdraw.
            </summary>
            <param name="text">The textdraw id that displays the 3D preview.</param>
            <param name="rotX">The X rotation value.</param>
            <param name="rotY">The Y rotation value.</param>
            <param name="rotZ">The Z rotation value.</param>
            <param name="zoom">
                The zoom value, default value 1.0, smaller values make the camera closer and larger values make the
                camera further away.
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TextDrawSetPreviewVehCol(System.Int32,System.Int32,System.Int32)">
            <summary>
                If a vehicle model is used in a 3D preview textdraw, this sets the two colour values for that vehicle.
            </summary>
            <param name="text">The textdraw id that is set to display a 3D vehicle model preview.</param>
            <param name="color1">The primary Color ID to set the vehicle to.</param>
            <param name="color2">The secondary Color ID to set the vehicle to.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SelectTextDraw(System.Int32,System.Int32)">
            <summary>
                Display the cursor and allow the player to select a textdraw.
            </summary>
            <param name="playerid">The ID of the player that should be able to select a textdraw.</param>
            <param name="hovercolor">The color of the textdraw when hovering over with mouse.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CancelSelectTextDraw(System.Int32)">
            <summary>
                Cancel textdraw selection with the mouse.
            </summary>
            <param name="playerid">The ID of the player that should be the textdraw selection disabled.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GangZoneCreate(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Create a gangzone (colored radar area).
            </summary>
            <param name="minx">The X coordinate for the west side of the gangzone.</param>
            <param name="miny">The Y coordinate for the south side of the gangzone.</param>
            <param name="maxx">The X coordinate for the east side of the gangzone.</param>
            <param name="maxy">The Y coordinate for the north side of the gangzone.</param>
            <returns>The ID of the created zone.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GangZoneDestroy(System.Int32)">
            <summary>
                Destroy a gangzone.
            </summary>
            <param name="zone">The ID of the zone to destroy.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GangZoneShowForPlayer(System.Int32,System.Int32,System.Int32)">
            <summary>
                Show a gangzone for a player.
            </summary>
            <param name="playerid">The ID of the player you would like to show the gangzone for.</param>
            <param name="zone">The ID of the gang zone to show for the player.</param>
            <param name="color">The color to show the gang zone as. Alpha transparency supported.</param>
            <returns>True if the gangzone was shown, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GangZoneShowForAll(System.Int32,System.Int32)">
            <summary>
                GangZoneShowForAll shows a gangzone with the desired color to all players.
            </summary>
            <param name="zone">The ID of the gangzone to show.</param>
            <param name="color">The color of the gangzone.</param>
            <returns>True if the gangzone was shown, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GangZoneHideForPlayer(System.Int32,System.Int32)">
            <summary>
                Hides a gangzone for a player.
            </summary>
            <param name="playerid">The ID of the player to hide the gangzone for.</param>
            <param name="zone">The ID of the zone to hide.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GangZoneHideForAll(System.Int32)">
            <summary>
                GangZoneHideForAll hides a gangzone from all players.
            </summary>
            <param name="zone">The zone to hide.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GangZoneFlashForPlayer(System.Int32,System.Int32,System.Int32)">
            <summary>
                Makes a gangzone flash for a player.
            </summary>
            <param name="playerid">The ID of the player to flash the gangzone for.</param>
            <param name="zone">The ID of the zone to flash.</param>
            <param name="flashcolor">The color the zone will flash.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GangZoneFlashForAll(System.Int32,System.Int32)">
            <summary>
                GangZoneFlashForAll flashes a gangzone for all players.
            </summary>
            <param name="zone">The zone to flash.</param>
            <param name="flashcolor">The color the zone will flash.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GangZoneStopFlashForPlayer(System.Int32,System.Int32)">
            <summary>
                Stops a gangzone flashing for a player.
            </summary>
            <param name="playerid">The ID of the player to stop the gangzone flashing for.</param>
            <param name="zone">The ID of the gangzonezone to stop flashing.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GangZoneStopFlashForAll(System.Int32)">
            <summary>
                GangZoneStopFlashForAll stops a gangzone flashing for all players.
            </summary>
            <param name="zone">The zone to stop from flashing.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.Create3DTextLabel(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
                Creates a 3D Text Label at a specific location in the world.
            </summary>
            <param name="text">The initial text string.</param>
            <param name="color">The text Color.</param>
            <param name="x">X-Coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="z">Z-Coordinate.</param>
            <param name="drawDistance">The distance from where you are able to see the 3D Text Label.</param>
            <param name="virtualWorld">The virtual world in which you are able to see the 3D Text.</param>
            <param name="testLOS">Whether to test the line-of-sight so this text can't be seen through objects.</param>
            <returns>The ID of the newly created 3D Text Label.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.Delete3DTextLabel(System.Int32)">
            <summary>
                Delete a 3D text label.
            </summary>
            <param name="id">The ID of the 3D text label to delete.</param>
            <returns>True if the 3D text label was deleted, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.Attach3DTextLabelToPlayer(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Attatch a 3D text label to player.
            </summary>
            <param name="id">The ID of the 3D Text label to attach.</param>
            <param name="playerid">The ID of the player to attach the 3D text label to.</param>
            <param name="offsetX">The X offset from the player.</param>
            <param name="offsetY">The Y offset from the player.</param>
            <param name="offsetZ">The Z offset from the player.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.Attach3DTextLabelToVehicle(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Attaches a 3D Text Label to a specific vehicle.
            </summary>
            <param name="id">The 3D Text Label you want to attach.</param>
            <param name="vehicleid">The vehicle you want to attach the 3D Text Label to.</param>
            <param name="offsetX">The Offset-X coordinate of the vehicle.</param>
            <param name="offsetY">The Offset-Y coordinate of the vehicle.</param>
            <param name="offsetZ">The Offset-Z coordinate of the vehicle.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.Update3DTextLabelText(System.Int32,System.Int32,System.String)">
            <summary>
                Updates a 3D Text Label text and color.
            </summary>
            <param name="id">The 3D Text Label you want to update.</param>
            <param name="color">The color the 3D Text Label should have from now on.</param>
            <param name="text">The new text which the 3D Text Label should have from now on.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreatePlayer3DTextLabel(System.Int32,System.String,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a 3D Text Label only for a specific player.
            </summary>
            <param name="playerid">The player which should see the newly created 3DText Label.</param>
            <param name="text">The text to display.</param>
            <param name="color">The text color.</param>
            <param name="x">X Coordinate (or offset if attached).</param>
            <param name="y">Y Coordinate (or offset if attached).</param>
            <param name="z">Z Coordinate (or offset if attached).</param>
            <param name="drawDistance">The distance where you are able to see the 3D Text Label.</param>
            <param name="attachedplayer">
                The player you want to attach the 3D Text Label to. (None:
                <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidPlayerId"/>).
            </param>
            <param name="attachedvehicle">
                The vehicle you want to attach the 3D Text Label to. (None:
                <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidVehicleId"/>).
            </param>
            <param name="testLOS">Whether to test the line-of-sight so this text can't be seen through walls.</param>
            <returns>The ID of the newly created Player 3D Text Label.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DeletePlayer3DTextLabel(System.Int32,System.Int32)">
            <summary>
                Destroy a 3D Text Label.
            </summary>
            <param name="playerid">The player whose 3D text label to destroy.</param>
            <param name="id">The ID of the 3D Text Label to destroy.</param>
            <returns>True if destroyed, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.UpdatePlayer3DTextLabelText(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
                Updates a player 3D Text Label's text and color.
            </summary>
            <param name="playerid">The ID of the player for which the 3D Text Label was created.</param>
            <param name="id">The 3D Text Label you want to update.</param>
            <param name="color">The color the 3D Text Label should have from now on.</param>
            <param name="text">The new text which the 3D Text Label should have from now on.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ShowPlayerDialog(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
                Shows the player a synchronous (only one at a time) dialog box.
            </summary>
            <param name="playerid">The ID of the player to show the dialog to.</param>
            <param name="dialogid">
                An ID to assign this dialog to, so responses can be processed. Max dialogid is 32767. Using
                negative values will close any open dialog.
            </param>
            <param name="style">The style of the dialog.</param>
            <param name="caption">
                The title at the top of the dialog. The length of the caption can not exceed more than 64
                characters before it starts to cut off.
            </param>
            <param name="info">The text to display in the main dialog. Use \n to start a new line and \t to tabulate.</param>
            <param name="button1">The text on the left button.</param>
            <param name="button2">The text on the right button. Leave it blank to hide it.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetTimer(System.Int32,System.Boolean,System.Object)">
            <summary>
                Sets a timer to call a function after some time.
            </summary>
            <param name="interval">Interval in milliseconds.</param>
            <param name="repeat">Boolean if the timer should occur repeatedly or only once.</param>
            <param name="args">An object containing information about the timer.</param>
            <returns>The ID of the timer that was started.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.KillTimer(System.Int32)">
            <summary>
                Kills (stops) a running timer.
            </summary>
            <param name="timerid">The ID of the timer to kill.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.gpci(System.Int32,System.String@,System.Int32)">
            <summary>
                Returns a hash build from information of the player's PC.
            </summary>
            <remarks>
                It is a non-reversible (lossy) hash derived from information about your San Andreas installation path.
                It is not a unique ID.
                It was added to assist owners of large servers who deal with constant attacks from cheaters and botters.
                It has been in SA-MP for 2 years.
            </remarks>
            <param name="playerid">The ID of the player whose gpci you'd like</param>
            <param name="buffer">A string to store the gpci, passed by reference.</param>
            <param name="size">The length of the string that should be stored.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SendDeathMessageToPlayer(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Adds a death to the 'killfeed' on the right-hand side of the screen for a single player.
            </summary>
            <param name="playerid">The ID of the player to send the death message to.</param>
            <param name="killer">The ID of the killer (can be <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidPlayerId"/>).</param>
            <param name="killee">The ID of the player that died.</param>
            <param name="weapon">
                The reason (not always a weapon) for the victim's death. Special icons can also be used
                (ICON_CONNECT and ICON_DISCONNECT).
            </param>
            <returns>True if the function executed successfully, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.BlockIpAddress(System.String,System.Int32)">
            <summary>
                Blocks an IP address from further communication with the server for a set amount of time (with wildcards allowed).
            </summary>
            <param name="ipAddress">The IP to block.</param>
            <param name="timems">
                The time (in milliseconds) that the connection will be blocked for. 0 can be used for an
                indefinite block.
            </param>
            <returns>This function does not return any specific values.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.UnBlockIpAddress(System.String)">
            <summary>
                Unblock an IP address that was previously blocked using <see cref="M:SampSharp.GameMode.Natives.Native.BlockIpAddress(System.String,System.Int32)"/>.
            </summary>
            <param name="ipAddress">The IP address to unblock.</param>
            <returns>This function does not return any specific values.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.gpci(System.Int32)">
            <summary>
                Returns a hash build from information of the player's PC.
            </summary>
            <remarks>
                It is a non-reversible (lossy) hash derived from information about your San Andreas installation path.
                It is not a unique ID.
                It was added to assist owners of large servers who deal with constant attacks from cheaters and botters.
                It has been in SA-MP for 2 years.
            </remarks>
            <param name="playerid">The ID of the player whose gpci you'd like.</param>
            <returns>The gpci value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetWeaponName(System.Int32)">
            <summary>
                Get the name of a weapon.
            </summary>
            <param name="weaponid">The ID of the weapon to get the name of.</param>
            <returns>The weapon's name.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetServerVarAsString(System.String)">
            <summary>
                Retrieve a string server variable, for example 'hostname'. Typing 'varlist' in the console will display a list of
                available server variables.
            </summary>
            <param name="varname">The name of the string variable to retrieve.</param>
            <returns>The servervar as string.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerNetworkStats(System.Int32)">
            <summary>
                Gets a player's network stats and saves them into a string.
            </summary>
            <param name="playerid">The ID of the player you want to get the networkstats of.</param>
            <returns>A string containing the networkstats.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetNetworkStats">
            <summary>
                Gets the server's network stats and stores them in a string.
            </summary>
            <returns>A string containing the network stats.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerVersion(System.Int32)">
            <summary>
                Gets the version of a player's client.
            </summary>
            <param name="playerid">The player whose version to check.</param>
            <returns>The version of the client.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.Create3DTextLabel(System.String,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.World.Vector,System.Single,System.Int32,System.Boolean)">
            <summary>
                Creates a 3D Text Label at a specific location in the world.
            </summary>
            <param name="text">The initial text string.</param>
            <param name="color">The text Color.</param>
            <param name="position">The coordinates.</param>
            <param name="drawDistance">The distance from where you are able to see the 3D Text Label.</param>
            <param name="virtualWorld">The virtual world in which you are able to see the 3D Text.</param>
            <param name="testLOS">Whether to test the line-of-sight so this text can't be seen through objects.</param>
            <returns>The ID of the newly created 3D Text Label.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreatePlayer3DTextLabel(System.Int32,System.String,System.Int32,SampSharp.GameMode.World.Vector,System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a 3D Text Label only for a specific player.
            </summary>
            <param name="playerid">The player which should see the newly created 3DText Label.</param>
            <param name="text">The text to display.</param>
            <param name="color">The text color.</param>
            <param name="position">The coordinates (or offset if attached).</param>
            <param name="drawDistance">The distance where you are able to see the 3D Text Label.</param>
            <param name="attachedplayer">
                The player you want to attach the 3D Text Label to. (None:
                <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidPlayerId"/>).
            </param>
            <param name="attachedvehicle">
                The vehicle you want to attach the 3D Text Label to. (None:
                <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidVehicleId"/>).
            </param>
            <param name="testLOS">Whether to test the line-of-sight so this text can't be seen through walls.</param>
            <returns>The ID of the newly created Player 3D Text Label.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AddPlayerClass(System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the spawnpoint of this class.</param>
            <param name="zAngle">The direction in which the player should face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the primary spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawnweapon.</param>
            <returns>
                The ID of the class which was just added. 300 if the class limit (300) was reached. The highest possible class
                ID is 299.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AddPlayerClassEx(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                This function is exactly the same as the <see cref="M:SampSharp.GameMode.Natives.Native.AddPlayerClass(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> function, with the addition of a team
                parameter.
            </summary>
            <param name="teamid">The team you want the player to spawn in.</param>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the class' spawn position.</param>
            <param name="zAngle">The direction in which the player will face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the first spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawnweapon.</param>
            <returns>The ID of the class that was just created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreateExplosion(SampSharp.GameMode.World.Vector,System.Int32,System.Single)">
            <summary>
                Create an explosion at the specified coordinates.
            </summary>
            <param name="position">The position of the explosion.</param>
            <param name="type">The type of explosion.</param>
            <param name="radius">The explosion radius.</param>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetSpawnInfo(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                This function can be used to change the spawn information of a specific player. It allows you to automatically set
                someone's spawn weapons, their team, skin and spawn position, normally used in case of minigames or automatic-spawn
                systems. This function is more crash-safe then using SetPlayerSkin in OnPlayerSpawn and/or OnPlayerRequestClass,
                even though this has been fixed in 0.2.
            </summary>
            <param name="playerid">The PlayerID of who you want to set the spawn information.</param>
            <param name="team">The Team-ID of the chosen player.</param>
            <param name="skin">The skin which the player will spawn with.</param>
            <param name="x">The X-coordinate of the player's spawn position.</param>
            <param name="y">The Y-coordinate of the player's spawn position.</param>
            <param name="z">The Z-coordinate of the player's spawn position.</param>
            <param name="rotation">The direction in which the player needs to be facing after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the primary spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawnweapon.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SpawnPlayer(System.Int32)">
            <summary>
                (Re)Spawns a player.
            </summary>
            <param name="playerid">The ID of the player to spawn.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerPos(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Set a player's position.
            </summary>
            <param name="playerid">The ID of the player to set the position of.</param>
            <param name="x">The X coordinate to position the player at.</param>
            <param name="y">The Y coordinate to position the player at.</param>
            <param name="z">The Z coordinate to position the player at.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerPosFindZ(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                This sets the players position then adjusts the players z-coordinate to the nearest solid ground under the
                position.
            </summary>
            <param name="playerid">The ID of the player to set the position of.</param>
            <param name="x">The X coordinate to position the player at.</param>
            <param name="y">The Y coordinate to position the player at.</param>
            <param name="z">The Z coordinate to position the player at.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerPos(System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Get the X Y Z coordinates of a player.
            </summary>
            <param name="playerid">The ID of the player to get the position of</param>
            <param name="x">A float to store the X coordinate in, passed by reference.</param>
            <param name="y">A float to store the Y coordinate in, passed by reference.</param>
            <param name="z">A float to store the Z coordinate in, passed by reference.</param>
            <returns>This function doesn't return a specific value</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerFacingAngle(System.Int32,System.Single)">
            <summary>
                Set a player's facing angle.
            </summary>
            <remarks>
                Angles are reversed in GTA:SA - 90 degrees would be East in the real world, but in GTA:SA 90 is in fact West. North
                and South are still 0/360 and 180. To convert this, simply do 360 - angle.
            </remarks>
            <param name="playerid">The ID of the player to set the facing angle of.</param>
            <param name="angle">The angle the player should face.</param>
            <returns>This function doesn't return a specific value</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerFacingAngle(System.Int32,System.Single@)">
            <summary>
                Return angle of the direction the player is facing.
            </summary>
            <param name="playerid">The player you want to get the angle of.</param>
            <param name="angle">The Float to store the angle in, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerInRangeOfPoint(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Check if a player is in range of a point.
            </summary>
            <param name="playerid">The ID of the player.</param>
            <param name="range">The furthest distance the player can be from the point to be in range.</param>
            <param name="x">The X coordinate of the point to check the range to.</param>
            <param name="y">The Y coordinate of the point to check the range to.</param>
            <param name="z">The Z coordinate of the point to check the range to.</param>
            <returns>True if the player is in range of the point, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerDistanceFromPoint(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Calculate the distance between a player and a map coordinate.
            </summary>
            <param name="playerid">The ID of the player to calculate the distance from.</param>
            <param name="x">The X map coordinate.</param>
            <param name="y">The Y map coordinate.</param>
            <param name="z">The Z map coordinate.</param>
            <returns>The distance between the player and the point as a float.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerStreamedIn(System.Int32,System.Int32)">
            <summary>
                Checks if a player is streamed in another player's client.
            </summary>
            <remarks>
                Players aren't streamed in on their own client, so if playerid is the same as forplayerid it will return false!
            </remarks>
            <remarks>
                Players stream out if they are more than 150 meters away (see server.cfg - stream_distance)
            </remarks>
            <param name="playerid">The ID of the player to check is streamed in.</param>
            <param name="forplayerid">The ID of the player to check if playerid is streamed in for.</param>
            <returns>True if forplayerid is streamed in for playerid, False if not.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerInterior(System.Int32,System.Int32)">
            <summary>
                Set the player's interior.
            </summary>
            <param name="playerid">The ID of the player to setthe interior of.</param>
            <param name="interiorid">The interior ID to set the player in.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerInterior(System.Int32)">
            <summary>
                Retrieves the player's current interior.
            </summary>
            <param name="playerid">The player to get the interior ID of.</param>
            <returns>The interior ID the player is currently in.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerHealth(System.Int32,System.Single)">
            <summary>
                Set the health level of a player.
            </summary>
            <param name="playerid">The ID of the player to set the health of.</param>
            <param name="health">The value to set the player's health to.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerHealth(System.Int32,System.Single@)">
            <summary>
                The function GetPlayerHealth allows you to retrieve the health of a player. Useful for cheat detection, among other
                things.
            </summary>
            <param name="playerid">The ID of the player.</param>
            <param name="health">Float to store health, passed by reference.</param>
            <returns>True if succeeded, False if not.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerArmour(System.Int32,System.Single)">
            <summary>
                Set a player's armour level.
            </summary>
            <param name="playerid">The ID of the player to set the armour of.</param>
            <param name="armour">The amount of armour to set, as a percentage (float).</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerArmour(System.Int32,System.Single@)">
            <summary>
                This function stores the armour of a player into a variable.
            </summary>
            <param name="playerid">The ID of the player that you want to get the armour of.</param>
            <param name="armour">The float to to store the armour in, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerAmmo(System.Int32,System.Int32,System.Int32)">
            <summary>
                Set the ammo of a player's weapon.
            </summary>
            <param name="playerid">The ID of the player to set the weapon ammo of.</param>
            <param name="weaponid">The ID of the weapon to set the ammo of.</param>
            <param name="ammo">The amount of ammo to set.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerAmmo(System.Int32)">
            <summary>
                Returns the amount of ammunition the player has in his active weapon slot.
            </summary>
            <remarks>
                The ammo can hold 16-bit values, therefore values over 32767 will return erroneous values.
            </remarks>
            <param name="playerid">ID of the player.</param>
            <returns>The amount of ammunition the player has in his active weapon slot.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerWeaponState(System.Int32)">
            <summary>
                Checks the state of a player's weapon.
            </summary>
            <param name="playerid">The ID of the player to obtain the state of.</param>
            <returns>The state of the player's weapon.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerTargetPlayer(System.Int32)">
            <summary>
                Check who a player is aiming at.
            </summary>
            <param name="playerid">The ID of the player to get the target of.</param>
            <returns>The ID of the target player, or <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidPlayerId"/> if none.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerTeam(System.Int32,System.Int32)">
            <summary>
                Set the team of a player.
            </summary>
            <remarks>
                Players can not damage/kill players on the same team unless they use a knife to slit their throat. Players are also
                unable to damage vehicles driven by a player from the same team. This can be enabled with
                <see cref="M:SampSharp.GameMode.Natives.Native.EnableVehicleFriendlyFire"/>.
                255 (or <see cref="F:SampSharp.GameMode.Definitions.Misc.NoTeam"/>) is the default team to be able to shoot other players, not 0.
            </remarks>
            <param name="playerid">The ID of the player you want to set the team of.</param>
            <param name="teamid">The team to put the player in. Use <see cref="F:SampSharp.GameMode.Definitions.Misc.NoTeam"/> to remove the player from any team.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerTeam(System.Int32)">
            <summary>
                Get the ID of the team the player is on.
            </summary>
            <param name="playerid">The ID of the player to return the team of.</param>
            <returns>
                The ID of the team the player is on, or 255 (defined as <see cref="F:SampSharp.GameMode.Definitions.Misc.NoTeam"/>) if they aren't on a team
                (default).
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerScore(System.Int32,System.Int32)">
            <summary>
                Set a player's score. Players' scores are shown in the scoreboard (hold TAB).
            </summary>
            <param name="playerid">The ID of the player to set the score of.</param>
            <param name="score">The value to set the player's score to.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerScore(System.Int32)">
            <summary>
                This function returns a player's score as it was set using <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerScore(System.Int32,System.Int32)"/>
            </summary>
            <param name="playerid">The player to get the score of.</param>
            <returns>The player's score.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerDrunkLevel(System.Int32)">
            <summary>
                Checks the player's level of drunkenness.
            </summary>
            <remarks>
                If the level is less than 2000, the player is sober. The player's level of drunkness goes down slowly automatically
                (26 levels per second) but will always reach zero at the end. The higher drunkenness levels affect the player's
                camera, and the car driving handling. The level of drunkenness increases when the player drinks from a bottle (You
                can use <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerSpecialAction(System.Int32,SampSharp.GameMode.Definitions.SpecialAction)"/> to give them bottles).
            </remarks>
            <param name="playerid">The player you want to check the drunkenness level of.</param>
            <returns>An integer with the level of drunkenness of the player.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerDrunkLevel(System.Int32,System.Int32)">
            <summary>
                Sets the drunk level of a player which makes the player's camera sway and vehicles hard to control.
            </summary>
            <remarks>
                Players' drunk level will automatically decrease over time, based on their FPS (players with 50 FPS will lose 50
                'levels' per second. This is useful for determining a player's FPS!).
                In the drunk level will decrement and stop at zero.
                Levels over 2000 make the player drunk (camera swaying and vehicles difficult to control).
                Max drunk level is 50000.
                While the drunk level is above 5000, the player's HUD (radar etc.) will be hidden.
            </remarks>
            <param name="playerid">The ID of the player to set the drunkenness of.</param>
            <param name="level">The level of drunkenness to set.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerColor(System.Int32,System.Int32)">
            <summary>
                This function allows you to change the color of a player currently in-game.
            </summary>
            <param name="playerid">The player to change the color of.</param>
            <param name="color">The color to set, as an integer</param>
            <returns>his function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerColor(System.Int32)">
            <summary>
                This function returns the color the player is currently using.
            </summary>
            <remarks>
                GetPlayerColor will return nothing unless SetPlayerColor has been used!
            </remarks>
            <param name="playerid">The player you want to know the color of.</param>
            <returns>The players color.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerSkin(System.Int32,System.Int32)">
            <summary>
                Set the skin of a player.
            </summary>
            <remarks>
                If a player's skin is set when they are crouching, in a vehicle, or performing certain animations, they will become
                frozen or otherwise glitched. This can be fixed by using <see cref="M:SampSharp.GameMode.Natives.Native.TogglePlayerControllable(System.Int32,System.Boolean)"/>. Players can be
                detected as being crouched through <see cref="M:SampSharp.GameMode.Natives.Native.GetPlayerSpecialAction(System.Int32)"/>.
            </remarks>
            <param name="playerid">The ID of the player to set the skin of.</param>
            <param name="skinid">The skin the player should use.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerSkin(System.Int32)">
            <summary>
                Returns the class of the players skin.
            </summary>
            <param name="playerid">The player you want to get the skin from.</param>
            <returns>The skin id (0 if invalid).</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GivePlayerWeapon(System.Int32,System.Int32,System.Int32)">
            <summary>
                Give a player a weapon with a specified amount of ammo.
            </summary>
            <param name="playerid">The ID of the player to give a weapon to.</param>
            <param name="weaponid">The ID of the weapon to give to the player.</param>
            <param name="ammo">The amount of ammo to give to the player.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ResetPlayerWeapons(System.Int32)">
            <summary>
                Removes all weapons from a player.
            </summary>
            <param name="playerid">The ID of the player to remove the weapons of.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerArmedWeapon(System.Int32,System.Int32)">
            <summary>
                Sets the armed weapon of the player.
            </summary>
            <param name="playerid">The ID of the player to arm with a weapon.</param>
            <param name="weaponid">The ID of the weapon that the player should be armed with.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerWeaponData(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
                Get the weapon and ammo in a specific player's weapon slot.
            </summary>
            <param name="playerid">The ID of the player whose weapon data to retrieve.</param>
            <param name="slot">The weapon slot to get data for (0-12).</param>
            <param name="weapon">The variable in which to store the weapon ID, passed by reference.</param>
            <param name="ammo">The variable in which to store the ammo, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GivePlayerMoney(System.Int32,System.Int32)">
            <summary>
                Give (or take) money to/from a player.
            </summary>
            <param name="playerid">The ID of the player to give money to.</param>
            <param name="money">The amount of money to give the player. Use a minus value to take money.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ResetPlayerMoney(System.Int32)">
            <summary>
                Reset a player's money to $0.
            </summary>
            <param name="playerid">The ID of the player to reset the money of.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerName(System.Int32,System.String)">
            <summary>
                Sets the name of a player.
            </summary>
            <remarks>
                If you set the player's name to the same name except different cased letters (i.e. "heLLO" to "hello"), it will not
                work. If used in <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerConnect(System.Int32)"/>, the new name will not be shown for the connecting player.
            </remarks>
            <param name="playerid">The ID of the player to set the name of.</param>
            <param name="name">The name to set.</param>
            <returns>
                1 if the name was changed, 0 if the player is already using that name or -1 when the name cannot be changed.
                (it's in use, too long or has invalid characters)
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerMoney(System.Int32)">
            <summary>
                Retrieves the amount of money a player has.
            </summary>
            <param name="playerid">The ID of the player to get the money of.</param>
            <returns>The amount of money the player has.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerState(System.Int32)">
            <summary>
                Get a player's current state.
            </summary>
            <param name="playerid">The ID of the player to get the current state of.</param>
            <returns>The player's current state as an integer.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerIp(System.Int32,System.String@,System.Int32)">
            <summary>
                Get the specified player's IP and store it in a string.
            </summary>
            <remarks>
                This function does not work when used in <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerDisconnect(System.Int32,System.Int32)"/> because the player is already
                disconnected. It will return an invalid IP (255.255.255.255). Save players' IPs under
                <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerConnect(System.Int32)"/> if they need to be used under <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerConnect(System.Int32)"/>.
            </remarks>
            <param name="playerid">The ID of the player to get the IP of.</param>
            <param name="ip">The string to store the player's IP in, passed by reference</param>
            <param name="size">The maximum size of the IP. (Recommended 16)</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerPing(System.Int32)">
            <summary>
                Get the ping of a player.
            </summary>
            <param name="playerid">The ID of the player to get the ping of.</param>
            <returns>The current ping of the player (expressed in milliseconds).</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerWeapon(System.Int32)">
            <summary>
                Returns the ID of the player's current weapon.
            </summary>
            <param name="playerid">The ID of the player to get the weapon of.</param>
            <returns>The ID of the player's current weapon.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerKeys(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                Check which keys a player is pressing.
            </summary>
            <remarks>
                Only the FUNCTION of keys can be detected; not actual keys. You can not detect if a player presses space, but you
                can detect if they press sprint (which can be mapped (assigned) to ANY key, but is space by default)).
            </remarks>
            <param name="playerid">The ID of the player to detect the keys of.</param>
            <param name="keys">A set of bits containing the player's key states</param>
            <param name="updown">Up or Down value, passed by reference.</param>
            <param name="leftright">Left or Right value, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerName(System.Int32,System.String@,System.Int32)">
            <summary>
                Get a player's name.
            </summary>
            <remarks>
                A player's name can be up to 24 characters long.
                This is defined as <see cref="F:SampSharp.GameMode.Definitions.Limits.MaxPlayerName"/>.
                Strings to store names in should be made this size, plus one extra cell for the null terminating character.
            </remarks>
            <param name="playerid">The ID of the player to get the name of.</param>
            <param name="name">The string to store the name in, passed by reference.</param>
            <param name="size">The length of the string that should be stored.</param>
            <returns>The length of the player's name.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerTime(System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the clock of the player to a specific value. This also changes the daytime. (night/day etc.)
            </summary>
            <param name="playerid">The ID of the player.</param>
            <param name="hour">Hour to set (0-23).</param>
            <param name="minute">Minutes to set (0-59).</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerTime(System.Int32,System.Int32@,System.Int32@)">
            <summary>
                Get the player's current game time. Set by <see cref="M:SampSharp.GameMode.Natives.Native.SetWorldTime(System.Int32)"/>, <see cref="M:SampSharp.GameMode.Natives.Native.SetWorldTime(System.Int32)"/>, or by
                <see cref="M:SampSharp.GameMode.Natives.Native.TogglePlayerClock(System.Int32,System.Boolean)"/>.
            </summary>
            <param name="playerid">The ID of the player that you want to get the time of.</param>
            <param name="hour">The variable to store the hour in, passed by reference.</param>
            <param name="minute">The variable to store the minutes in, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TogglePlayerClock(System.Int32,System.Boolean)">
            <summary>
                Show/Hide the in-game clock (top right corner) for a specific player.
            </summary>
            <remarks>
                Time is not synced with other players!
            </remarks>
            <param name="playerid">The player whose clock you want to enable/disable.</param>
            <param name="toggle">True to show, False to hide.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerWeather(System.Int32,System.Int32)">
            <summary>
                Set a player's weather. If <see cref="M:SampSharp.GameMode.Natives.Native.TogglePlayerClock(System.Int32,System.Boolean)"/> has been used to enable a player's clock, weather
                changes will interpolate (gradually change), otherwise will change instantly.
            </summary>
            <param name="playerid">The ID of the player whose weather to set.</param>
            <param name="weather">The weather to set.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ForceClassSelection(System.Int32)">
            <summary>
                Forces a player to go back to class selection.
            </summary>
            <remarks>
                The player will not return to class selection until they re-spawn. This can be achieved with
                <see cref="M:SampSharp.GameMode.Natives.Native.TogglePlayerSpectating(System.Int32,System.Boolean)"/>
            </remarks>
            <param name="playerid">The player to send back to class selection.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerWantedLevel(System.Int32,System.Int32)">
            <summary>
                Set a player's wanted level (6 brown stars under HUD).
            </summary>
            <param name="playerid">The ID of the player to set the wanted level of.</param>
            <param name="level">The wanted level to set for the player (0-6).</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerWantedLevel(System.Int32)">
            <summary>
                Gets the wanted level of a player.
            </summary>
            <param name="playerid">The ID of the player that you want to get the wanted level of.</param>
            <returns>The player's wanted level.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerFightingStyle(System.Int32,System.Int32)">
            <summary>
                Set a player's special fighting style. To use in-game, aim and press the 'secondary attack' key (ENTER by default).
            </summary>
            <remarks>
                This does not affect normal fist attacks - only special/secondary attacks (aim + press 'secondary attack' key).
            </remarks>
            <param name="playerid">The ID of player to set the fighting style of.</param>
            <param name="style">The fighting style that should be set.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerFightingStyle(System.Int32)">
            <summary>
                Returns what fighting style the player currently using.
            </summary>
            <param name="playerid">The player you want to know the fighting style of.</param>
            <returns>Returns the fighting style of the player.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerVelocity(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Makes the player move in that direction at the given speed.
            </summary>
            <param name="playerid">The player to apply the speed to.</param>
            <param name="x">How much speed in the X direction will be applied.</param>
            <param name="y">How much speed in the Y direction will be applied.</param>
            <param name="z">How much speed in the Z direction will be applied.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerVelocity(System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Gets the velocity at which the player is moving in the three directions, X, Y and Z. This can be useful for
                speedometers.
            </summary>
            <param name="playerid">The player to get the speed from.</param>
            <param name="x">The float to store the X velocity in, passed by reference.</param>
            <param name="y">The float to store the Y velocity in, passed by reference.</param>
            <param name="z">The float to store the Z velocity in, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayCrimeReportForPlayer(System.Int32,System.Int32,System.Int32)">
            <summary>
                This function plays a crime report for a player - just like in single-player when CJ commits a crime.
            </summary>
            <param name="playerid">The ID of the player that will hear the crime report.</param>
            <param name="suspectid">The ID of the suspect player which will be described in the crime report.</param>
            <param name="crime">The crime ID, which will be reported as a 10-code (i.e. 10-16 if 16 was passed as the crimeid).</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayAudioStreamForPlayer(System.Int32,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Play an 'audio stream' for a player. Normal audio files also work (e.g. MP3).
            </summary>
            <param name="playerid">The ID of the player to play the audio for.</param>
            <param name="url">
                The url to play. Valid formats are mp3 and ogg/vorbis. A link to a .pls (playlist) file will play
                that playlist.
            </param>
            <param name="posX">The X position at which to play the audio. Default 0.0. Has no effect unless usepos is set to True.</param>
            <param name="posY">The Y position at which to play the audio. Default 0.0. Has no effect unless usepos is set to True.</param>
            <param name="posZ">The Z position at which to play the audio. Default 0.0. Has no effect unless usepos is set to True.</param>
            <param name="distance">The distance over which the audio will be heard. Has no effect unless usepos is set to True.</param>
            <param name="usepos">Use the positions and distance specified. Default False.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.StopAudioStreamForPlayer(System.Int32)">
            <summary>
                Stops the current audio stream for a player.
            </summary>
            <param name="playerid">The player you want to stop the audio stream for.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerShopName(System.Int32,System.String)">
            <summary>
                Loads or unloads an interior script for a player. (for example the ammunation menu)
            </summary>
            <param name="playerid">The ID of the player to load the interior script for.</param>
            <param name="shopname"></param>
            <returns></returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerSkillLevel(System.Int32,System.Int32,System.Int32)">
            <summary>
                Set the skill level of a certain weapon type for a player.
            </summary>
            <remarks>
                The skill parameter is NOT the weapon ID, it is the skill type.
            </remarks>
            <param name="playerid">The ID of the player to set the weapon skill of.</param>
            <param name="skill">The weapon type you want to set the skill of.</param>
            <param name="level">
                The skill level to set for that weapon, ranging from 0 to 999. (A level out of range will max it
                out)
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerSurfingVehicleID(System.Int32)">
            <summary>
                Get the ID of the vehicle that the player is surfing.
            </summary>
            <param name="playerid">The ID of the player you want to know the surfing vehicle ID of.</param>
            <returns>
                The ID of the vehicle that the player is surfing, or <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidVehicleId"/> if they are not
                surfing or the vehicle has no driver.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerSurfingObjectID(System.Int32)">
            <summary>
                Returns the ID of the object the player is surfing on.
            </summary>
            <param name="playerid">The ID of the player surfing the object.</param>
            <returns>
                The ID of the moving object the player is surfing. If the player isn't surfing a moving object, it will return
                <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidObjectId"/>
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.RemoveBuildingForPlayer(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Removes a standard San Andreas model for a single player within a specified range.
            </summary>
            <param name="playerid">The ID of the player to remove the objects for.</param>
            <param name="modelid">The model to remove.</param>
            <param name="x">The X coordinate around which the objects will be removed.</param>
            <param name="y">The Y coordinate around which the objects will be removed.</param>
            <param name="z">The Z coordinate around which the objects will be removed.</param>
            <param name="radius">The radius. Objects within this radius from the coordinates above will be removed.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerAttachedObject(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Attach an object to a specific bone on a player.
            </summary>
            <param name="playerid">The ID of the player to attach the object to.</param>
            <param name="index">The index (slot) to assign the object to (0-9).</param>
            <param name="modelid">The model to attach.</param>
            <param name="bone">The bone to attach the object to.</param>
            <param name="offsetX">X axis offset for the object position.</param>
            <param name="offsetY">Y axis offset for the object position.</param>
            <param name="offsetZ">Z axis offset for the object position.</param>
            <param name="rotX">X axis rotation of the object.</param>
            <param name="rotY">Y axis rotation of the object.</param>
            <param name="rotZ">Z axis rotation of the object.</param>
            <param name="scaleX">X axis scale of the object.</param>
            <param name="scaleY">Y axis scale of the object.</param>
            <param name="scaleZ">Z axis scale of the object.</param>
            <param name="materialcolor1">The first object color to set, as an integer or hex in ARGB color format.</param>
            <param name="materialcolor2">The second object color to set, as an integer or hex in ARGB color format.</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.RemovePlayerAttachedObject(System.Int32,System.Int32)">
            <summary>
                Remove an attached object from a player.
            </summary>
            <param name="playerid">The ID of the player to remove the object from.</param>
            <param name="index">
                The index of the object to remove (set with
                <see cref="!:SetPlayerAttachedObject(int,int,int,int,Vector,Vector,Vector,int,int)"/>).
            </param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerAttachedObjectSlotUsed(System.Int32,System.Int32)">
            <summary>
                Check if a player has an object attached in the specified index (slot).
            </summary>
            <param name="playerid">The ID of the player to check.</param>
            <param name="index">The index (slot) to check.</param>
            <returns>True if the slot is used, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.EditAttachedObject(System.Int32,System.Int32)">
            <summary>
                Enter edition mode for an attached object.
            </summary>
            <param name="playerid">The ID of the player to enter in to edition mode.</param>
            <param name="index">The index (slot) of the attached object to edit.</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreatePlayerTextDraw(System.Int32,System.Single,System.Single,System.String)">
            <summary>
                Creates a textdraw for a single player. This can be used as a way around the global text-draw limit.
            </summary>
            <param name="playerid">The ID of the player to create the textdraw for.</param>
            <param name="x">X-Coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="text">The text in the textdraw.</param>
            <returns>The ID of the created textdraw.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawDestroy(System.Int32,System.Int32)">
            <summary>
                Destroy a player-textdraw.
            </summary>
            <param name="playerid">The ID of the player who's player-textdraw to destroy.</param>
            <param name="text">The ID of the textdraw to destroy.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawLetterSize(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Sets the width and height of the letters in a player-textdraw.
            </summary>
            <param name="playerid">The ID of the player whose player-textdraw to set the letter size of.</param>
            <param name="text">The ID of the player-textdraw to change the letter size of.</param>
            <param name="x">Width of a char.</param>
            <param name="y">Height of a char.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawTextSize(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Change the size of a player-textdraw (box if <see cref="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawUseBox(System.Int32,System.Int32,System.Boolean)"/> is enabled and/or clickable area
                for use with <see cref="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetSelectable(System.Int32,System.Int32,System.Boolean)"/>).
            </summary>
            <remarks>
                When used with <see cref="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawAlignment(System.Int32,System.Int32,SampSharp.GameMode.Definitions.TextDrawAlignment)"/> of alignment 3 (right), the x and
                y are the coordinates of the left most corner of the box. For alignment 2 (center) the x and y values need to
                inverted (switch the two) and the x value is the overall width of the box. For all other alignments the x and y
                coordinates are for the right most corner of the box.
                The TextDraw box starts 10.0 units up and 5.0 to the left as the origin (<see cref="M:SampSharp.GameMode.Natives.Native.TextDrawCreate(System.Single,System.Single,System.String)"/> coordinate)
                This function defines the clickable area for use with <see cref="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetSelectable(System.Int32,System.Int32,System.Boolean)"/>, whether a box is
                shown or not.
            </remarks>
            <param name="playerid">The ID of the player whose player-textdraw to set the size of.</param>
            <param name="text">The ID of the player-textdraw to set the size of.</param>
            <param name="x">he size on the X axis (left/right) following the same 640x480 grid as <see cref="M:SampSharp.GameMode.Natives.Native.TextDrawCreate(System.Single,System.Single,System.String)"/>.</param>
            <param name="y">The size on the Y axis (up/down) following the same 640x480 grid as <see cref="M:SampSharp.GameMode.Natives.Native.TextDrawCreate(System.Single,System.Single,System.String)"/>.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawAlignment(System.Int32,System.Int32,System.Int32)">
            <summary>
                Set the text alignment of a player-textdraw.
            </summary>
            <param name="playerid">The ID of the player whose player-textdraw to set the alignment of.</param>
            <param name="text">The ID of the player-textdraw to set the alignment of.</param>
            <param name="alignment">Algihnment of the player-textdraw, 1-left, 2-centered, 3-right.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawColor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the text color of a player-textdraw.
            </summary>
            <remarks>
                You can also use Gametext colors in textdraws.
            </remarks>
            <param name="playerid">The ID of the player who's textdraw to set the color of.</param>
            <param name="text">The TextDraw to change.</param>
            <param name="color">The color in hexadecimal format.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawUseBox(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Toggle the box on a player-textdraw.
            </summary>
            <param name="playerid">The ID of the player whose textdraw to toggle the box of.</param>
            <param name="text">The ID of the player-textdraw to toggle the box of.</param>
            <param name="use">True to use a box or False to not use a box.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawBoxColor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Adjusts the text box colour (only used if <see cref="M:SampSharp.GameMode.Natives.Native.TextDrawUseBox(System.Int32,System.Boolean)"/> 'use' parameter is True).
            </summary>
            <remarks>
                <see cref="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawUseBox(System.Int32,System.Int32,System.Boolean)"/> must be used in conjunction with this (duh).
            </remarks>
            <param name="playerid">The ID of the player who's textdraw to set the color of.</param>
            <param name="text">The TextDraw to change the box color of.</param>
            <param name="color">The color in hexadecimal format.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetShadow(System.Int32,System.Int32,System.Int32)">
            <summary>
                Adds a shadow to the lower right side of the text in a player-textdraw. The shadow font matches the text font. The
                shadow can be cut by the box area if the size is set too big for the area.
            </summary>
            <remarks>
                <see cref="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawUseBox(System.Int32,System.Int32,System.Boolean)"/> must be used in conjunction with this (duh).
            </remarks>
            <param name="playerid">The ID of the player whose player-textdraw to set the shadow of.</param>
            <param name="text">The ID of the player-textdraw to change the shadow of.</param>
            <param name="size">The size of the shadow.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetOutline(System.Int32,System.Int32,System.Int32)">
            <summary>
                Set the outline of a player-textdraw. The outline colour cannot be changed unless
                <see cref="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawBackgroundColor(System.Int32,System.Int32,System.Int32)"/> is used.
            </summary>
            <param name="playerid">The ID of the player whose player-textdraw to set the outline of.</param>
            <param name="text">The ID of the player-textdraw to set the outline of.</param>
            <param name="size">The thickness of the outline.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawBackgroundColor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Adjust the background color of a player-textdraw.
            </summary>
            <remarks>
                If <see cref="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetOutline(System.Int32,System.Int32,System.Int32)"/> is used with size &gt; 0, the outline color will match the color used in
                <see cref="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawBackgroundColor(System.Int32,System.Int32,System.Int32)"/>.
                Changing the value of color seems to alter the color used in <see cref="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawColor(System.Int32,System.Int32,System.Int32)"/>.
            </remarks>
            <param name="playerid">The ID of the player whose player-textdraw to set the background color of.</param>
            <param name="text">The ID of the player-textdraw to set the background color of.</param>
            <param name="color">The color that the textdraw should be set to.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawFont(System.Int32,System.Int32,System.Int32)">
            <summary>
                Change the font of a player-textdraw.
            </summary>
            <param name="playerid">The ID of the player whose player-textdraw to change the font of.</param>
            <param name="text">The ID of the player-textdraw to change the font of</param>
            <param name="font">
                There are four font styles as shown below. A font value greater than 3 does not display, and
                anything greater than 16 crashes.
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetProportional(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Appears to scale text spacing to a proportional ratio. Useful when using PlayerTextDrawLetterSize to ensure the
                text has even character spacing.
            </summary>
            <param name="playerid">The ID of the player whose player-textdraw to set the proportionality of.</param>
            <param name="text">The ID of the player-textdraw to set the proportionality of.</param>
            <param name="set">True to enable proportionality, False to disable.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetSelectable(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Toggles whether a player-textdraw can be selected or not.
            </summary>
            <remarks>
                <see cref="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetSelectable(System.Int32,System.Int32,System.Boolean)"/> MUST be used BEFORE the textdraw is shown to the player.
            </remarks>
            <param name="playerid">The ID of the player whose player-textdraw to make selectable.</param>
            <param name="text">The ID of the player-textdraw to set the selectability of.</param>
            <param name="set">et the player-textdraw selectable (True) or non-selectable (False). By default this is False.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawShow(System.Int32,System.Int32)">
            <summary>
                Show a player-textdraw to the player it was created for.
            </summary>
            <param name="playerid">The ID of the player to show the textdraw for.</param>
            <param name="text">The ID of the textdraw to show.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawHide(System.Int32,System.Int32)">
            <summary>
                Hide a player-textdraw from the player it was created for.
            </summary>
            <param name="playerid">The ID of the player to hide the textdraw for.</param>
            <param name="text">The ID of the textdraw to hide.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetString(System.Int32,System.Int32,System.String)">
            <summary>
                Change the text of a player-textdraw.
            </summary>
            <remarks>
                Although the textdraw string limit is 1024 characters, if colour codes (e.g. ~r~) are used beyond the 255th
                character it may crash the client.
            </remarks>
            <param name="playerid">The ID of the player who's textdraw string to set.</param>
            <param name="text">The ID of the textdraw to change.</param>
            <param name="str">The new string for the TextDraw.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetPreviewModel(System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets a player textdraw 2D preview sprite of a specified model ID.
            </summary>
            <param name="playerid">The PlayerTextDraw player ID.</param>
            <param name="text">The textdraw id that will display the 3D preview.</param>
            <param name="modelindex">The model ID to display.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetPreviewRot(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the rotation and zoom of a 3D model preview player-textdraw.
            </summary>
            <param name="playerid">The ID of the player whose player-textdraw to change.</param>
            <param name="text">The ID of the player-textdraw to change.</param>
            <param name="rotX">The X rotation value.</param>
            <param name="rotY">The Y rotation value.</param>
            <param name="rotZ">The Z rotation value.</param>
            <param name="zoom">
                The zoom value, default value 1.0, smaller values make the camera closer and larger values make the
                camera further away.
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetPreviewVehCol(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Set the color of a vehicle in a player-textdraw model preview (if a vehicle is shown).
            </summary>
            <param name="playerid">The ID of the player whose player-textdraw to change.</param>
            <param name="text">The ID of the player's player-textdraw to change.</param>
            <param name="color1">The color to set the vehicle's primary color to.</param>
            <param name="color2">The color to set the vehicle's secondary color to.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPVarInt(System.Int32,System.String,System.Int32)">
            <summary>
                Sets an integer to a player variable.
            </summary>
            <remarks>
                Variables aren't reset until after <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerDisconnect(System.Int32,System.Int32)"/> is called, so the values are still
                accessible in <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerDisconnect(System.Int32,System.Int32)"/>.
            </remarks>
            <param name="playerid">The ID of the player whose player variable will be set.</param>
            <param name="varname">The name of the player variable.</param>
            <param name="value">The integer to be set.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPVarInt(System.Int32,System.String)">
            <summary>
                Gets a player variable as an integer.
            </summary>
            <param name="playerid">The ID of the player whose player variable to get.</param>
            <param name="varname">The name of the player variable. (case-insensitive)</param>
            <returns>The integer value from the specified player variable.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPVarString(System.Int32,System.String,System.String)">
            <summary>
                Saves a string into a player variable.
            </summary>
            <param name="playerid">The ID of the player whose player variable will be set.</param>
            <param name="varname">The name of the player variable.</param>
            <param name="value">The string you want to save in the player variable.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPVarString(System.Int32,System.String,System.String@,System.Int32)">
            <summary>
                Gets a player variable as a string.
            </summary>
            <param name="playerid">The ID of the player whose player variable to get.</param>
            <param name="varname">The name of the player variable, set by <see cref="M:SampSharp.GameMode.Natives.Native.SetPVarString(System.Int32,System.String,System.String)"/>.</param>
            <param name="value">The array in which to store the string value in, passed by reference.</param>
            <param name="size">The maximum length of the returned string.</param>
            <returns>The length of the string.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPVarFloat(System.Int32,System.String,System.Single)">
            <summary>
                Saves a float variable into a player variable.
            </summary>
            <param name="playerid">The ID of the player whose player variable will be set.</param>
            <param name="varname">The name of the player variable.</param>
            <param name="value">The float you want to save in the player variable.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPVarFloat(System.Int32,System.String)">
            <summary>
                Gets a player variable as a float.
            </summary>
            <param name="playerid">The ID of the player whose player variable you want to get.</param>
            <param name="varname">The name of the player variable.</param>
            <returns>The float from the specified player variable.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DeletePVar(System.Int32,System.String)">
            <summary>
                Deletes a previously set player variable.
            </summary>
            <param name="playerid">The ID of the player whose player variable to delete.</param>
            <param name="varname">The name of the player variable to delete.</param>
            <returns>True on success, False on failure (pVar not set or player not connected).</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPVarsUpperIndex(System.Int32)">
            <summary>
                Each PVar (player-variable) has its own unique identification number for lookup, this function returns the highest
                ID set for a player.
            </summary>
            <param name="playerid">The ID of the player to get the upper PVar index of..</param>
            <returns>The highest set PVar ID.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPVarNameAtIndex(System.Int32,System.Int32,System.String@,System.Int32)">
            <summary>
                Retrieve the name of a player's variable via the index.
            </summary>
            <param name="playerid">The ID of the player whose player variable to get the name of.</param>
            <param name="index">The index of the player's pVar.</param>
            <param name="varname">A string to store the pVar's name in, passed by reference.</param>
            <param name="size">The max length of the returned string</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPVarType(System.Int32,System.String)">
            <summary>
                Gets the type (integer, float or string) of a player variable.
            </summary>
            <param name="playerid">The ID of the player whose player variable to get the type of.</param>
            <param name="varname">The name of the player variable to get the type of.</param>
            <returns>Returns the type of the PVar.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerChatBubble(System.Int32,System.String,System.Int32,System.Single,System.Int32)">
            <summary>
                Creates a chat bubble above a player's name tag.
            </summary>
            <param name="playerid">The player which should have the chat bubble.</param>
            <param name="text">The text to display.</param>
            <param name="color">The text color.</param>
            <param name="drawdistance">The distance from where players are able to see the chat bubble.</param>
            <param name="expiretime">The time in miliseconds the bubble should be displayed for.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PutPlayerInVehicle(System.Int32,System.Int32,System.Int32)">
            <summary>
                Puts a player in a vehicle
            </summary>
            <param name="playerid">The ID of the player to put in a vehicle.</param>
            <param name="vehicleid">The ID of the vehicle for the player to be put in.</param>
            <param name="seatid">The ID of the seat to put the player in.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerVehicleID(System.Int32)">
            <summary>
                This function gets the ID of the vehicle the player is currently in. Note: NOT the model id of the vehicle. See
                <see cref="M:SampSharp.GameMode.Natives.Native.GetVehicleModel(System.Int32)"/> for that.
            </summary>
            <param name="playerid">The ID of the player in the vehicle that you want to get the ID of.</param>
            <returns>ID of the vehicle or 0 if not in a vehicle.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SampSharp.GameMode.Natives.Native.GetPlayerVehicleSeat(System.Int32)" -->
        <member name="M:SampSharp.GameMode.Natives.Native.RemovePlayerFromVehicle(System.Int32)">
            <summary>
                Removes/ejects a player from their vehicle.
            </summary>
            <remarks>
                The exiting animation is not synced for other players.
                This function will not work when used in <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterVehicle(System.Int32,System.Int32,System.Boolean)"/>, because the player isn't in
                the vehicle when the callback is called. Use <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerStateChange(System.Int32,System.Int32,System.Int32)"/> instead.
            </remarks>
            <param name="playerid">The ID of the player to remove from their vehicle.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TogglePlayerControllable(System.Int32,System.Boolean)">
            <summary>
                Toggles whether a player can control themselves, basically freezes them.
            </summary>
            <param name="playerid">The ID of the player to toggle the controllability of.</param>
            <param name="toggle">False to freeze the player or True to unfreeze them.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerPlaySound(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Plays the specified sound for a player.
            </summary>
            <remarks>
                Only use the coordinates if you want the sound to be played at a certain position. Set coordinates all to 0 to just
                play the sound.
            </remarks>
            <param name="playerid">The ID of the player for whom to play the sound.</param>
            <param name="soundid">The sound to play.</param>
            <param name="x">X coordinate for the sound to play at. (0 for no position)</param>
            <param name="y">Y coordinate for the sound to play at. (0 for no position)</param>
            <param name="z">Z coordinate for the sound to play at. (0 for no position)</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ApplyAnimation(System.Int32,System.String,System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Apply an animation to a player.
            </summary>
            <remarks>
                The <paramref name="forcesync" /> parameter, which defaults to False, in most cases is not needed since players
                sync animations themselves. The <paramref name="forcesync" /> parameter can force all players who can see
                <paramref name="playerid" /> to play the animation regardless of whether the player is performing that animation.
                This is useful in circumstances where the player can't sync the animation themselves. For example, they may be
                paused.
            </remarks>
            <param name="playerid">The ID of the player to apply the animation to.</param>
            <param name="animlib">The name of the animation library in which the animation to apply is in.</param>
            <param name="animname">The name of the animation, within the library specified.</param>
            <param name="fDelta">The speed to play the animation (use 4.1).</param>
            <param name="loop">Set to True for looping otherwise set to False for playing animation sequence only once.</param>
            <param name="lockx">
                Set to False to return player to original x position after animation is complete for moving
                animations. The opposite effect occurs if set to True.
            </param>
            <param name="locky">
                Set to False to return player to original y position after animation is complete for moving
                animations. The opposite effect occurs if set to True.
            </param>
            <param name="freeze">Will freeze the player in position after the animation finishes.</param>
            <param name="time">Timer in milliseconds. For a never ending loop it should be 0.</param>
            <param name="forcesync">Set to True to force playerid to sync animation with other players in all instances</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ClearAnimations(System.Int32,System.Boolean)">
            <summary>
                Clears all animations for the given player.
            </summary>
            <param name="playerid">The ID of the player to clear the animations of.</param>
            <param name="forcesync">Specifies whether the animation should be shown to streamed in players.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerAnimationIndex(System.Int32)">
            <summary>
                Returns the index of any running applied animations.
            </summary>
            <param name="playerid">ID of the player of whom you want to get the animation index of.</param>
            <returns>0 if there is no animation applied, otherwise the index of the playing animation.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetAnimationName(System.Int32,System.String@,System.Int32,System.String@,System.Int32)">
            <summary>
                Get the animation library/name for the index.
            </summary>
            <param name="index">The animation index, returned by <see cref="M:SampSharp.GameMode.Natives.Native.GetPlayerAnimationIndex(System.Int32)"/>.</param>
            <param name="animlib">String variable that stores the animation library.</param>
            <param name="animlibSize">Size of the string that stores the animation library.</param>
            <param name="animname">String variable that stores the animation name.</param>
            <param name="animnameSize">Size of the string that stores the animation name.</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerSpecialAction(System.Int32)">
            <summary>
                Retrieves a player's current special action.
            </summary>
            <param name="playerid">The ID of the player to get the special action of.</param>
            <returns>The special action of the player.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerSpecialAction(System.Int32,System.Int32)">
            <summary>
                This Function allows to set players special action.
            </summary>
            <param name="playerid">The player that should perform the action.</param>
            <param name="actionid">The action that should be performed.</param>
            ob
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerCheckpoint(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets a checkpoint (red circle) for a player. Also shows a red blip on the radar.
            </summary>
            <remarks>
                Checkpoints created on server-created objects (<see cref="M:SampSharp.GameMode.Natives.Native.CreateObject(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/>/<see cref="M:SampSharp.GameMode.Natives.Native.CreatePlayerObject(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/>) will
                appear down on the 'real' ground, but will still function correctly. There is no fix available for this issue. A
                pickup can be used instead.
            </remarks>
            <param name="playerid">The ID of the player to set the checkpoint of.</param>
            <param name="x">The X coordinate to set the checkpoint at.</param>
            <param name="y">The Y coordinate to set the checkpoint at.</param>
            <param name="z">The Z coordinate to set the checkpoint at.</param>
            <param name="size">The size of the checkpoint.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DisablePlayerCheckpoint(System.Int32)">
            <summary>
                Disable any initialized checkpoints for a specific player, since you can only have one at any given time.
            </summary>
            <param name="playerid">The player to disable the current checkpoint for.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerRaceCheckpoint(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates a race checkpoint. When the player enters it, the OnPlayerEnterRaceCheckpoint callback is called.
            </summary>
            <param name="playerid">The ID of the player to set the checkpoint for.</param>
            <param name="type">
                Type of checkpoint.0-Normal, 1-Finish, 2-Nothing(Only the checkpoint without anything on it), 3-Air
                normal, 4-Air finish.
            </param>
            <param name="x">X-Coordinate.</param>
            <param name="y">X-Coordinate.</param>
            <param name="z">X-Coordinate.</param>
            <param name="nextx">X-Coordinate of the next point, for the arrow facing direction.</param>
            <param name="nexty">X-Coordinate of the next point, for the arrow facing direction.</param>
            <param name="nextz">X-Coordinate of the next point, for the arrow facing direction.</param>
            <param name="size">Size (diameter) of the checkpoint</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DisablePlayerRaceCheckpoint(System.Int32)">
            <summary>
                Disable any initialized race checkpoints for a specific player, since you can only have one at any given time.
            </summary>
            <param name="playerid">The player to disable the current checkpoint for.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerWorldBounds(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Set the world boundaries for a player - players can not go out of the boundaries.
            </summary>
            <remarks>
                You can reset the player world bounds by setting the parameters to 20000.0000, -20000.0000, 20000.0000,
                -20000.0000.
            </remarks>
            <param name="playerid">The ID of the player to set the boundaries of.</param>
            <param name="xMax">The maximum X coordinate the player can go to.</param>
            <param name="xMin">The minimum X coordinate the player can go to.</param>
            <param name="yMax">The maximum Y coordinate the player can go to.</param>
            <param name="yMin">The minimum Y coordinate the player can go to.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerMarkerForPlayer(System.Int32,System.Int32,System.Int32)">
            <summary>
                Change the colour of a player's nametag and radar blip for another player.
            </summary>
            <param name="playerid">The player that will see the player's changed blip/nametag color.</param>
            <param name="showplayerid">The player whose color will be changed.</param>
            <param name="color">New color. Set to 0 for an invisible blip.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ShowPlayerNameTagForPlayer(System.Int32,System.Int32,System.Boolean)">
            <summary>
                This functions allows you to toggle the drawing of player nametags, healthbars and armor bars which display above
                their head. For use of a similar function like this on a global level, <see cref="M:SampSharp.GameMode.Natives.Native.ShowNameTags(System.Boolean)"/> function.
            </summary>
            <remarks>
                <see cref="M:SampSharp.GameMode.Natives.Native.ShowNameTags(System.Boolean)"/> must be set to True to be able to show name tags with
                <see cref="M:SampSharp.GameMode.Natives.Native.ShowPlayerNameTagForPlayer(System.Int32,System.Int32,System.Boolean)"/>.
            </remarks>
            <param name="playerid">Player who will see the results of this function.</param>
            <param name="showplayerid">Player whose name tag will be shown or hidden.</param>
            <param name="show">True to show name tag, False to hide name tag.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerMapIcon(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
                This function allows you to place your own icons on the map, enabling you to emphasise the locations of banks,
                airports or whatever else you want. A total of 63 icons are available in GTA: San Andreas, all of which can be used
                using this function. You can also specify the color of the icon, which allows you to change the square icon (ID:
                0).
            </summary>
            <param name="playerid">The ID of the player to set the map icon for.</param>
            <param name="iconid">The player's icon ID, ranging from 0 to 99, to be used in RemovePlayerMapIcon.</param>
            <param name="x">The X coordinate of the place where you want the icon to be.</param>
            <param name="y">The Y coordinate of the place where you want the icon to be.</param>
            <param name="z">The Z coordinate of the place where you want the icon to be.</param>
            <param name="markertype">The icon to set.</param>
            <param name="color">The color of the icon, this should only be used with the square icon (ID: 0).</param>
            <param name="style">The style of icon.</param>
            <returns>True if it was successful, False otherwise (e.g. the player isn't connected).</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.RemovePlayerMapIcon(System.Int32,System.Int32)">
            <summary>
                Removes a map icon that was set earlier for a player.
            </summary>
            <param name="playerid">The ID of the player whose icon to remove.</param>
            <param name="iconid">
                The ID of the icon to remove. This is the second parameter of
                <see cref="!:SetPlayerMapIcon(int,int,Vector,PlayerMarkersMode)"/>.
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AllowPlayerTeleport(System.Int32,System.Boolean)">
            <summary>
                Enable/Disable the teleporting ability for a player by right-clicking on the map.
            </summary>
            <remarks>
                This function will work only if <see cref="M:SampSharp.GameMode.Natives.Native.AllowAdminTeleport(System.Boolean)"/> is working, and you have to be an admin.
            </remarks>
            <param name="playerid">playerid</param>
            <param name="allow">True-allow, False-disallow</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerCameraPos(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Sets the camera to a specific position for a player.
            </summary>
            <param name="playerid">ID of the player.</param>
            <param name="x">New x-position of the camera.</param>
            <param name="y">New y-position of the camera.</param>
            <param name="z">New z-position of the camera.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerCameraLookAt(System.Int32,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Set the direction a player's camera looks at. To be used in combination with SetPlayerCameraPos.
            </summary>
            <param name="playerid">The player to change the camera of.</param>
            <param name="x">The X coordinate for the player's camera to look at.</param>
            <param name="y">The Y coordinate for the player's camera to look at.</param>
            <param name="z">The Z coordinate for the player's camera to look at.</param>
            <param name="cut">The style the camera-position changes.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetCameraBehindPlayer(System.Int32)">
            <summary>
                Restore the camera to a place behind the player, after using a function like SetPlayerCameraPos.
            </summary>
            <param name="playerid">The player you want to restore the camera for.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerCameraPos(System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Get the position of the player's camera.
            </summary>
            <remarks>
                Player's camera positions are only updated once a second, unless aiming.
            </remarks>
            <param name="playerid">The ID of the player to get the camera position of.</param>
            <param name="x">A float variable to store the X coordinate in, passed by reference.</param>
            <param name="y">A float variable to store the Y coordinate in, passed by reference.</param>
            <param name="z">A float variable to store the Z coordinate in, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerCameraFrontVector(System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                This function will return the current direction of player's aiming in 3-D space, the coords are relative to the
                camera position, see <see cref="M:SampSharp.GameMode.Natives.Native.GetPlayerCameraPos(System.Int32)"/>.
            </summary>
            <param name="playerid">The ID of the player you want to obtain the camera front vector of.</param>
            <param name="x">A float to store the X coordinate, passed by reference.</param>
            <param name="y">A float to store the Y coordinate, passed by reference.</param>
            <param name="z">A float to store the Z coordinate, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerCameraMode(System.Int32)">
            <summary>
                Returns the current GTA camera mode for the requested player. The camera modes are useful in determining whether a
                player is aiming, doing a passenger driveby etc
            </summary>
            <param name="playerid">The ID of the player whose camera mode to retrieve</param>
            <returns>The camera mode as an integer (or -1 if player is not connected)</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachCameraToObject(System.Int32,System.Int32)">
            <summary>
                You can use this function to attach the player camera to objects.
            </summary>
            <remarks>
                You need to create the object first, before attempting to attach a player camera for that.
            </remarks>
            <param name="playerid">The ID of the player which will have your camera attached on object.</param>
            <param name="objectid">The object id which you want to attach the player camera.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachCameraToPlayerObject(System.Int32,System.Int32)">
            <summary>
                Attaches a player's camera to a player-object. They are able to move their camera while it is attached to an
                object. Can be used with <see cref="M:SampSharp.GameMode.Natives.Native.MovePlayerObject(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> and <see cref="M:SampSharp.GameMode.Natives.Native.AttachPlayerObjectToVehicle(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="playerid">The ID of the player which will have their camera attached to a player-object.</param>
            <param name="playerobjectid">	The ID of the player-object to which the player's camera will be attached.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.InterpolateCameraPos(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Move a player's camera from one position to another, within the set time.
            </summary>
            <param name="playerid">The ID of the player the camera should be moved for.</param>
            <param name="fromX">The X position the camera should start to move from.</param>
            <param name="fromY">The Y position the camera should start to move from.</param>
            <param name="fromZ">The Z position the camera should start to move from.</param>
            <param name="toX">The X position the camera should move to.</param>
            <param name="toY">The Y position the camera should move to.</param>
            <param name="toZ">The Z position the camera should move to.</param>
            <param name="time">Time in milliseconds.</param>
            <param name="cut">The jumpcut to use. Defaults to CameraCut.Cut. Set to CameraCut.Move for a smooth movement.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.InterpolateCameraLookAt(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Interpolate a player's camera's 'look at' point between two coordinates with a set speed. Can be be used with
                <see cref="M:SampSharp.GameMode.Natives.Native.InterpolateCameraPos(System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Int32,SampSharp.GameMode.Definitions.CameraCut)"/>.
            </summary>
            <param name="playerid">The ID of the player the camera should be moved for.</param>
            <param name="fromX">The X position the camera should start to move from.</param>
            <param name="fromY">The Y position the camera should start to move from.</param>
            <param name="fromZ">The Z position the camera should start to move from.</param>
            <param name="toX">The X position the camera should move to.</param>
            <param name="toY">The Y position the camera should move to.</param>
            <param name="toZ">The Z position the camera should move to.</param>
            <param name="time">Time in milliseconds to complete interpolation.</param>
            <param name="cut">The 'jumpcut' to use. Defaults to CameraCut.Cut (pointless). Set to CameraCut.Move for interpolation.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerConnected(System.Int32)">
            <summary>
                This function can be used to check if a player is connected to the server via SA:MP.
            </summary>
            <remarks>
                This function can be omitted in a lot of cases. Many other natives already have some sort of connection check
                built in.
            </remarks>
            <param name="playerid">The playerid you would like to check.</param>
            <returns>Returns true if the player is connected and false if the player is not.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerInVehicle(System.Int32,System.Int32)">
            <summary>
                Checks if a player is in a specific vehicle.
            </summary>
            <param name="playerid">ID of the player.</param>
            <param name="vehicleid">ID of the vehicle.</param>
            <returns>True if player is in the vehicle, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerInAnyVehicle(System.Int32)">
            <summary>
                Check if a player is inside any vehicle.
            </summary>
            <param name="playerid">The ID of the player to check.</param>
            <returns>True if player is in a vehicle, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerInCheckpoint(System.Int32)">
            <summary>
                Check if the player is currently inside a checkpoint, this could be used for properties or teleport points for
                example.
            </summary>
            <param name="playerid">The player you want to know the status of.</param>
            <returns>True if player is in his checkpoint, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerInRaceCheckpoint(System.Int32)">
            <summary>
                Check if the player is inside their current set race checkpoint (
                <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerRaceCheckpoint(System.Int32,SampSharp.GameMode.Definitions.CheckpointType,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Single)"/>).
            </summary>
            <param name="playerid">The ID of the player to check.</param>
            <returns>True if player is in his checkpoint, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerVirtualWorld(System.Int32,System.Int32)">
            <summary>
                Set the virtual world of a player. They can only see other players or vehicles if they are in that same world.
            </summary>
            <remarks>
                The default virtual world is 0.
            </remarks>
            <param name="playerid">The ID of the player you want to set the virtual world of.</param>
            <param name="worldid">The virtual world ID to put the player in.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerVirtualWorld(System.Int32)">
            <summary>
                Retrieves the current virtual world the player is in. Note this is not the same as the interior.
            </summary>
            <param name="playerid">The ID of the player to get the virtual world of.</param>
            <returns>The ID of the world the player is currently in.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.EnableStuntBonusForPlayer(System.Int32,System.Boolean)">
            <summary>
                Toggle stunt bonuses for a player.
            </summary>
            <param name="playerid">The ID of the player to toggle stunt bonuses for.</param>
            <param name="enable">True to enable stunt bonuses, False to disable them.</param>
            <returns>This function doesn't return a specific value</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.EnableStuntBonusForAll(System.Boolean)">
            <summary>
                Enables or disables stunt bonuses for all players.
            </summary>
            <param name="enable">True to enable stunt bonuses, False to disable.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.TogglePlayerSpectating(System.Int32,System.Boolean)">
            <summary>
                Toggle a player's spectate mode.
            </summary>
            <remarks>
                When the spectating is turned off, OnPlayerSpawn will automatically be called.
            </remarks>
            <param name="playerid">The ID of the player who should spectate.</param>
            <param name="toggle">True to enable spectating and False to disable.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerSpectatePlayer(System.Int32,System.Int32,System.Int32)">
            <summary>
                Makes a player spectate (watch) another player.
            </summary>
            <remarks>
                Order is CRITICAL! Ensure that you use <see cref="M:SampSharp.GameMode.Natives.Native.TogglePlayerSpectating(System.Int32,System.Boolean)"/> before
                <see cref="M:SampSharp.GameMode.Natives.Native.PlayerSpectatePlayer(System.Int32,System.Int32,System.Int32)"/>.
            </remarks>
            <param name="playerid">The ID of the player that will spectate.</param>
            <param name="targetplayerid">The ID of the player that should be spectated.</param>
            <param name="mode">The mode to spectate with.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerSpectateVehicle(System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets a player to spectate another vehicle, i.e. see what its driver sees.
            </summary>
            <remarks>
                Order is CRITICAL! Ensure that you use <see cref="M:SampSharp.GameMode.Natives.Native.TogglePlayerSpectating(System.Int32,System.Boolean)"/> before
                <see cref="M:SampSharp.GameMode.Natives.Native.PlayerSpectatePlayer(System.Int32,System.Int32,System.Int32)"/>.
            </remarks>
            <param name="playerid">Player ID.</param>
            <param name="targetvehicleid">ID of the vehicle to spectate.</param>
            <param name="mode">Spectate mode.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.StartRecordingPlayerData(System.Int32,System.Int32,System.String)">
            <summary>
                Starts recording the player's movements to a file, which can then be reproduced by an NPC.
            </summary>
            <param name="playerid">The ID of the player you want to record.</param>
            <param name="recordtype">The type of recording.</param>
            <param name="recordname">
                Name of the file which will hold the recorded data. It will be saved in scriptfiles, with an
                automatically added .rec extension.
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.StopRecordingPlayerData(System.Int32)">
            <summary>
                Stops all the recordings that had been started with <see cref="M:SampSharp.GameMode.Natives.Native.StartRecordingPlayerData(System.Int32,System.Int32,System.String)"/> for a specific player.
            </summary>
            <param name="playerid">The player you want to stop the recordings of.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreateExplosionForPlayer(System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
                Creates an explosion for a player.
                Only the specific player will see explosion and feel its effects.
                This is useful when you want to isolate explosions from other players or to make them only appear in specific
                virtual worlds.
            </summary>
            <param name="playerid">The ID of the player to create the explosion for.</param>
            <param name="x">The X coordinate of the explosion.</param>
            <param name="y">The Y coordinate of the explosion.</param>
            <param name="z">The Z coordinate of the explosion.</param>
            <param name="type">The explosion type.</param>
            <param name="radius">The radius of the explosion.</param>
            <returns>This function does not return any specific values.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetSpawnInfo(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                This function can be used to change the spawn information of a specific player. It allows you to automatically set
                someone's spawn weapons, their team, skin and spawn position, normally used in case of minigames or automatic-spawn
                systems. This function is more crash-safe then using <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerSkin(System.Int32,System.Int32)"/> in
                <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSpawn(System.Int32)"/> and/or <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerRequestClass(System.Int32,System.Int32)"/>.
            </summary>
            <param name="playerid">The PlayerID of who you want to set the spawn information.</param>
            <param name="team">The Team-ID of the chosen player.</param>
            <param name="skin">The skin which the player will spawn with.</param>
            <param name="x">The X-coordinate of the player's spawn position.</param>
            <param name="y">The Y-coordinate of the player's spawn position.</param>
            <param name="z">The Z-coordinate of the player's spawn position.</param>
            <param name="rotation">The direction in which the player needs to be facing after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the primary spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawnweapon.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetSpawnInfo(System.Int32,System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                This function can be used to change the spawn information of a specific player. It allows you to automatically set
                someone's spawn weapons, their team, skin and spawn position, normally used in case of minigames or automatic-spawn
                systems. This function is more crash-safe then using <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerSkin(System.Int32,System.Int32)"/> in
                <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSpawn(System.Int32)"/> and/or <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerRequestClass(System.Int32,System.Int32)"/>.
            </summary>
            <param name="playerid">The PlayerID of who you want to set the spawn information.</param>
            <param name="team">The Team-ID of the chosen player.</param>
            <param name="skin">The skin which the player will spawn with.</param>
            <param name="position">The player's spawn position.</param>
            <param name="rotation">The direction in which the player needs to be facing after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the primary spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawnweapon.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerPos(System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Set a player's position.
            </summary>
            <param name="playerid">The ID of the player to set the position of.</param>
            <param name="position">The position to move the player to.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerPosFindZ(System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                This sets the players position then adjusts the players z-coordinate to the nearest solid ground under the
                position.
            </summary>
            <param name="playerid">The ID of the player to set the position of.</param>
            <param name="position">The position to move the player to.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerPos(System.Int32)">
            <summary>
                Get the coordinates of a player.
            </summary>
            <param name="playerid">The ID of the player to get the position of.</param>
            <returns>The position of the player.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsPlayerInRangeOfPoint(System.Int32,System.Single,SampSharp.GameMode.World.Vector)">
            <summary>
                Check if a player is in range of a point.
            </summary>
            <param name="playerid">The ID of the player.</param>
            <param name="range">The furthest distance the player can be from the point to be in range.</param>
            <param name="point">The point to check the range to.</param>
            <returns>True if the player is in range of the point, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerFacingAngle(System.Int32)">
            <summary>
                Return angle of the direction the player is facing.
            </summary>
            <param name="playerid">The player you want to get the angle of.</param>
            <returns>The angle of the player.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerDistanceFromPoint(System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Calculate the distance between a player and a map coordinate.
            </summary>
            <param name="playerid">The ID of the player to calculate the distance from.</param>
            <param name="point">The point to check the distance from.</param>
            <returns>The distance between the player and the point as a float.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerHealth(System.Int32)">
            <summary>
                The function GetPlayerHealth allows you to retrieve the health of a player. Useful for cheat detection, among other
                things.
            </summary>
            <param name="playerid">The ID of the player.</param>
            <returns>The health of the player.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerArmour(System.Int32)">
            <summary>
                This function stores the armour of a player into a variable.
            </summary>
            <param name="playerid">The ID of the player that you want to get the armour of.</param>
            <returns>The amount of armour the player has.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GivePlayerWeapon(System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Give a player a weapon with a specified amount of ammo.
            </summary>
            <param name="playerid">The ID of the player to give a weapon to.</param>
            <param name="weapon">The weapon to give to the player.</param>
            <param name="ammo">The amount of ammo to give to the player.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerIp(System.Int32)">
            <summary>
                Get the specified player's IP and store it in a string.
            </summary>
            <remarks>
                This function does not work when used in <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerDisconnect(System.Int32,System.Int32)"/> because the player is already
                disconnected. It will return an invalid IP (255.255.255.255). Save players' IPs under
                <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerConnect(System.Int32)"/> if they need to be used under <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerConnect(System.Int32)"/>.
            </remarks>
            <param name="playerid">The ID of the player to get the IP of.</param>
            <returns>The player's IP.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerName(System.Int32)">
            <summary>
                Get a player's name.
            </summary>
            <remarks>
                A player's name can be up to 24 characters long.
                This is defined as <see cref="F:SampSharp.GameMode.Definitions.Limits.MaxPlayerName"/>.
                Strings to store names in should be made this size, plus one extra cell for the null terminating character.
            </remarks>
            <param name="playerid">The ID of the player to get the name of.</param>
            <returns>The name of the player.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPVarString(System.Int32,System.String)">
            <summary>
                Gets a player variable as a string.
            </summary>
            <param name="playerid">The ID of the player whose player variable to get.</param>
            <param name="varname">The name of the player variable, set by <see cref="M:SampSharp.GameMode.Natives.Native.SetPVarString(System.Int32,System.String,System.String)"/>.</param>
            <returns>The string from the player variable.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPVarNameAtIndex(System.Int32,System.Int32)">
            <summary>
                Retrieve the name of a player's variable via the index.
            </summary>
            <param name="playerid">The ID of the player whose player variable to get the name of.</param>
            <param name="index">The index of the player's pVar.</param>
            <returns>This name of the player's variable.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerArmedWeapon(System.Int32,SampSharp.GameMode.Definitions.Weapon)">
            <summary>
                Sets the armed weapon of the player.
            </summary>
            <param name="playerid">The ID of the player to arm with a weapon.</param>
            <param name="weapon">The weapon that the player should be armed with.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerWeaponData(System.Int32,System.Int32,SampSharp.GameMode.Definitions.Weapon@,System.Int32@)">
            <summary>
                Get the weapon and ammo in a specific player's weapon slot.
            </summary>
            <param name="playerid">The ID of the player whose weapon data to retrieve.</param>
            <param name="slot">The weapon slot to get data for (0-12).</param>
            <param name="weapon">The variable in which to store the weapon, passed by reference.</param>
            <param name="ammo">The variable in which to store the ammo, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerKeys(System.Int32,SampSharp.GameMode.Definitions.Keys@,System.Int32@,System.Int32@)">
            <summary>
                Check which keys a player is pressing.
            </summary>
            <remarks>
                Only the FUNCTION of keys can be detected; not actual keys. You can not detect if a player presses space, but you
                can detect if they press sprint (which can be mapped (assigned) to ANY key, but is space by default)).
            </remarks>
            <param name="playerid">The ID of the player to detect the keys of.</param>
            <param name="keys">A set containing the player's key states</param>
            <param name="updown">Up or Down value, passed by reference.</param>
            <param name="leftright">Left or Right value, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerFightingStyle(System.Int32,SampSharp.GameMode.Definitions.FightStyle)">
            <summary>
                Set a player's special fighting style. To use in-game, aim and press the 'secondary attack' key (ENTER by default).
            </summary>
            <remarks>
                This does not affect normal fist attacks - only special/secondary attacks (aim + press 'secondary attack' key).
            </remarks>
            <param name="playerid">The ID of player to set the fighting style of.</param>
            <param name="style">The fighting style that should be set.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerAttachedObject(System.Int32,System.Int32,System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Attach an object to a specific bone on a player.
            </summary>
            <param name="playerid">The ID of the player to attach the object to.</param>
            <param name="index">The index (slot) to assign the object to (0-9).</param>
            <param name="modelid">The model to attach.</param>
            <param name="bone">The bone to attach the object to.</param>
            <param name="offset">offset for the object position.</param>
            <param name="rotation">rotation of the object.</param>
            <param name="scale"> scale of the object.</param>
            <param name="materialcolor1">The first object color to set.</param>
            <param name="materialcolor2">The second object color to set.</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawAlignment(System.Int32,System.Int32,SampSharp.GameMode.Definitions.TextDrawAlignment)">
            <summary>
                Set the text alignment of a player-textdraw.
            </summary>
            <param name="playerid">The ID of the player whose player-textdraw to set the alignment of.</param>
            <param name="text">The ID of the player-textdraw to set the alignment of.</param>
            <param name="alignment">Alignment of the player-textdraw.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawFont(System.Int32,System.Int32,SampSharp.GameMode.Definitions.TextDrawFont)">
            <summary>
                Change the font of a player-textdraw.
            </summary>
            <param name="playerid">The ID of the player whose player-textdraw to change the font of.</param>
            <param name="text">The ID of the player-textdraw to change the font of</param>
            <param name="font">The font to use in this player-textdraw.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerTextDrawSetPreviewRot(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Single)">
            <summary>
                Sets the rotation and zoom of a 3D model preview player-textdraw.
            </summary>
            <param name="playerid">The ID of the player whose player-textdraw to change.</param>
            <param name="text">The ID of the player-textdraw to change.</param>
            <param name="rotation">The rotation value.</param>
            <param name="fZoom">
                The zoom value, default value 1.0, smaller values make the camera closer and larger values make the
                camera further away.
            </param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.PlayerPlaySound(System.Int32,System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Plays the specified sound for a player.
            </summary>
            <remarks>
                Only use the coordinates if you want the sound to be played at a certain position. Set coordinates all to 0 to just
                play the sound.
            </remarks>
            <param name="playerid">The ID of the player for whom to play the sound.</param>
            <param name="soundid">The sound to play.</param>
            <param name="position">coordinates for the sound to play at. (0,0,0 for no position)</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerSpecialAction(System.Int32,SampSharp.GameMode.Definitions.SpecialAction)">
            <summary>
                This Function allows to set players special action.
            </summary>
            <param name="playerid">The player that should perform the action.</param>
            <param name="action">The action that should be performed.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerCheckpoint(System.Int32,SampSharp.GameMode.World.Vector,System.Single)">
            <summary>
                Sets a checkpoint (red circle) for a player. Also shows a red blip on the radar.
            </summary>
            <remarks>
                Checkpoints created on server-created objects (<see cref="M:SampSharp.GameMode.Natives.Native.CreateObject(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/>/<see cref="M:SampSharp.GameMode.Natives.Native.CreatePlayerObject(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/>) will
                appear down on the 'real' ground, but will still function correctly. There is no fix available for this issue. A
                pickup can be used instead.
            </remarks>
            <param name="playerid">The ID of the player to set the checkpoint of.</param>
            <param name="position">The coordinate to set the checkpoint at.</param>
            <param name="size">The size of the checkpoint.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerRaceCheckpoint(System.Int32,SampSharp.GameMode.Definitions.CheckpointType,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Single)">
            <summary>
                Creates a race checkpoint. When the player enters it, the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterRaceCheckpoint(System.Int32)"/>
                callback is called.
            </summary>
            <param name="playerid">The ID of the player to set the checkpoint for.</param>
            <param name="type">Type of checkpoint.</param>
            <param name="point">Position of the checkpoint.</param>
            <param name="nextPosition">Position of the next point, for the arrow facing direction.</param>
            <param name="size">Size (diameter) of the checkpoint</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerMapIcon(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.Definitions.PlayerMarkersMode,System.Int32,System.Int32)">
            <summary>
                This function allows you to place your own icons on the map, enabling you to emphasise the locations of banks,
                airports or whatever else you want. A total of 63 icons are available in GTA: San Andreas, all of which can be used
                using this function. You can also specify the color of the icon, which allows you to change the square icon (ID:
                0).
            </summary>
            <param name="playerid">The ID of the player to set the map icon for.</param>
            <param name="iconid">The player's icon ID, ranging from 0 to 99, to be used in RemovePlayerMapIcon.</param>
            <param name="position">The coordinates of the place where you want the icon to be.</param>
            <param name="markertype">The icon to set.</param>
            <param name="color">The color of the icon, this should only be used with the square icon (ID: 0).</param>
            <param name="style">The style of icon.</param>
            <returns>True if it was successful, False otherwise (e.g. the player isn't connected).</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerCameraPos(System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Sets the camera to a specific position for a player.
            </summary>
            <param name="playerid">ID of the player.</param>
            <param name="position">New position of the camera.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetPlayerCameraLookAt(System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.Definitions.CameraCut)">
            <summary>
                Set the direction a player's camera looks at. To be used in combination with SetPlayerCameraPos.
            </summary>
            <param name="playerid">The player to change the camera of.</param>
            <param name="point">The coordinates for the player's camera to look at.</param>
            <param name="cut">The style the camera-position changes.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerCameraPos(System.Int32)">
            <summary>
                Get the position of the player's camera.
            </summary>
            <remarks>
                Player's camera positions are only updated once a second, unless aiming.
            </remarks>
            <param name="playerid">The ID of the player to get the camera position of.</param>
            <returns>The position of the camera.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetPlayerCameraFrontVector(System.Int32)">
            <summary>
                This function will return the current direction of player's aiming in 3-D space, the coords are relative to the
                camera position, see <see cref="M:SampSharp.GameMode.Natives.Native.GetPlayerCameraPos(System.Int32)"/>.
            </summary>
            <param name="playerid">The ID of the player you want to obtain the camera front vector of.</param>
            <returns>This camera front vector of the player.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.InterpolateCameraPos(System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Int32,SampSharp.GameMode.Definitions.CameraCut)">
            <summary>
                Move a player's camera from one position to another, within the set time.
            </summary>
            <param name="playerid">The ID of the player the camera should be moved for.</param>
            <param name="from">The position the camera should start to move from.</param>
            <param name="to">The position the camera should move to.</param>
            <param name="time">Time in milliseconds.</param>
            <param name="cut">The jumpcut to use.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.InterpolateCameraLookAt(System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Int32,SampSharp.GameMode.Definitions.CameraCut)">
            <summary>
                Interpolate a player's camera's 'look at' point between two coordinates with a set speed. Can be be used with
                <see cref="M:SampSharp.GameMode.Natives.Native.InterpolateCameraPos(System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Int32,SampSharp.GameMode.Definitions.CameraCut)"/>.
            </summary>
            <param name="playerid">The ID of the player the camera should be moved for.</param>
            <param name="from">The position the camera should start to move from.</param>
            <param name="to">The position the camera should move to.</param>
            <param name="time">Time in milliseconds to complete interpolation.</param>
            <param name="cut">The 'jumpcut' to use.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreateExplosionForPlayer(System.Int32,SampSharp.GameMode.World.Vector,System.Int32,System.Single)">
            <summary>
                Creates an explosion for a player.
                Only the specific player will see explosion and feel its effects.
                This is useful when you want to isolate explosions from other players or to make them only appear in specific
                virtual worlds.
            </summary>
            <param name="playerid">The ID of the player to create the explosion for.</param>
            <param name="position">The position of the explosion.</param>
            <param name="type">The explosion type.</param>
            <param name="radius">The radius of the explosion.</param>
            <returns>This function does not return any specific values.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsValidVehicle(System.Int32)">
            <summary>
                Check if a vehicle is created.
            </summary>
            <param name="vehicleid">The vehicle to check for existance.</param>
            <returns>true if the vehicle exists, otherwise false.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleDistanceFromPoint(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                This function can be used to calculate the distance (as a float) between a vehicle and another map coordinate. This
                can be useful to detect how far a vehicle away is from a location.
            </summary>
            <param name="vehicleid">The ID of the vehicle to calculate the distance for.</param>
            <param name="x">The X map coordinate.</param>
            <param name="y">The Y map coordinate.</param>
            <param name="z">The Z map coordinate.</param>
            <returns>A float containing the distance from the point specified in the coordinates.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CreateVehicle(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a vehicle in the world. Can be used in place of <see cref="M:SampSharp.GameMode.Natives.Native.AddStaticVehicleEx(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32)"/> at any time in the
                script.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="x">The X coordinate for the vehicle.</param>
            <param name="y">The Y coordinate for the vehicle.</param>
            <param name="z">The Z coordinate for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <param name="respawnDelay">
                The delay until the car is respawned without a driver in seconds. Using -1 will prevent the
                vehicle from respawning.
            </param>
            <returns>
                The vehicle ID of the vehicle created (1 - <see cref="F:SampSharp.GameMode.Definitions.Limits.MaxVehicles"/>).
                <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidVehicleId"/> (65535) if vehicle was not created (vehicle limit reached or invalid vehicle
                model ID passed).
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DestroyVehicle(System.Int32)">
            <summary>
                Destroys a vehicle which was previously created.
            </summary>
            <param name="vehicleid">The vehicleid of the vehicle which shall be destroyed.</param>
            <returns> False: Vehicle does not exist. True: Vehicle was successfully destroyed.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsVehicleStreamedIn(System.Int32,System.Int32)">
            <summary>
                Checks if a vehicle is streamed in for a player.
            </summary>
            <param name="vehicleid">The ID of the vehicle to check.</param>
            <param name="forplayerid">The ID of the player to check.</param>
            <returns>False: Vehicle is not streamed in for the player. False: Vehicle is streamed in for the player.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehiclePos(System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Get the X Y Z coordinates of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the position of.</param>
            <param name="x">A float to store the X coordinate in, passed by reference.</param>
            <param name="y">A float to store the Y coordinate in, passed by reference.</param>
            <param name="z">A float to store the Z coordinate in, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehiclePos(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Set a vehicle's position.
            </summary>
            <remarks>
                An empty vehicle will not fall after being teleported into the air.
            </remarks>
            <param name="vehicleid">Vehicle ID that you want set new position.</param>
            <param name="x">The X coordinate to position the vehicle at.</param>
            <param name="y">The Y coordinate to position the vehicle at.</param>
            <param name="z">The Z coordinate to position the vehicle at.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleZAngle(System.Int32,System.Single@)">
            <summary>
                Store the z rotation of a vehicle in a float variable.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the angle of.</param>
            <param name="zAngle">The variable (FLOAT) in which to store the rotation, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleRotationQuat(System.Int32,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
                Returns a vehicle's rotation on all axis as a quaternion.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the rotation of.</param>
            <param name="w">A float variable in which to store the first quaternion angle, passed by reference.</param>
            <param name="x">A float variable in which to store the second quaternion angle, passed by reference.</param>
            <param name="y">A float variable in which to store the third quaternion angle, passed by reference.</param>
            <param name="z">A float variable in which to store the fourth quaternion angle, passed by reference.</param>
            <returns>True on succes, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehicleZAngle(System.Int32,System.Single)">
            <summary>
                Set the Z rotation of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to set the rotation of.</param>
            <param name="zAngle">The angle to set.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehicleParamsForPlayer(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Set the parameters of a vehicle for a player.
            </summary>
            <param name="vehicleid">The ID of the vehicle to set the parameters of.</param>
            <param name="playerid">The ID of the player to set the vehicle's parameters for.</param>
            <param name="objective">False to disable the objective or True to show it.</param>
            <param name="doorslocked">False to unlock the doors or True to lock them.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ManualVehicleEngineAndLights">
            <summary>
                Use this function before any player connects (<see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/>) to tell all clients that the
                script will control vehicle engines and lights. This prevents the game automatically turning the engine on/off when
                players enter/exit vehicles and headlights automatically coming on when it is dark.
            </summary>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehicleParamsEx(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Sets a vehicle's parameters for all players.
            </summary>
            <param name="vehicleid">The ID of the vehicle to set the parameters of.</param>
            <param name="engine">Toggle the engine status on or off.</param>
            <param name="lights">Toggle the lights on or off.</param>
            <param name="alarm">Toggle the vehicle alarm on or off.</param>
            <param name="doors">Toggle the lock status of the doors.</param>
            <param name="bonnet">Toggle the bonnet to be open or closed.</param>
            <param name="boot">Toggle the boot to be open or closed.</param>
            <param name="objective">Toggle the objective status for the vehicle on or off.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleParamsEx(System.Int32,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Gets a vehicle's parameters.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the parameters from.</param>
            <param name="engine">Get the engine status. If True, the engine is running..</param>
            <param name="lights">Get the vehicle's lights' state. If True the lights are on.</param>
            <param name="alarm">Get the vehicle's alarm state. If True the alarm is (or was) sounding.</param>
            <param name="doors">Get the lock status of the doors. If True the doors are locked.</param>
            <param name="bonnet">Get the bonnet/hood status. If True, it's open.</param>
            <param name="boot">Get the boot/trunk status. True means it is open.</param>
            <param name="objective">Get the objective status. True means the objective is on.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehicleToRespawn(System.Int32)">
            <summary>
                Sets a vehicle back to the position at where it was created.
            </summary>
            <param name="vehicleid">The ID of the vehicle to respawn.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.LinkVehicleToInterior(System.Int32,System.Int32)">
            <summary>
                Links the vehicle to the interior. This can be used for example for an arena/stadium.
            </summary>
            <param name="vehicleid">Vehicle ID (Not model).</param>
            <param name="interiorid">Interior ID.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AddVehicleComponent(System.Int32,System.Int32)">
            <summary>
                Adds a 'component' (often referred to as a 'mod' (modification)) to a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to add the component to. Not to be confused with modelid.</param>
            <param name="componentid">The ID of the component to add to the vehicle.</param>
            <returns>
                False: The component was not added because the vehicle does not exist. True: The component was successfully
                added to the vehicle.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.RemoveVehicleComponent(System.Int32,System.Int32)">
            <summary>
                Remove a component from a vehicle.
            </summary>
            <param name="vehicleid">ID of the vehicle.</param>
            <param name="componentid">ID of the component to remove.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ChangeVehicleColor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Change a vehicle's primary and secondary colors.
            </summary>
            <param name="vehicleid">The ID of the vehicle to change the colors of.</param>
            <param name="color1">The new vehicle's primary Color ID.</param>
            <param name="color2">The new vehicle's secondary Color ID.</param>
            <returns> False: The vehicle does not exist. True: The vehicle's color was successfully changed.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.ChangeVehiclePaintjob(System.Int32,System.Int32)">
            <summary>
                Change a vehicle's paintjob (for plain colors see <see cref="M:SampSharp.GameMode.Natives.Native.ChangeVehicleColor(System.Int32,System.Int32,System.Int32)"/>).
            </summary>
            <param name="vehicleid">The ID of the vehicle to change the paintjob of.</param>
            <param name="paintjobid">The ID of the Paintjob to apply. Use 3 to remove a paintjob.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehicleHealth(System.Int32,System.Single)">
            <summary>
                Sets a vehicle's health to a specific value.
            </summary>
            <param name="vehicleid">ID of the vehicle to set the health of.</param>
            <param name="health">Vehicle heath given as a float value.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleHealth(System.Int32,System.Single@)">
            <summary>
                Get the health of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the health of.</param>
            <param name="health">A float varaible in which to store the vehicle's health, passed by reference.</param>
            <returns> True: success False: failure (invalid vehicle ID).</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.AttachTrailerToVehicle(System.Int32,System.Int32)">
            <summary>
                Attach a vehicle to another vehicle as a trailer.
            </summary>
            <param name="trailerid">The ID of the vehicle that will be pulled.</param>
            <param name="vehicleid">The ID of the vehicle that will pull the trailer.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.DetachTrailerFromVehicle(System.Int32)">
            <summary>
                Detach the connection between a vehicle and its trailer, if any.
            </summary>
            <param name="vehicleid">ID of the pulling vehicle.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.IsTrailerAttachedToVehicle(System.Int32)">
            <summary>
                Checks if a vehicle has a trailer attached to it.
            </summary>
            <param name="vehicleid">The ID of the vehicle to check for trailers.</param>
            <returns>True if the vehicle has a trailer attached, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleTrailer(System.Int32)">
            <summary>
                Get the ID of the trailer attached to a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the trailer of.</param>
            <returns>The vehicle ID of the trailer or 0 if no trailer is attached.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehicleNumberPlate(System.Int32,System.String)">
            <summary>
                Set a vehicle's numberplate, which supports olor embedding.
            </summary>
            <param name="vehicleid">The ID of the vehicle to set the numberplate of.</param>
            <param name="numberplate">The text that should be displayed on the numberplate. Color Embedding> is supported.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleModel(System.Int32)">
            <summary>
                Gets the model ID of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the model of.</param>
            <returns>The vehicle model ID, or 0 if the vehicle doesn't exist.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleComponentInSlot(System.Int32,System.Int32)">
            <summary>
                Retreives the installed component ID from a vehicle in a specific slot.
            </summary>
            <param name="vehicleid">The ID of the vehicle to check for the component.</param>
            <param name="slot">The component slot to check for components.</param>
            <returns>The ID of the component installed in the specified slot.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleComponentType(System.Int32)">
            <summary>
                Find out what type of component a certain ID is.
            </summary>
            <param name="component">The component ID to check.</param>
            <returns>The component slot ID of the specified component.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.RepairVehicle(System.Int32)">
            <summary>
                Fully repairs a vehicle, including visual damage (bumps, dents, scratches, popped tires etc.).
            </summary>
            <param name="vehicleid">The ID of the vehicle to repair.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleVelocity(System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Gets the velocity at which the vehicle is moving in the three directions, X, Y and Z.
            </summary>
            <param name="vehicleid">The vehicle to get the velocity of.</param>
            <param name="x">The Float variable to save the velocity in the X direction to.</param>
            <param name="y">The Float variable to save the velocity in the Y direction to.</param>
            <param name="z">The Float variable to save the velocity in the Z direction to.</param>
            <returns>
                The function itself doesn't return a specific value. The X, Y and Z velocities are stored in the referenced
                variables.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehicleVelocity(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Sets the X, Y and Z velocity of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to set the velocity of.</param>
            <param name="x">The velocity in the X direction.</param>
            <param name="y">The velocity in the Y direction .</param>
            <param name="z">The velocity in the Z direction.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehicleAngularVelocity(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Sets the angular X, Y and Z velocity of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to set the velocity of.</param>
            <param name="x">The amount of velocity in the angular X direction.</param>
            <param name="y">The amount of velocity in the angular Y direction .</param>
            <param name="z">The amount of velocity in the angular Z direction.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleDamageStatus(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                Retrieve the damage statuses of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the damage statuses of.</param>
            <param name="panels">A variable to store the panel damage data in, passed by reference.</param>
            <param name="doors">A variable to store the door damage data in, passed by reference.</param>
            <param name="lights">A variable to store the light damage data in, passed by reference.</param>
            <param name="tires">A variable to store the tire damage data in, passed by reference.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.UpdateVehicleDamageStatus(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the various visual damage statuses of a vehicle, such as popped tires, broken lights and damaged panels.
            </summary>
            <param name="vehicleid">The ID of the vehicle to set the damage of.</param>
            <param name="panels">A set of bits containing the panel damage status.</param>
            <param name="doors">A set of bits containing the door damage status.</param>
            <param name="lights">A set of bits containing the light damage status.</param>
            <param name="tires">A set of bits containing the tire damage status.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehicleVirtualWorld(System.Int32,System.Int32)">
            <summary>
                Sets the 'virtual world' of a vehicle. Players will only be able to see vehicles in their own virtual world.
            </summary>
            <param name="vehicleid">The ID of vehicle to set the virtual world of.</param>
            <param name="worldid">The ID of the virtual world to put the vehicle in.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleVirtualWorld(System.Int32)">
            <summary>
                Get the virtual world of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the virtual world of.</param>
            <returns>The virtual world that the vehicle is in.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleModelInfo(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Retrieve information about a specific vehicle model such as the size or position of seats.
            </summary>
            <param name="model">The vehicle model to get info of.</param>
            <param name="infotype">The type of information to retrieve.</param>
            <param name="x">A float to store the X value.</param>
            <param name="y">A float to store the Y value.</param>
            <param name="z">A float to store the Z value.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehiclePos(System.Int32)">
            <summary>
                Get the X Y Z coordinates of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the position of.</param>
            <returns>The position of the vehicle.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehiclePos(System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Set a vehicle's position.
            </summary>
            An empty vehicle will not fall after being teleported into the air.
            <remarks>
            </remarks>
            <param name="vehicleid">The ID of the vehicle.</param>
            <param name="position">The coordinates to position the vehicle at.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleZAngle(System.Int32)">
            <summary>
                Get the z rotation of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the angle of.</param>
            <returns>The rotation of the vehicle.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleHealth(System.Int32)">
            <summary>
                Get the health of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to get the health of.</param>
            <returns>The vehicle's health.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleVelocity(System.Int32)">
            <summary>
                Gets the velocity at which the vehicle is moving in the three directions.
            </summary>
            <param name="vehicleid">The vehicle to get the velocity of.</param>
            <returns>The velocity of the vehicle.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehicleVelocity(System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Sets the velocity of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to set the velocity of.</param>
            <param name="velocity">The velocity.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.SetVehicleAngularVelocity(System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Sets the angular X, Y and Z velocity of a vehicle.
            </summary>
            <param name="vehicleid">The ID of the vehicle to set the velocity of.</param>
            <param name="velocity">The angular velocity.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.GetVehicleModelInfo(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Definitions.VehicleModelInfoType)">
            <summary>
                Retrieve information about a specific vehicle model such as the size or position of seats.
            </summary>
            <param name="model">The vehicle model to get info of.</param>
            <param name="infotype">The type of information to retrieve.</param>
            <returns>The model information.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.RegisterExtension(System.Object)">
            <summary>
                Registers an extension to the plugin.
            </summary>
            <param name="extension">The extension to register.</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CallNative(System.String)">
            <summary>
                Call a native.
            </summary>
            <param name="name">The name of the native to call.</param>
            <returns>The returned integer.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CallNative(System.String,)">
            <summary>
                Call a native with the given arguments.
            </summary>
            <param name="name">The name of the native to call.</param>
            <returns>The returned integer.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CallNative(System.String,System.Int32[],)">
            <summary>
                Call a native with the given arguments.
            </summary>
            <param name="name">The name of the native to call.</param>
            <param name="lengths"></param>
            <returns>The returned integer.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CallNativeAsBool(System.String)">
            <summary>
                Call a native.
            </summary>
            <param name="name">The name of the native to call.</param>
            <returns>The returned boolean.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CallNativeAsBool(System.String,)">
            <summary>
                Call a native with the given arguments.
            </summary>
            <param name="name">The name of the native to call.</param>
            <returns>The returned boolean.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Natives.Native.CallNativeAsBool(System.String,System.Int32[],)">
            <summary>
                Call a native with the given arguments.
            </summary>
            <param name="name">The name of the native to call.</param>
            <param name="lengths"></param>
            <returns>The returned boolean.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.CommandGroup">
            <summary>
                Represents a group of commands.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Pools.Pool`1">
            <summary>
                Keeps track of a pool of instances.
            </summary>
            <typeparam name="T">Base type of instances to keep track of.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.Pools.Pool`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Pools.Pool`1"/> class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.Pool`1.Dispose(System.Boolean)">
            <summary>
                Removes this instance from the pool.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Pools.Pool`1.Contains(`0)">
            <summary>
                Gets whether the given instance is present in the pool.
            </summary>
            <param name="item">The instance to check the presence of.</param>
            <returns>Whether the given instance is present in the pool.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.Pool`1.GetAll``1">
            <summary>
                Gets a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> containing all instances of type
                <typeparam name="T2"/>
                within this pool.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Pools.Pool`1.All">
            <summary>
                Gets a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> containing all instances of type.
                <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandGroup.#ctor(System.String,System.String,SampSharp.GameMode.SAMP.Commands.CommandGroup)">
            <summary>
                Initializes a new instance of the CommandGroup class.
            </summary>
            <param name="name">The name of the command group.</param>
            <param name="alias">An alias for the command group.</param>
            <param name="parentGroup">The parent command group of the command group.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandGroup.Register(System.String,System.String,SampSharp.GameMode.SAMP.Commands.CommandGroup)">
            <summary>
                Initializes a new instance of the CommandGroup class.
            </summary>
            <param name="name">The name of the command group.</param>
            <param name="alias">An alias for the command group.</param>
            <param name="parentGroup">The parent command group of the command group.</param>
            <returns>The new CommandGroup instance.</returns>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandGroup.Name">
            <summary>
                Gets or sets the name of this CommandGroup.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandGroup.Alias">
            <summary>
                Gets or sets the alias of this CommandGroup.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandGroup.ParentGroup">
            <summary>
                Gets or sets the parent CommandGroup of this CommandGroup.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandGroup.CommandPaths">
            <summary>
                Gets the paths to this command.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandGroup.CommandPath">
            <summary>
                Gets the main path to this CommandGroup.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.Command">
            <summary>
                Represents a player-command.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.Command.RunCommand(SampSharp.GameMode.World.GtaPlayer,System.String)">
            <summary>
                Runs the command.
            </summary>
            <param name="player">The player running the command.</param>
            <param name="args">The arguments the player entered.</param>
            <returns>True when the command has been executed, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.Command.HasPlayerPermissionForCommand(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Checks whether the given player has the permission to run this command.
            </summary>
            <param name="player">The player that attempts to run this command.</param>
            <returns>True when allowed, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.Command.CommandTextMatchesCommand(System.String@)">
            <summary>
                Checks whether the provided <paramref name="commandText" /> starts with the right characters to run this command.
            </summary>
            <param name="commandText">
                The command the player entered. When the command returns True, the referenced string will
                only contain the command arguments.
            </param>
            <returns>True when successful, False otherwise.</returns>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.Command.Name">
            <summary>
                Gets the name of the command (/name).
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.Command.IgnoreCase">
            <summary>
                Gets whether this command is case-sensitive.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.DetectedCommand.UsageFormat">
            <summary>
                Gets or sets the usage message send when a wrongly formatted command is being processed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.DetectedCommand.ResolveParameterType">
            <summary>
                Gets or sets the metod the find the parameter type of a parameter when no attribute was
                attached to the parameter.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.EnumAttribute">
            <summary>
                Represents an enum command-parameter.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.WordAttribute">
            <summary>
                Represents an word command-parameter.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.ParameterAttribute">
            <summary>
                Represents a command-parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.ParameterAttribute.Check(System.String@,System.Object@)">
            <summary>
                Check if the parameter is well-formatted and return the output.
            </summary>
            <param name="command">The command text.</param>
            <param name="output">The output of this parameter.</param>
            <returns>True if the parameter is well-formatted, False otherwise.</returns>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.ParameterAttribute.Name">
            <summary>
                Gets the name of this parameter.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.ParameterAttribute.DisplayName">
            <summary>
                Gets or sets the displayname of this parameter.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.ParameterAttribute.Optional">
            <summary>
                Gets or sets whether this parameter is optional.
            </summary>
            <remarks>
                This property is auto-filled based on the methods' signature.
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.WordAttribute.Check(System.String@,System.Object@)">
            <summary>
                Check if the parameter is well-formatted and return the output.
            </summary>
            <param name="command">The command text.</param>
            <param name="output">The output of this parameter.</param>
            <returns>True if the parameter is well-formatted, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.EnumAttribute.Check(System.String@,System.Object@)">
            <summary>
                Check if the parameter is well-formatted and return the output.
            </summary>
            <param name="command">The command text.</param>
            <param name="output">The output of this parameter.</param>
            <returns>True if the parameter is well-formatted, False otherwise.</returns>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.EnumAttribute.Type">
            <summary>
                Gets the enum type in which to look for values.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.EnumAttribute.TestForValue">
            <summary>
                Gets or sets whether input should be matches against the enum values.
                When False, the input will only be matches agains the names.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.FloatAttribute">
            <summary>
                Represents an single floating point command-parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.FloatAttribute.Check(System.String@,System.Object@)">
            <summary>
                Check if the parameter is well-formatted and return the output.
            </summary>
            <param name="command">The command text.</param>
            <param name="output">The output of this parameter.</param>
            <returns>True if the parameter is well-formatted, False otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.PlayerAttribute">
            <summary>
                Represents a player command-parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.PlayerAttribute.Check(System.String@,System.Object@)">
            <summary>
                Check if the parameter is well-formatted and return the output.
            </summary>
            <param name="command">The command text.</param>
            <param name="output">The output of this parameter.</param>
            <returns>True if the parameter is well-formatted, False otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.KeyChangeHandlerSet">
            <summary>
                Contains a set of KeyHandlers for different keystates.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.KeyChangeHandlerSet.#ctor">
            <summary>
                Initializes a new instance of the KeyChangeHandlerSet class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.KeyChangeHandlerSet.Handle(System.Object,SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs)">
            <summary>
                Handles a change in PlayerKeyState.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Object containing information about the event.</param>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyChangeHandlerSet.Pressed">
            <summary>
                Gets a set of KeyHandlers which are triggered once a key has been pressed.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.KeyChangeHandlerSet.Released">
            <summary>
                Gets a set of KeyHandlers which are triggered once a key has been released.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.KeyHandlerSet">
            <summary>
                Contains a set of KeyHandlers
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.KeyHandlerSet.#ctor(System.Func{SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs,SampSharp.GameMode.Definitions.Keys,System.Boolean})">
            <summary>
                Initializes a new instance of the KeyHandlerSet class.
            </summary>
            <param name="check">The check to run in Handle before calling an EventHandler.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.KeyHandlerSet.Handle(System.Object,SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs)">
            <summary>
                Handles a change in PlayerKeyState.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Object containing information about the event.</param>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.Action">
            <summary>
                Occurs when the Keys.Action key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.Crouch">
            <summary>
                Occurs when the Keys.Crouch key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.Fire">
            <summary>
                Occurs when the Keys.Fire key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.Sprint">
            <summary>
                Occurs when the Keys.Sprint key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.SecondaryAttack">
            <summary>
                Occurs when the Keys.Attack key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.Jump">
            <summary>
                Occurs when the Keys.Jump key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.LookRight">
            <summary>
                Occurs when the Keys.Right key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.Handbrake">
            <summary>
                Occurs when the Keys.Handbrake key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.Aim">
            <summary>
                Occurs when the Keys.Aim key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.LookLeft">
            <summary>
                Occurs when the Keys.Left key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.Submission">
            <summary>
                Occurs when the Keys.Submission or Keys.LookBehind key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.LookBehind">
            <summary>
                Occurs when the Keys.LookBehind or Keys.Submission key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.Walk">
            <summary>
                Occurs when the Keys.Walk key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.AnalogUp">
            <summary>
                Occurs when the Keys.Up key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.AnalogDown">
            <summary>
                Occurs when the Keys.Down key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.AnalogLeft">
            <summary>
                Occurs when the Keys.Left key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.AnalogRight">
            <summary>
                Occurs when the Keys.Right key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.Yes">
            <summary>
                Occurs when the Keys.Yes key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.No">
            <summary>
                Occurs when the Keys.No key has been pressed.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.KeyHandlerSet.CtrlBack">
            <summary>
                Occurs when the Keys.CtrlBack key has been pressed.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Server">
            <summary>
                Contains methods affecting the SA-MP server.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.BlockIPAddress(System.String,System.TimeSpan)">
            <summary>
                Blocks an IP address from further communication with the server
                for a set amount of time (with wildcards allowed).
                Players trying to connect to the server with a blocked IP address
                will receive the generic "You are banned from this server." message.
                Players that are online on the specified IP before the block
                will timeout after a few seconds and, upon reconnect,
                will receive the same message.
            </summary>
            <param name="ip">
                The IP to block.
                <remarks>
                    Wildcards can be used with this function,
                    for example blocking the IP '6.9.*.*' will block all IPs where the first two octets are 6 and 9 respectively.
                    Any number can be in place of an asterisk.
                </remarks>
            </param>
            <param name="time">The time that the connection will be blocked for. 0 can be used for an indefinite block.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.UnBlockIPAddress(System.String)">
            <summary>
                Unblock an IP address that was previously blocked using <see cref="M:SampSharp.GameMode.SAMP.Server.BlockIPAddress(System.String,System.TimeSpan)"/>.
            </summary>
            <param name="ip">The IP address to unblock</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.Get``1(System.String)">
            <summary>
                Retrieve a server variable.
            </summary>
            <typeparam name="T">
                If <see cref="!:T"/> is <see cref="T:System.Int32"/> the <see cref="!:varName"/> will be readed as an int variable
                If <see cref="!:T"/> is <see cref="T:System.Boolean"/> the <see cref="!:varName"/> will be readed as an boolean variable
                If <see cref="!:T"/> is <see cref="T:System.String"/> the <see cref="!:varName"/> will be readed as an string variable
            </typeparam>
            <param name="varName">The server variable to read</param>
            <returns>The value of the server variable</returns>
            <exception cref="T:System.NotSupportedException"><see cref="!:T"/> is not supported by SA:MP</exception>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.GetTickCount">
            <summary>
                Returns the uptime of the actual server in milliseconds.
            </summary>
            <returns>Uptime of the SA:MP server(NOT the physical box).</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.SetCodepage(System.Int32)">
            <summary>
                Sets the currently active codepage.
            </summary>
            <param name="codepage">Codepage to use.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Server.SendRconCommand(System.String)">
            <summary>
                Sends an RCON command.
            </summary>
            <param name="command">The RCON command to be executed.</param>
            <returns>This function doesn't return a specific value.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Tools.Sync">
            <summary>
                Contains methods to run an action on the main VM thread from a different thread.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Sync.Run(System.Action)">
            <summary>
                Run a function on the main VM thread.
            </summary>
            <param name="action">The action the run</param>
        </member>
        <member name="M:SampSharp.GameMode.Tools.Sync.Run``1(System.Func{``0})">
            <summary>
                Run a function on the main VM thread.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that the action encapsulates.</typeparam>
            <param name="action">The action to run.</param>
            <returns>The return value of the method that the action encapsulates.</returns>
        </member>
        <member name="P:SampSharp.GameMode.Tools.Sync.IsRequired">
            <summary>
                Gets whether is it required to sync before calling natives.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Pools.IdentifiedPool`1">
            <summary>
                Keeps track of a pool of identifyable instances.
            </summary>
            <typeparam name="T">Base type of instances to keep track of.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.Register``1">
            <summary>
                Registers the type to use when initializing new instances.
            </summary>
            <typeparam name="T2">The Type to use when initializing new instances.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.Find(System.Int32)">
            <summary>
                Finds an instance with the given <paramref name="id" />".
            </summary>
            <param name="id">The identity of the instance to find.</param>
            <returns>The found instance.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.Create(System.Int32)">
            <summary>
                Initializes a new instance with the given id.
            </summary>
            <param name="id">The identity of the instance to create.</param>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedPool`1.FindOrCreate(System.Int32)">
            <summary>
                Finds an instance with the given <paramref name="id" /> or initializes a new one.
            </summary>
            <param name="id">The identity of the instance to find or create.</param>
            <returns>The found instance.</returns>
        </member>
        <member name="T:SampSharp.GameMode.World.IIdentifiable">
            <summary>
                Contains an Identity property.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.IIdentifiable.Id">
            <summary>
                Gets the Identity of this instance.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.World.IWorldObject">
            <summary>
                Defines an object that is placed in the world.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.IWorldObject.Position">
            <summary>
                Gets or sets the position of this IWorldObject.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.Pickup.Create(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Int32)">
            <summary>
                Create a pickup in the game.
                It's the equivalent of call CreatePickup in a PAWN script.
            </summary>
            <param name="model">The model of the pickup</param>
            <param name="type">The pickup spawn type.</param>
            <param name="position">The position where the pickup should be spawned</param>
            <param name="virtualWorld">
                The virtual world ID of the pickup. By default, it will be -1 which shows the pickup in all
                worlds.
            </param>
            <returns>The created pickup or null if it cannot be created</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.Pickup.CreateStatic(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Int32)">
            <summary>
                Create a pickup in the game.
                It's the equivalent of call AddStaticPickup in a PAWN script.
                <seealso cref="!:http://wiki.sa-mp.com/wiki/CreatePickup"/>
            </summary>
            <param name="model">The model of the pickup</param>
            <param name="type">The pickup spawn type.</param>
            <param name="position">The position where the pickup should be spawned</param>
            <param name="virtualWorld">
                The virtual world ID of the pickup. By default, it will be -1 which shows the pickup in all
                worlds.
            </param>
            <returns>True if the pickup has been created</returns>
        </member>
        <member name="P:SampSharp.GameMode.World.Pickup.VirtualWorld">
            <summary>
                The virtualworld assigned to this pickup
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Pickup.Model">
            <summary>
                The model of the pickup.
                <seealso cref="!:http://wiki.sa-mp.com/wiki/Pickup_IDs"/> Model pickups id list
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Pickup.SpawnType">
            <summary>
                It's the type of the pickup.
                <seealso cref="!:http://wiki.sa-mp.com/wiki/PickupTypes"/> List of pickup types
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Pickup.Id">
            <summary>
                The ID of the Pickup.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.Pickup.Position">
            <summary>
                The position in the world of the pickup.
                After creation, a pickup <b>cannot</b> be moved. So any change of the position won't affect the in-game object.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.World.VehicleModelInfo">
            <summary>
                Contains vehicle category infos.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.VehicleModelInfo.#ctor(System.Int32,System.String,SampSharp.GameMode.Definitions.VehicleCategory)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.World.VehicleModelInfo"/> class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.VehicleModelInfo.ForVehicle(SampSharp.GameMode.World.GtaVehicle)">
            <summary>
                Returns an instance of VehicleModelInfo containing information about the given Vehicle.
            </summary>
            <param name="vehicle">The vehicle to find information about.</param>
            <returns>An instance of VehicleModelInfo containing information about the given Vehicle.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.VehicleModelInfo.ForVehicle(SampSharp.GameMode.Definitions.VehicleModelType)">
            <summary>
                Returns an instance of VehicleModelInfo containing information about the given VehicleModelType.
            </summary>
            <param name="model">The VehicleModelType to find information about.</param>
            <returns>An instance of VehicleModelInfo containing information about the given VehicleModelType.</returns>
        </member>
        <member name="P:SampSharp.GameMode.World.VehicleModelInfo.Type">
            <summary>
                Gets the id of this vehiclemodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.VehicleModelInfo.Name">
            <summary>
                Gets the name of this vehiclemodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.VehicleModelInfo.Category">
            <summary>
                Gets the category of this vehiclemodel.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.VehicleCategory">
            <summary>
                Contains all vehicle categories.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Airplane">
            <summary>
                Airplanes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Helicopter">
            <summary>
                Helicopters.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Bike">
            <summary>
                Bikes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Convertible">
            <summary>
                Convertibles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Industrial">
            <summary>
                Industrials.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Lowrider">
            <summary>
                Lowriders.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.OffRoad">
            <summary>
                Off Road.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.PublicService">
            <summary>
                Public Service Vehicles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Saloon">
            <summary>
                Saloons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Sport">
            <summary>
                Sport Vehicles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Station">
            <summary>
                Station Wagons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Boat">
            <summary>
                Boats.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Trailer">
            <summary>
                Trailers.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.Unique">
            <summary>
                Unique Vehicles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.RemoteControl">
            <summary>
                RC Vehicles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleCategory.TrainTrailer">
            <summary>
                Train trailers.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.Menu">
            <summary>
                Represents a menu
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Display.Menu.InvalidId">
            <summary>
                Gets the ID commonly returned by methods to point to no menu.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.Menu.#ctor(System.String,System.Single,System.Single,System.Collections.Generic.List{SampSharp.GameMode.Display.MenuColumn},System.Collections.Generic.List{SampSharp.GameMode.Display.MenuRow})">
            <summary>
                Initializes a new instance of the Menu class.
            </summary>
            <param name="title">The title of the menu.</param>
            <param name="x">The x-position of the menu on the screen.</param>
            <param name="y">The y-position of the menu on the screen.</param>
            <param name="columns">The columns to display in the menu.</param>
            <param name="rows">The rows to display in the menu.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Menu.Show(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Show this menu for the specified player.
            </summary>
            <param name="player">The player to show this menu for.</param>
            <returns>True when successfull, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Display.Menu.Hide(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Hides this menu for the specified player.
            </summary>
            <param name="player">The player to hide this menu for.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Menu.HideForAll">
            <summary>
                Hides this menu for all players that are viewing this menu.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Id">
            <summary>
                Gets the id of this menu.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Title">
            <summary>
                Gets or sets the title of this menu.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.X">
            <summary>
                Gets or sets the x-position of this menu on the screen.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Y">
            <summary>
                Gets or sets the y-position of this menu on the screen.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Viewers">
            <summary>
                Gets a list of viewers of this menu.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Columns">
            <summary>
                Gets a collection of columns in this menu.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Menu.Rows">
            <summary>
                Gets a collection of rows in this menu.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.MenuColumn">
            <summary>
                Represents a column in a <see cref="T:SampSharp.GameMode.Display.Menu"/>.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.MenuColumn.#ctor(System.String,System.Single)">
            <summary>
                Initializes a new instance of the MenuColumn class.
            </summary>
            <param name="caption">The caption of the column.</param>
            <param name="width">The width of the column.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.MenuColumn.#ctor(System.Single)">
            <summary>
                Initializes a new instance of the menuColumn structure.
            </summary>
            <param name="width">The width of the column.</param>
        </member>
        <member name="P:SampSharp.GameMode.Display.MenuColumn.Caption">
            <summary>
                Gets or sets the caption of this column.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.MenuColumn.Width">
            <summary>
                Gets ro sets the width if this column.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.MenuRow">
            <summary>
                Represents a row in a <see cref="T:SampSharp.GameMode.Display.Menu"/>.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.MenuRow.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the MenuRow class.
            </summary>
            <param name="col1Text">The text in the first column.</param>
            <param name="disabled">Whether this row should be disabled.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.MenuRow.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the MenuRow class.
            </summary>
            <param name="col1Text">The text in the first column.</param>
            <param name="col2Text">The text in the second column.</param>
            <param name="disabled">Whether this row should be disabled.</param>
        </member>
        <member name="P:SampSharp.GameMode.Display.MenuRow.Text">
            <summary>
                Gets or sets the text displayed in this row on each column.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.MenuRow.Disabled">
            <summary>
                Gets or sets whether this row is disabled.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.DialogResponseEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.DialogResponse"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerConnected"/>,
                <see cref="E:SampSharp.GameMode.BaseMode.PlayerSpawned"/>, <see cref="E:SampSharp.GameMode.BaseMode.PlayerEnterCheckpoint"/>,
                <see cref="E:SampSharp.GameMode.BaseMode.PlayerLeaveCheckpoint"/>, <see cref="E:SampSharp.GameMode.BaseMode.PlayerEnterRaceCheckpoint"/>,
                <see cref="E:SampSharp.GameMode.BaseMode.PlayerLeaveRaceCheckpoint"/>, <see cref="E:SampSharp.GameMode.BaseMode.PlayerRequestSpawn"/>,
                <see cref="E:SampSharp.GameMode.BaseMode.VehicleDamageStatusUpdated"/>, <see cref="E:SampSharp.GameMode.BaseMode.PlayerExitedMenu"/> or
                <see cref="E:SampSharp.GameMode.BaseMode.PlayerUpdate"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.GameModeEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.Initialized"/> or <see cref="E:SampSharp.GameMode.BaseMode.Exited"/>
                event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.GameModeEventArgs.#ctor">
            <summary>
                Initializes a new instance of the GameModeEventArgs class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.GameModeEventArgs.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the GameModeEventArgs class.
            </summary>
            <param name="success">Whether the event has been handled successfully.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.GameModeEventArgs.Success">
            <summary>
                Gets or sets whether this event has been handled sucessfully.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.DialogResponseEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
                Initializes a new instance of the DialogResponseEventArgs class.
            </summary>
            <param name="playerid">Id of the player.</param>
            <param name="dialogid">Id of the dialog.</param>
            <param name="response">Response of the dialogresponse.</param>
            <param name="listitem">Listitem of the dialogresponse.</param>
            <param name="inputtext">Inputtext of the dialogresponse.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.DialogResponseEventArgs.DialogId">
            <summary>
                Gets the id of dialog of this response.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.DialogResponseEventArgs.DialogButton">
            <summary>
                Gets the button clicked for this response.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.DialogResponseEventArgs.ListItem">
            <summary>
                Gets the index of the listitem clicked for this response.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.DialogResponseEventArgs.InputText">
            <summary>
                Gets the inputtext of this response.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.BulletHitType">
            <summary>
                Contains all things bullets can hit.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BulletHitType.None">
            <summary>
                Hit nothing.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BulletHitType.Player">
            <summary>
                Hit a player.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BulletHitType.Vehicle">
            <summary>
                Hit a vehicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BulletHitType.Object">
            <summary>
                Hit an GlobalObject.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.BulletHitType.PlayerObject">
            <summary>
                Hit a PlayerObject.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.CameraCut">
            <summary>
                Contains all camera cut styles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraCut.Move">
            <summary>
                Move the camera from one point to another.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CameraCut.Cut">
            <summary>
                Teleport the camera from one point to another.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.CarModType">
            <summary>
                Contains all modification types of vehicles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Spoiler">
            <summary>
                Car spoiler.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Hood">
            <summary>
                Car hood.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Roof">
            <summary>
                Car roof.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Sideskirt">
            <summary>
                Car sideskirts.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Lamps">
            <summary>
                Car lamps.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Nitro">
            <summary>
                Nitrogen.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Exhaust">
            <summary>
                Car exhaust.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Wheels">
            <summary>
                Car wheels.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Stereo">
            <summary>
                Car stereo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.Hydraulics">
            <summary>
                Car hydraulics.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.FrontBumper">
            <summary>
                Front car bumper.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.RearBumper">
            <summary>
                Rear car bumper.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.VentRight">
            <summary>
                Right car vent.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.CarModType.VentLeft">
            <summary>
                Left car vent.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.DialogStyle">
            <summary>
                Contains all dialogstyles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogStyle.MessageBox">
            <summary>
                A box with a caption, text and one or two buttons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogStyle.Input">
            <summary>
                A box with a caption, text, an inputbox and one or two buttons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogStyle.List">
            <summary>
                A box with a caption, a bunch of selectable items and one or two buttons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.DialogStyle.Password">
            <summary>
                A box with a caption, text, an password-inputbox and one or two buttons.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.EditObjectResponse">
            <summary>
                Contains all edit object responses.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.EditObjectResponse.Cancel">
            <summary>
                Editing has been canceled.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.EditObjectResponse.Final">
            <summary>
                The current is the final edit sate.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.EditObjectResponse.Update">
            <summary>
                The current is a updated edit state.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.FightStyle">
            <summary>
                Contains all fighting styles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Normal">
            <summary>
                Normal fighting style.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Boxing">
            <summary>
                Borxing fighting style.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Kungfu">
            <summary>
                Kung fu fighting style.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Kneehead">
            <summary>
                Kneehead fighting style.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Grabkick">
            <summary>
                Grabkick fighting style.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.FightStyle.Elbow">
            <summary>
                Elbow fighting style.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.Keys">
            <summary>
                Contains all actionkeys.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Action">
            <summary>
                The action key. (Default: Tab, onfoot. ALT GR / LCTRL / NUM 0, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Crouch">
            <summary>
                The crouch key. (Default: C, onfoot, H / CAPSLOCK, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Fire">
            <summary>
                The fire key. (Default: LCTRL / LMB, onfoot. LALT, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Sprint">
            <summary>
                The sprint key. (Default: SPACE, onfoot. W, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.SecondaryAttack">
            <summary>
                Secondary attack key. (Default: ENTER, onfoot. ENTER, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Jump">
            <summary>
                Jump key. (Default: LSHIFT, onfoot)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.LookRight">
            <summary>
                Look right key. (Default: E, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Handbrake">
            <summary>
                Handbrake key. (Default: RMB, onfoot. SPACE, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Aim">
            <summary>
                Aim key. (Default: RMB, onfoot. SPACE, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.LookLeft">
            <summary>
                Look left key. (Default: Q, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Submission">
            <summary>
                Submission key. (Default: NUM 1 / MMB, onfoot. 2 / NUM +, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.LookBehind">
            <summary>
                Look behind key, look left + look right combined. (Default: NUM 1 / MMB, onfoot. 2, invehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Walk">
            <summary>
                Walk key. (Default: LALT, onfoot)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.AnalogUp">
            <summary>
                Analog up key. (Default: NUM 8)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.AnalogDown">
            <summary>
                Analog down key. (Default: NUM 2)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.AnalogLeft">
            <summary>
                Analog left key. (Default: NUM 4)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.AnalogRight">
            <summary>
                Analog right key. (Default: NUM 6)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.Yes">
            <summary>
                Yes key. (Default: Y)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.No">
            <summary>
                No key. (Default: N)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Keys.CtrlBack">
            <summary>
                Controll back key. (Default: H)
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.Limits">
            <summary>
                Contains all limit definitions.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.MaxPlayerAttachedObjects">
            <summary>
                This is the number of attached indexes available ie 10 = 0-9
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.MaxChatbubbleLength">
            <summary>
                The maximum length of chatbubble text.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.MaxPlayerName">
            <summary>
                The maximum length of a playername.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.MaxPlayers">
            <summary>
                The maximum number of players.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.MaxVehicles">
            <summary>
                The maximum number of vehicles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.MaxObjects">
            <summary>
                The maximum number of global objects.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.MaxGangZones">
            <summary>
                The maximum number of gangzones.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.MaxTextDraws">
            <summary>
                The maximum number of textdraws.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.MaxPlayerTextDraws">
            <summary>
                The maximum number of player-textdraws.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.MaxMenus">
            <summary>
                The maximum number of menus.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.Max_3DTextGlobal">
            <summary>
                The maximum number of global 3D textlabels.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.Max_3DTextPlayer">
            <summary>
                The maximum number of player 3D textlabels.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Limits.MaxPickups">
            <summary>
                The maximum number of pickups.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.MapIconType">
            <summary>
                Contains all mapicon styles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.MapIconType.Local">
            <summary>
                Displays in the player's local are.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.MapIconType.Global">
            <summary>
                Displays always.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.MapIconType.LocalCheckPoint">
            <summary>
                Displays in the player's local area and has a checkpoint marker.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.MapIconType.GlobalCheckPoint">
            <summary>
                Displays always and has a checkpoint marker.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.Misc">
            <summary>
                Misc defined values.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Misc.InvalidPlayerId">
            <summary>
                Invalid player id.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Misc.InvalidVehicleId">
            <summary>
                Invalid vehicle id.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Misc.NoTeam">
            <summary>
                No team.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Misc.InvalidObjectId">
            <summary>
                Invalid object id.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Misc.InvalidMenu">
            <summary>
                Invalid menu id.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Misc.InvalidTextDraw">
            <summary>
                Invalid textdraw id.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Misc.InvalidGangZone">
            <summary>
                Invalid gangzone id.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Misc.Invalid_3DTextId">
            <summary>
                Invalid 3D textlabel id.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.ObjectMaterialSize">
            <summary>
                Contains all object material sizes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X32X32">
            <summary>
                32 x 32
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X64X32">
            <summary>
                64 x 32
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X64X64">
            <summary>
                64 x 64
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X128X32">
            <summary>
                128 x 32
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X128X64">
            <summary>
                128 x 64
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X128X128">
            <summary>
                128 x 128
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X256X32">
            <summary>
                256 x 32
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X256X64">
            <summary>
                256 x 64
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X256X128">
            <summary>
                256 x 128
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X256X256">
            <summary>
                256 x 256
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X512X64">
            <summary>
                512 x 64
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X512X128">
            <summary>
                512 x 128
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X512X256">
            <summary>
                512 x 256
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialSize.X512X512">
            <summary>
                512 x 512
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.ObjectMaterialTextAlign">
            <summary>
                Contains all object material alignments.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialTextAlign.Left">
            <summary>
                Align left.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialTextAlign.Center">
            <summary>
                Align center.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.ObjectMaterialTextAlign.Right">
            <summary>
                Align right.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.PlayerClickSource">
            <summary>
                Contains all player click sources.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerClickSource.Scoreboard">
            <summary>
                Clicked the player on the scoreboard.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.PlayerMarkersMode">
            <summary>
                Contains all PlayerMarker modes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerMarkersMode.Off">
            <summary>
                No makers.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerMarkersMode.Global">
            <summary>
                All markers.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerMarkersMode.Streamed">
            <summary>
                All markers within the streamed area.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.PlayerRecordingType">
            <summary>
                Contains all PlayerRecording types.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerRecordingType.None">
            <summary>
                Nothing.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerRecordingType.Driver">
            <summary>
                As a driver.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerRecordingType.OnFoot">
            <summary>
                As a pedestrian
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.PlayerState">
            <summary>
                Contains all player states.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.None">
            <summary>
                No state.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.OnFoot">
            <summary>
                Player is on foot.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.Driving">
            <summary>
                Player is driving a vehicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.Passenger">
            <summary>
                Player is in a vehicle as passenger.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.ExitVehicle">
            <summary>
                Player is exiting a vehicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.EnterVehicleDriver">
            <summary>
                Player is entering a vehicle as driver.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.EnterVehiclePassenger">
            <summary>
                Player is entering a vehicle as passenger.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.Wasted">
            <summary>
                Player is dead.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.Spawned">
            <summary>
                Player has spawned.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerState.Spectating">
            <summary>
                Player is spectating.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.PlayerVarType">
            <summary>
                Contains all playervar types.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerVarType.None">
            <summary>
                Var does not exist.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerVarType.Int">
            <summary>
                Var as an integer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerVarType.String">
            <summary>
                Var is a string.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.PlayerVarType.Float">
            <summary>
                Var is a float.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.SpecialAction">
            <summary>
                Contains all special actions.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.None">
            <summary>
                Nothing.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Duck">
            <summary>
                Player is ducking.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Usejetpack">
            <summary>
                Player is using a jetpack.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.EnterVehicle">
            <summary>
                Player is entering a vehicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.ExitVehicle">
            <summary>
                Player is leaving a vehicle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Dance1">
            <summary>
                Player is dancing. (Style 1)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Dance2">
            <summary>
                Player is dancing. (Style 2)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Dance3">
            <summary>
                Player is dancing. (Style 3)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Dance4">
            <summary>
                Player is dancing. (Style 4)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.HandsUp">
            <summary>
                Player is holding his hands up.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.UseCellphone">
            <summary>
                Player is using a cellphone.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Sitting">
            <summary>
                Player is sitting.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.StopUseCellphone">
            <summary>
                Player stops using a cellphone.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.DrinkBeer">
            <summary>
                Player is drinking a beer.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.SmokeCiggy">
            <summary>
                Player is smokking a cigarette.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.DrinkWine">
            <summary>
                Player is drinking whine.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.DrinkSprunk">
            <summary>
                Player is drinking sprunk.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Cuffed">
            <summary>
                Player is cuffed.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpecialAction.Carry">
            <summary>
                PLayer is carrying.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.SpectateMode">
            <summary>
                Contains all specating modes.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpectateMode.Normal">
            <summary>
                Normal spectating mode.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpectateMode.Fixed">
            <summary>
                Player is looking from a fixed point.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.SpectateMode.Side">
            <summary>
                Attached to the side.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.TextDrawFont">
            <summary>
                Contains all fonts.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.Diploma">
            <summary>
                Font 0, also known as Diploma.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.Normal">
            <summary>
                Font 1, also known as Normal.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.Slim">
            <summary>
                Font 2, also known as Slim.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.Pricedown">
            <summary>
                Font 3, also known as Pricedown.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.DrawSprite">
            <summary>
                Font used to draw sprites.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.TextDrawFont.PreviewModel">
            <summary>
                Font used to draw model previews.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.VehicleModelInfoType">
            <summary>
                Contains all vehiclemodel info types.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.Size">
            <summary>
                Vehicle size
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.FrontSeat">
            <summary>
                Position of the front seat. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.RearSeat">
            <summary>
                Position of the rear seat. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.PetrolCap">
            <summary>
                Position of the fuel cap. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.WheelsFront">
            <summary>
                Position of the front wheels. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.WheelsRear">
            <summary>
                Position of the rear wheels. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.WheelsMiddle">
            <summary>
                Position of the middle wheels, applies to vehicles with 3 axes. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.FrontBumperZ">
            <summary>
                Height of the front bumper. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleModelInfoType.RearBumperZ">
            <summary>
                Height of the rear bumper. (calculated from the center of the vehicle)
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.VehicleParams">
            <summary>
                Contains all vehicle param values.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleParams.Unset">
            <summary>
                Value has not been set.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleParams.Off">
            <summary>
                Value is off.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.VehicleParams.On">
            <summary>
                Value is on.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.Weapon">
            <summary>
                Contains all weapons.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.None">
            <summary>
                No weapon.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Unarmed">
            <summary>
                No weapon.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Brassknuckle">
            <summary>
                Brask knuckles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Golfclub">
            <summary>
                Golf Club.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Nitestick">
            <summary>
                Nitestick.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Knife">
            <summary>
                Knife.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Bat">
            <summary>
                Baseball Bat.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Shovel">
            <summary>
                Shovel.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Poolstick">
            <summary>
                Pool Cue.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Katana">
            <summary>
                Katana (sword).
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Chainsaw">
            <summary>
                Chainsaw
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.DoubleEndedDildo">
            <summary>
                Double-ended Dildo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Dildo">
            <summary>
                Dildo.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Vibrator">
            <summary>
                Vibrator.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.SilverVibrator">
            <summary>
                Silver Vibrator.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Flower">
            <summary>
                Flowers.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Cane">
            <summary>
                Cane.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Teargas">
            <summary>
                Tear Gas.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Moltov">
            <summary>
                Molotov Cockail.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Colt45">
            <summary>
                9mm Colt45 pistol.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Silenced">
            <summary>
                Silenced 9mm Colt45 pistol.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Deagle">
            <summary>
                DesertEagle pistol.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Shotgun">
            <summary>
                Shotgun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Sawedoff">
            <summary>
                Sawnoff Shotgun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.CombatShotgun">
            <summary>
                Combat Shotgun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Uzi">
            <summary>
                Micro SMG/Uzi.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.MP5">
            <summary>
                MP5
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.AK47">
            <summary>
                AK-47.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.M4">
            <summary>
                M4.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Tec9">
            <summary>
                Tec-9.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Rifle">
            <summary>
                Country Rifle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Sniper">
            <summary>
                Sniper Rifle.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.RocketLauncher">
            <summary>
                RPG.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.HeatSeeker">
            <summary>
                Heat Seeking Rocket.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.FlameThrower">
            <summary>
                Flamethrower.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Minigun">
            <summary>
                Minigun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.SatchelCharge">
            <summary>
                Satchel Charge.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Detonator">
            <summary>
                Detonator.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Spraycan">
            <summary>
                Spraycan.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.FireExtinguisher">
            <summary>
                Fire Extinguisher.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Camera">
            <summary>
                Camera.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.NightVisionGoggles">
            <summary>
                Night Vision Goggles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.ThermalGoggles">
            <summary>
                Thermal Goggles.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Parachute">
            <summary>
                Parachute.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.FakePistol">
            <summary>
                ???
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Vehicle">
            <summary>
                Vehicle
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.HelicopterBlades">
            <summary>
                Helicopter Blades.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Explosion">
            <summary>
                Explosion.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Drown">
            <summary>
                Drowned.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Collision">
            <summary>
                Collision
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Connect">
            <summary>
                Connected. (use with deathmessages)
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.Weapon.Disconnect">
            <summary>
                Disconnected. (use with deathmessages)
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.WeaponSkill">
            <summary>
                Contains all weapon skills types.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.Pistol">
            <summary>
                Pistol skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.PistolSilenced">
            <summary>
                Silenced pistol skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.DesertEagle">
            <summary>
                Desert eagle skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.Shotgun">
            <summary>
                Shotgun skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.SawnoffShotgun">
            <summary>
                Sawn-off shotgun skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.Spas12Shotgun">
            <summary>
                Combat shotgun skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.MicroUzi">
            <summary>
                Micro uzi skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.MP5">
            <summary>
                MP5 skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.AK47">
            <summary>
                AK47 skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.M4">
            <summary>
                M4 skills.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponSkill.SniperRifle">
            <summary>
                Sniper rifle skills.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Definitions.WeaponState">
            <summary>
                Contains all weapon states.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponState.Unknown">
            <summary>
                Unknown state.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponState.NoBullets">
            <summary>
                Weapon is out of bullets.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponState.LastBullet">
            <summary>
                Last bullet in gun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponState.MoreBullets">
            <summary>
                More bullets in gun.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Definitions.WeaponState.Reloading">
            <summary>
                Weapon is reloading.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.ConnectionEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.IncomingConnection"/> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.ConnectionEventArgs.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
                Initializes a new instance of the ConnectionEventArgs class.
            </summary>
            <param name="playerid">Id of the player trying to connect.</param>
            <param name="ipAddress">Ip of the connection.</param>
            <param name="port">Port of the connection.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.ConnectionEventArgs.PlayerId">
            <summary>
                Gets the id of the player trying to connect.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.ConnectionEventArgs.IpAddress">
            <summary>
                Gets the ip of this connection.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.ConnectionEventArgs.Port">
            <summary>
                Gets the port of this connection.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.ObjectEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.ObjectMoved"/> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.ObjectEventArgs.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the ObjectEventArgs class.
            </summary>
            <param name="objectid">Id of the object.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.ObjectEventArgs.ObjectId">
            <summary>
                Gets the id of the object.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.VehicleDied"/>,
                <see cref="E:SampSharp.GameMode.BaseMode.PlayerExitVehicle"/>, <see cref="E:SampSharp.GameMode.BaseMode.VehicleStreamIn"/> or
                <see cref="E:SampSharp.GameMode.BaseMode.VehicleStreamOut"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerClickMapEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickMap"/> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.PlayerClickMapEventArgs.#ctor(System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Initializes a new instance of the PlayerClickMapEventArgs class.
            </summary>
            <param name="playerid">Id of the player.</param>
            <param name="position">Position the player has clicked at.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerClickMapEventArgs.Position">
            <summary>
                Gets the position the player has clicked at.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerClickPlayerEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickPlayer"/> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.PlayerClickPlayerEventArgs.#ctor(System.Int32,System.Int32,SampSharp.GameMode.Definitions.PlayerClickSource)">
            <summary>
                Intializes a new instance of the PlayerClickPlayerEventArgs class.
            </summary>
            <param name="playerid">Id of the player.</param>
            <param name="clickedplayerid">Id of the clicked player.</param>
            <param name="source">PlayerClickSource of the event.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerClickPlayerEventArgs.ClickedPlayerId">
            <summary>
                Gets the id of the clicked player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerClickPlayerEventArgs.ClickedPlayer">
            <summary>
                Gets the clicked player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerClickPlayerEventArgs.PlayerClickSource">
            <summary>
                Gets the PlayerClickSource of this event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerClickTextDrawEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickTextDraw"/> or
                <see cref="E:SampSharp.GameMode.BaseMode.PlayerClickPlayerTextDraw"/> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.PlayerClickTextDrawEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the PlayerClickTextDrawEventArgs class.
            </summary>
            <param name="playerid">Id of the player.</param>
            <param name="textdrawid">Id of the textdraw.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerClickTextDrawEventArgs.TextDrawId">
            <summary>
                Gets the id of the textdraw.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerDamageEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerTakeDamage"/> or
                <see cref="E:SampSharp.GameMode.BaseMode.PlayerGiveDamage"/> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.PlayerDamageEventArgs.#ctor(System.Int32,System.Int32,System.Single,SampSharp.GameMode.Definitions.Weapon,SampSharp.GameMode.Definitions.BodyPart)">
            <summary>
                Initializes a new instance of the PlayerDamageEventArgs class.
            </summary>
            <param name="playerid">Id of the player.</param>
            <param name="otherplayerid">Id of the other player.</param>
            <param name="amount">Amount of damage done.</param>
            <param name="weapon">Weapon used to damage another.</param>
            <param name="bodypart">BodyPart shot at.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerDamageEventArgs.OtherPlayerId">
            <summary>
                Gets the id of the other player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerDamageEventArgs.OtherPlayer">
            <summary>
                Gets the other player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerDamageEventArgs.Amount">
            <summary>
                Gets the amount of damage done.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerDamageEventArgs.Weapon">
            <summary>
                Gets the Weapon used to damage another player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerDamageEventArgs.BodyPart">
            <summary>
                Gets the BodyPart shot at.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerDeathEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerDied"/> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.PlayerDeathEventArgs.#ctor(System.Int32,System.Int32,SampSharp.GameMode.Definitions.Weapon)">
            <summary>
                Initializes a new instance of the PlayerDeathEventArgs class.
            </summary>
            <param name="playerid">Id of the player.</param>
            <param name="killerid">Id of the killer.</param>
            <param name="reason">Reason of the death.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerDeathEventArgs.KillerId">
            <summary>
                Gets the id of the killer.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerDeathEventArgs.Killer">
            <summary>
                Gets the killer.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerDeathEventArgs.DeathReason">
            <summary>
                Gets the reason of the death.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerDisconnectedEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerDisconnected"/> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.PlayerDisconnectedEventArgs.#ctor(System.Int32,SampSharp.GameMode.Definitions.DisconnectReason)">
            <summary>
                Initializes a new instance of the PlayerDisconnectedEventArgs class
            </summary>
            <param name="playerid">Id of the player disconnected.</param>
            <param name="reason">DisconnectReason.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerDisconnectedEventArgs.Reason">
            <summary>
                Gets the reason of the disconnection.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerEditAttachedObjectEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEditAttachedObject"/> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Events.PlayerEditAttachedObjectEventArgs.#ctor(System.Int32,SampSharp.GameMode.Definitions.EditObjectResponse,System.Int32,System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector)">
            <summary>
                Initializes a new instance of the PlayerEditAttachedObjectEventArgs class.
            </summary>
            <param name="playerid">Id of the player.</param>
            <param name="response">EditObjectResponse.</param>
            <param name="index">Index of the attached object.</param>
            <param name="modelid">Model of the attached object.</param>
            <param name="boneid">Id of the bone the object was attached to.</param>
            <param name="offset">Offset of the attached object.</param>
            <param name="rotation">Rotation of the attached object.</param>
            <param name="scale">Scale of the attached object.</param>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerEditAttachedObjectEventArgs.EditObjectResponse">
            <summary>
                Gets the EditObjectResponse.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerEditAttachedObjectEventArgs.Index">
            <summary>
                Gets the index of the attachedobject.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerEditAttachedObjectEventArgs.ModelId">
            <summary>
                Gets the id of the model.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerEditAttachedObjectEventArgs.BoneId">
            <summary>
                Gets the boneid the object was attached to.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerEditAttachedObjectEventArgs.Offset">
            <summary>
                Gets the offset of the attached object.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerEditAttachedObjectEventArgs.Rotation">
            <summary>
                Gets the rotation of the attached object.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Events.PlayerEditAttachedObjectEventArgs.Scale">
            <summary>
                Gets the scale of the attached object.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerEditObjectEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEditObject"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerEnterModShopEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEnterExitModShop"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerEnterVehicleEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerEnterVehicle"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerInteriorChangedEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerInteriorChanged"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerKeyStateChanged"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerObjectEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerObjectMoved"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerPickupEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerPickUpPickup"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerRequestClassEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerRequestClass"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerSelectedMenuRowEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerSelectedMenuRow"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerSelectObjectEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerSelectObject"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerStateEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerStateChanged"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.PlayerTextEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerText"/> or
                <see cref="E:SampSharp.GameMode.BaseMode.PlayerCommandText"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.RconEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.RconCommand"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.RconLoginAttemptEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.RconLoginAttempt"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.StreamPlayerEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerStreamIn"/> or
                <see cref="E:SampSharp.GameMode.BaseMode.PlayerStreamOut"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.UnoccupiedVehicleUpdated"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.VehicleEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.VehicleSpawned"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.VehicleModEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.VehicleMod"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.VehiclePaintjobEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.VehiclePaintjobApplied"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.VehicleResprayedEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.VehicleResprayed"/> event.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Events.WeaponShotEventArgs">
            <summary>
                Provides data for the <see cref="E:SampSharp.GameMode.BaseMode.PlayerWeaponShot"/> event.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.LinqExtention.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the first item matching an expression in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.LinqExtention.FindLastIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the last item matching an expression in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the last matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.LinqExtention.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the first occurence of an item in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the first matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Helpers.LinqExtention.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the last occurence of an item in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the last matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="T:SampSharp.GameMode.LogWriter">
            <summary>
                A TextWriter that writes all input to the serverlog.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.BaseMode">
            <summary>
                Represents a SA:MP gamemode.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.#ctor">
            <summary>
                Initalizes a new instance of the BaseMode class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.SetGameModeText(System.String)">
            <summary>
                Set the name of the game mode, which appears in the server browser.
            </summary>
            <param name="text">GameMode name.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.ShowPlayerMarkers(SampSharp.GameMode.Definitions.PlayerMarkersMode)">
            <summary>
                A function that can be used in <see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/> to enable or disable the players markers,
                which would normally be shown on the radar. If you want to change the marker settings at some other point in the
                gamemode, have a look at <see cref="M:SampSharp.GameMode.World.GtaPlayer.SetPlayerMarker(SampSharp.GameMode.World.GtaPlayer,SampSharp.GameMode.SAMP.Color)"/> which does exactly that.
            </summary>
            <param name="mode">The mode you want to use.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.ShowNameTags(System.Boolean)">
            <summary>
                Toggle the drawing of player nametags, healthbars and armor bars above players.
            </summary>
            <param name="show">False to disable, True to enable.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.SetWorldTime(System.Int32)">
            <summary>
                Sets the world time to a specific hour.
            </summary>
            <param name="hour">Which time to set.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.SetWeather(System.Int32)">
            <summary>
                Set the world weather for all players.
            </summary>
            <param name="weatherid">The weather to set.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.UsePlayerPedAnims">
            <summary>
                Uses standard player walking animation (animation of CJ) instead of custom animations for every skin (e.g. skating
                for skater skins).
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.EnableVehicleFriendlyFire">
            <summary>
                Enable friendly fire for team vehicles.
            </summary>
            <remarks>
                Players will be unable to damage teammates' vehicles (<see cref="P:SampSharp.GameMode.World.GtaPlayer.Team"/> must be used!)
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.SetNameTagDrawDistance(System.Single)">
            <summary>
                Set the maximum distance to display the names of players.
            </summary>
            <param name="distance">The distance to set.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.DisableInteriorEnterExits">
            <summary>
                Disable all the interior entrances and exits in the game (the yellow arrows at doors).
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.SetTeamCount(System.Int32)">
            <summary>
                This function is used to change the amount of teams used in the gamemode. It has no obvious way of being used, but
                can help to indicate the number of teams used for better (more effective) internal handling. This function should
                only be used in the <see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/> callback.
            </summary>
            <remarks>
                You can pass 2 billion here if you like, this function has no effect at all.
            </remarks>
            <param name="count">Number of teams the gamemode knows.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the spawnpoint of this class.</param>
            <param name="zAngle">The direction in which the player should face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the primary spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawnweapon.</param>
            <returns>
                The ID of the class which was just added. 300 if the class limit (300) was reached. The highest possible class
                ID is 299.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the spawnpoint of this class.</param>
            <param name="zAngle">The direction in which the player should face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the primary spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <returns>
                The ID of the class which was just added. 300 if the class limit (300) was reached. The highest possible class
                ID is 299.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the spawnpoint of this class.</param>
            <param name="zAngle">The direction in which the player should face after spawning.</param>
            <param name="weapon">The spawn-weapon for the player.</param>
            <param name="weaponAmmo">The amount of ammunition for the spawnweapon.</param>
            <returns>
                The ID of the class which was just added. 300 if the class limit (300) was reached. The highest possible class
                ID is 299.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,SampSharp.GameMode.World.Vector,System.Single)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the spawnpoint of this class.</param>
            <param name="zAngle">The direction in which the player should face after spawning.</param>
            <returns>
                The ID of the class which was just added. 300 if the class limit (300) was reached. The highest possible class
                ID is 299.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="teamid">The team you want the player to spawn in.</param>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the class' spawn position.</param>
            <param name="zAngle">The direction in which the player will face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the first spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawnweapon.</param>
            <returns>The ID of the class that was just created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="teamid">The team you want the player to spawn in.</param>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the class' spawn position.</param>
            <param name="zAngle">The direction in which the player will face after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the first spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <returns>The ID of the class that was just created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="teamid">The team you want the player to spawn in.</param>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the class' spawn position.</param>
            <param name="zAngle">The direction in which the player will face after spawning.</param>
            <param name="weapon">The spawn-weapon for the player.</param>
            <param name="weaponAmmo">The amount of ammunition for the spawnweapon.</param>
            <returns>The ID of the class that was just created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AddPlayerClass(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Single)">
            <summary>
                Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.
            </summary>
            <param name="teamid">The team you want the player to spawn in.</param>
            <param name="modelid">The skin which the player will spawn with.</param>
            <param name="position">The coordinate of the class' spawn position.</param>
            <param name="zAngle">The direction in which the player will face after spawning.</param>
            <returns>The ID of the class that was just created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.EnableStuntBonusForAll(System.Boolean)">
            <summary>
                Enables or disables stunt bonuses for all players.
            </summary>
            <param name="enable">True to enable stunt bonuses, False to disable.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.LimitGlobalChatRadius(System.Single)">
            <summary>
                Set a radius limitation for the chat. Only players at a certain distance from the player will see their message in
                the chat. Also changes the distance at which a player can see other players on the map at the same distance.
            </summary>
            <param name="chatRadius">Radius limit.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.LimitPlayerMarkerRadius(System.Single)">
            <summary>
                Set the player marker radius.
            </summary>
            <param name="markerRadius">The radius that markers will show at.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.ManualVehicleEngineAndLights">
            <summary>
                Use this function before any player connects (<see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/>) to tell all clients that the
                script will control vehicle engines and lights. This prevents the game automatically turning the engine on/off when
                players enter/exit vehicles and headlights automatically coming on when it is dark.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.Exit">
            <summary>
                Ends and restarts the gamemode.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.AllowInteriorWeapons(System.Boolean)">
            <summary>
                Toggle whether the usage of weapons in interiors is allowed or not.
            </summary>
            <param name="allow">True to enable weapons in interiors (enabled by default), False to disable weapons in interiors.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.EnableTirePopping(System.Boolean)">
            <summary>
                With this function you can enable or disable tire popping.
            </summary>
            <param name="enable">True to enable, False to disable tire popping.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.SendRconCommand(System.String)">
            <summary>
                Sends an RCON command.
            </summary>
            <param name="command">The RCON command to be executed.</param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnTimerTick(System.Int32,System.Object)">
            <summary>
                This callback is triggered when a timer ticks.
            </summary>
            <param name="timerid">The ID of the ticking timer.</param>
            <param name="args">The args object as parsed with <see cref="M:SampSharp.GameMode.Natives.Native.SetTimer(System.Int32,System.Boolean,System.Object)"/>.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnGameModeInit">
            <summary>
                This callback is triggered when the gamemode starts.
            </summary>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnGameModeExit">
            <summary>
                This callback is called when a gamemode ends.
            </summary>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerConnect(System.Int32)">
            <summary>
                This callback is called when a player connects to the server.
            </summary>
            <param name="playerid">The ID of the player that connected.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerDisconnect(System.Int32,System.Int32)">
            <summary>
                This callback is called when a player disconnects from the server.
            </summary>
            <param name="playerid">ID of the player that disconnected.</param>
            <param name="reason">The reason for the disconnection.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerCleanup(SampSharp.GameMode.Events.PlayerDisconnectedEventArgs)">
            <summary>
                This callback is called after a player disconnects from the server.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerDisconnectedEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerSpawn(System.Int32)">
            <summary>
                This callback is called when a player spawns.
            </summary>
            <param name="playerid">The ID of the player that spawned.</param>
            <returns>Return False in this callback to force the player back to class selection when they next respawn.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerDeath(System.Int32,System.Int32,System.Int32)">
            <summary>
                This callback is called when a player dies.
            </summary>
            <param name="playerid">The ID of the player that died.</param>
            <param name="killerid">
                The ID of the player that killed the player who died, or <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidPlayerId"/> if
                there was none.
            </param>
            <param name="reason">The ID of the reason for the player's death.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleSpawn(System.Int32)">
            <summary>
                This callback is called when a vehicle respawns.
            </summary>
            <param name="vehicleid">The ID of the vehicle that spawned.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleDeath(System.Int32,System.Int32)">
            <summary>
                This callback is called when a vehicle is destroyed - either by exploding or becoming submerged in water.
            </summary>
            <remarks>
                This callback will also be called when a vehicle enters water, but the vehicle can be saved from destruction by
                teleportation or driving out (if only partially submerged). The callback won't be called a second time, and the
                vehicle may disappear when the driver exits, or after a short time.
            </remarks>
            <param name="vehicleid">The ID of the vehicle that was destroyed.</param>
            <param name="killerid">
                The ID of the player that reported (synced) the vehicle's destruction (name is misleading).
                Generally the driver or a passenger (if any) or the closest player.
            </param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerText(System.Int32,System.String)">
            <summary>
                Called when a player sends a chat message.
            </summary>
            <param name="playerid">The ID of the player who typed the text.</param>
            <param name="text">The text the player typed.</param>
            <returns>Returning False in this callback will stop the text from being sent.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerCommandText(System.Int32,System.String)">
            <summary>
                This callback is called when a player enters a command into the client chat window, e.g. /help.
            </summary>
            <param name="playerid">The ID of the player that executed the command.</param>
            <param name="cmdtext">The command that was executed (including the slash).</param>
            <returns>False if the command was not processed, otherwise True.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerRequestClass(System.Int32,System.Int32)">
            <summary>
                Called when a player changes class at class selection (and when class selection first appears).
            </summary>
            <param name="playerid">The ID of the player that changed class.</param>
            <param name="classid">The ID of the current class being viewed.</param>
            <returns>
                Returning False in this callback will prevent the player from spawning. The player can be forced to spawn when
                <see cref="M:SampSharp.GameMode.Natives.Native.SpawnPlayer(System.Int32)"/> is used, however the player will re-enter class selection the next time they die.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEnterVehicle(System.Int32,System.Int32,System.Boolean)">
            <summary>
                This callback is called when a player starts to enter a vehicle, meaning the player is not in vehicle yet at the
                time this callback is called.
            </summary>
            <param name="playerid">ID of the player who attempts to enter a vehicle.</param>
            <param name="vehicleid">ID of the vehicle the player is attempting to enter.</param>
            <param name="ispassenger">False if entering as driver. True if entering as passenger.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerExitVehicle(System.Int32,System.Int32)">
            <summary>
                This callback is called when a player exits a vehicle.
            </summary>
            <remarks>
                Not called if the player falls off a bike or is removed from a vehicle by other means such as using
                <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerPos(System.Int32,SampSharp.GameMode.World.Vector)"/>.
            </remarks>
            <param name="playerid">The ID of the player who exited the vehicle.</param>
            <param name="vehicleid">The ID of the vehicle the player is exiting.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerStateChange(System.Int32,System.Int32,System.Int32)">
            <summary>
                This callback is called when a player exits a vehicle.
            </summary>
            <remarks>
                Not called if the player falls off a bike or is removed from a vehicle by other means such as using
                <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerPos(System.Int32,SampSharp.GameMode.World.Vector)"/>.
            </remarks>
            <param name="playerid">The ID of the player that changed state.</param>
            <param name="newstate">The player's new state.</param>
            <param name="oldstate">The player's previous state.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEnterCheckpoint(System.Int32)">
            <summary>
                This callback is called when a player enters the checkpoint set for that player.
            </summary>
            <param name="playerid">The player who entered the checkpoint.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerLeaveCheckpoint(System.Int32)">
            <summary>
                This callback is called when a player leaves the checkpoint set for that player.
            </summary>
            <param name="playerid">The player who left the checkpoint.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEnterRaceCheckpoint(System.Int32)">
            <summary>
                This callback is called when a player enters a race checkpoint.
            </summary>
            <param name="playerid">The ID of the player who entered the race checkpoint.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerLeaveRaceCheckpoint(System.Int32)">
            <summary>
                This callback is called when a player leaves the race checkpoint.
            </summary>
            <param name="playerid">The player who left the race checkpoint.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnRconCommand(System.String)">
            <summary>
                This callback is called when a command is sent through the server console, remote RCON, or via the in-game /rcon
                command.
            </summary>
            <param name="command">A string containing the command that was typed, as well as any passed parameters.</param>
            <returns>
                False if the command was not processed, it will be passed to another script or True if the command was
                processed, will not be passed to other scripts.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerRequestSpawn(System.Int32)">
            <summary>
                Called when a player attempts to spawn via class selection.
            </summary>
            <param name="playerid">The ID of the player who requested to spawn.</param>
            <returns>Returning False in this callback will prevent the player from spawning.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnObjectMoved(System.Int32)">
            <summary>
                This callback is called when an object is moved after <see cref="M:SampSharp.GameMode.Natives.Native.MoveObject(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> (when it stops moving).
            </summary>
            <remarks>
                SetObjectPos does not work when used in this callback. To fix it, delete and re-create the object, or use a timer.
            </remarks>
            <param name="objectid">The ID of the object that was moved.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerObjectMoved(System.Int32,System.Int32)">
            <summary>
                This callback is called when a player object is moved after <see cref="M:SampSharp.GameMode.Natives.Native.MovePlayerObject(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> (when it stops
                moving).
            </summary>
            <param name="playerid">The playerid the object is assigned to.</param>
            <param name="objectid">The ID of the player-object that was moved.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerPickUpPickup(System.Int32,System.Int32)">
            <summary>
                Called when a player picks up a pickup created with <see cref="M:SampSharp.GameMode.Natives.Native.CreatePickup(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32)"/>.
            </summary>
            <param name="playerid">The ID of the player that picked up the pickup.</param>
            <param name="pickupid">The ID of the pickup, returned by <see cref="M:SampSharp.GameMode.Natives.Native.CreatePickup(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32)"/>.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleMod(System.Int32,System.Int32,System.Int32)">
            <summary>
                This callback is called when a vehicle is modded.
            </summary>
            <remarks>
                This callback is not called by <see cref="M:SampSharp.GameMode.Natives.Native.AddVehicleComponent(System.Int32,System.Int32)"/>.
            </remarks>
            <param name="playerid">The ID of the driver of the vehicle.</param>
            <param name="vehicleid">The ID of the vehicle which is modded.</param>
            <param name="componentid">The ID of the component which was added to the vehicle.</param>
            <returns>Return False to desync the mod (or an invalid mod) from propagating and / or crashing players.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnEnterExitModShop(System.Int32,System.Int32,System.Int32)">
            <summary>
                This callback is called when a player enters or exits a mod shop.
            </summary>
            <param name="playerid">The ID of the player that entered or exited the modshop.</param>
            <param name="enterexit">1 if the player entered or 0 if they exited.</param>
            <param name="interiorid">The interior ID of the modshop that the player is entering (or 0 if exiting).</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehiclePaintjob(System.Int32,System.Int32,System.Int32)">
            <summary>
                Called when a player changes the paintjob of their vehicle (in a modshop).
            </summary>
            <param name="playerid">The ID of the player whos vehicle is modded.</param>
            <param name="vehicleid">The ID of the vehicle that changed paintjob.</param>
            <param name="paintjobid">The ID of the new paintjob.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleRespray(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                The callback name is deceptive, this callback is called when a player exits a mod shop, regardless of whether the
                vehicle's colors were changed, and is NEVER called for pay 'n' spray garages.
            </summary>
            <remarks>
                Misleadingly, this callback is not called for pay 'n' spray (only modshops).
            </remarks>
            <param name="playerid">The ID of the player that is driving the vehicle.</param>
            <param name="vehicleid">The ID of the vehicle that was resprayed.</param>
            <param name="color1">The color that the vehicle's primary color was changed to.</param>
            <param name="color2">The color that the vehicle's secondary color was changed to.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleDamageStatusUpdate(System.Int32,System.Int32)">
            <summary>
                This callback is called when a vehicle element such as doors, tires, panels, or lights get damaged.
            </summary>
            <remarks>
                This does not include vehicle health changes.
            </remarks>
            <param name="vehicleid">The ID of the vehicle that was damaged.</param>
            <param name="playerid">The ID of the player who synced the damage (who had the car damaged).</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnUnoccupiedVehicleUpdate(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                This callback is called everytime an unoccupied vehicle updates the server with their status.
            </summary>
            <remarks>
                This callback is called very frequently per second per unoccupied vehicle. You should refrain from implementing
                intensive calculations or intensive file writing/reading operations in this callback.
            </remarks>
            <param name="vehicleid">The vehicleid that the callback is processing.</param>
            <param name="playerid">The playerid that the callback is processing (the playerid affecting the vehicle).</param>
            <param name="passengerSeat">The passenger seat of the playerid moving the vehicle. 0 if they're not in the vehicle.</param>
            <param name="newX">The new X coordinate of the vehicle.</param>
            <param name="newY">The new y coordinate of the vehicle.</param>
            <param name="newZ">The new z coordinate of the vehicle.</param>
            <param name="velX">The new X velocity of the vehicle. <b>This parameter was added in 0.3z R4</b></param>
            <param name="velY">The new Y velocity of the vehicle. <b>This parameter was added in 0.3z R4</b></param>
            <param name="velZ">The new Z velocity of the vehicle. <b>This parameter was added in 0.3z R4</b></param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerSelectedMenuRow(System.Int32,System.Int32)">
            <summary>
                This callback is called when a player selects an item from a menu.
            </summary>
            <param name="playerid">The ID of the player that selected an item on the menu.</param>
            <param name="row">The row that was selected.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerExitedMenu(System.Int32)">
            <summary>
                Called when a player exits a menu.
            </summary>
            <param name="playerid">The ID of the player that exited the menu.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerInteriorChange(System.Int32,System.Int32,System.Int32)">
            <summary>
                Called when a player changes interior.
            </summary>
            <remarks>
                This is also called when <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerInterior(System.Int32,System.Int32)"/> is used.
            </remarks>
            <param name="playerid">The playerid who changed interior.</param>
            <param name="newinteriorid">The interior the player is now in.</param>
            <param name="oldinteriorid">The interior the player was in.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerKeyStateChange(System.Int32,System.Int32,System.Int32)">
            <summary>
                This callback is called when the state of any supported key is changed (pressed/released). Directional keys do not
                trigger this callback.
            </summary>
            <param name="playerid">ID of the player who pressed/released a key.</param>
            <param name="newkeys">A map of the keys currently held.</param>
            <param name="oldkeys">A map of the keys held prior to the current change.</param>
            <returns>
                True - Allows this callback to be called in other scripts. False - Callback will not be called in other
                scripts. It is always called first in gamemodes so returning False there blocks filterscripts from seeing it.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnRconLoginAttempt(System.String,System.String,System.Boolean)">
            <summary>
                This callback is called when someone tries to login to RCON, succesful or not.
            </summary>
            <remarks>
                This callback is only called when /rcon login is used.
            </remarks>
            <param name="ip">The IP of the player that tried to login to RCON.</param>
            <param name="password">The password used to login with.</param>
            <param name="success">False if the password was incorrect or True if it was correct.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerUpdate(System.Int32)">
            <summary>
                This callback is called everytime a client/player updates the server with their status.
            </summary>
            <remarks>
                This callback is called very frequently per second per player, only use it when you know what it's meant for.
            </remarks>
            <param name="playerid">ID of the player sending an update packet.</param>
            <returns>False - Update from this player will not be replicated to other clients.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerStreamIn(System.Int32,System.Int32)">
            <summary>
                This callback is called when a player is streamed by some other player's client.
            </summary>
            <param name="playerid">The ID of the player who has been streamed.</param>
            <param name="forplayerid">The ID of the player that streamed the other player in.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerStreamOut(System.Int32,System.Int32)">
            <summary>
                This callback is called when a player is streamed out from some other player's client.
            </summary>
            <param name="playerid">The player who has been destreamed.</param>
            <param name="forplayerid">The player who has destreamed the other player.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleStreamIn(System.Int32,System.Int32)">
            <summary>
                Called when a vehicle is streamed to a player's client.
            </summary>
            <param name="vehicleid">The ID of the vehicle that streamed in for the player.</param>
            <param name="forplayerid">The ID of the player who the vehicle streamed in for.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnVehicleStreamOut(System.Int32,System.Int32)">
            <summary>
                This callback is called when a vehicle is streamed out from some player's client.
            </summary>
            <param name="vehicleid">The ID of the vehicle that streamed out.</param>
            <param name="forplayerid">The ID of the player who is no longer streaming the vehicle.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnTrailerUpdate(System.Int32,System.Int32)">
            <summary>
                This callback is called when a player sent a trailer update.
            </summary>
            <param name="playerId">The ID of the player who sent a trailer update</param>
            <param name="vehicleId">The Trailer being updated</param>
            <returns>
                Return false if the update from this player and vehicle will not be replicated to other clients
                or return true Indicates that this update can be processed normally and sent to other players.
            </returns>
            <remarks>
                The trailer's position will still be updated internally on the server
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnDialogResponse(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
                This callback is called when a player responds to a dialog shown using <see cref="M:SampSharp.GameMode.Natives.Native.ShowPlayerDialog(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)"/> by
                either clicking a button, pressing ENTER/ESC or double-clicking a list item (if using a list style dialog).
            </summary>
            <param name="playerid">The ID of the player that responded to the dialog.</param>
            <param name="dialogid">
                The ID of the dialog the player responded to, assigned in <see cref="M:SampSharp.GameMode.Natives.Native.ShowPlayerDialog(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)"/>
                .
            </param>
            <param name="response">1 for left button and 0 for right button (if only one button shown, always 1).</param>
            <param name="listitem">
                The ID of the list item selected by the player (starts at 0) (only if using a list style
                dialog).
            </param>
            <param name="inputtext">The text entered into the input box by the player or the selected list item text.</param>
            <returns>
                Returning False in this callback will pass the dialog to another script in case no matching code were found in
                your gamemode's callback.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerTakeDamage(System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
                This callback is called when a player takes damage.
            </summary>
            <param name="playerid">The ID of the player that took damage.</param>
            <param name="issuerid">The ID of the player that caused the damage. INVALID_PLAYER_ID if self-inflicted.</param>
            <param name="amount">The amount of dagmage the player took (health and armour combined).</param>
            <param name="weaponid">The ID of the weapon/reason for the damage.</param>
            <param name="bodypart">The body part that was hit.</param>
            <returns>
                True: Allows this callback to be called in other scripts. False Callback will not be called in other scripts.
                It is always called first in gamemodes so returning False there blocks filterscripts from seeing it.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerGiveDamage(System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
                This callback is called when a player gives damage to another player.
            </summary>
            <remarks>
                One thing you can do with GiveDamage is detect when other players report that they have damaged a certain player,
                and that player hasn't taken any health loss. You can flag those players as suspicious.
                You can also set all players to the same team (so they don't take damage from other players) and process all health
                loss from other players manually.
                You might have a server where players get a wanted level if they attack Cop players (or some specific class). In
                that case you might trust GiveDamage over TakeDamage.
                There should be a lot you can do with it. You just have to keep in mind the levels of trust between clients. In
                most cases it's better to trust the client who is being damaged to report their health/armour (TakeDamage). SA-MP
                normally does this. GiveDamage provides some extra information which may be useful when you require a different
                level of trust.
            </remarks>
            <param name="playerid">The ID of the player that gave damage.</param>
            <param name="damagedid">The ID of the player that received damage.</param>
            <param name="amount">The amount of health/armour damagedid has lost (combined).</param>
            <param name="weaponid">The reason that caused the damage.</param>
            <param name="bodypart">The body part that was hit.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerClickMap(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                This callback is called when a player places a target/waypoint on the pause menu map (by right-clicking).
            </summary>
            <remarks>
                The Z value provided is only an estimate; you may find it useful to use a plugin like the MapAndreas plugin to get
                a more accurate Z coordinate (or for teleportation; use <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerPosFindZ(System.Int32,SampSharp.GameMode.World.Vector)"/>).
            </remarks>
            <param name="playerid">The ID of the player that placed a target/waypoint.</param>
            <param name="fX">The X float coordinate where the player clicked.</param>
            <param name="fY">The Y float coordinate where the player clicked.</param>
            <param name="fZ">The Z float coordinate where the player clicked (inaccurate - see note below).</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(System.Int32,System.Int32)">
            <summary>
                This callback is called when a player clicks on a textdraw or cancels the select mode(ESC).
            </summary>
            <remarks>
                The clickable area is defined by <see cref="M:SampSharp.GameMode.Natives.Native.TextDrawTextSize(System.Int32,System.Single,System.Single)"/>. The x and y parameters passed to that
                function must not be zero or negative.
            </remarks>
            <param name="playerid">The ID of the player that clicked on the textdraw.</param>
            <param name="clickedid">The ID of the clicked textdraw. INVALID_TEXT_DRAW if selection was cancelled.</param>
            <returns>
                Returning True in this callback will prevent it being called in other scripts. This should be used to signal
                that the textdraw on which they clicked was 'found' and no further processing is needed. You should return False if
                the textdraw on which they clicked wasn't found.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayerTextDraw(System.Int32,System.Int32)">
            <summary>
                This callback is called when a player clicks on a player-textdraw. It is not called when player cancels the select
                mode (ESC) - however, <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(System.Int32,System.Int32)"/> is.
            </summary>
            <param name="playerid">The ID of the player that selected a textdraw.</param>
            <param name="playertextid">The ID of the player-textdraw that the player selected.</param>
            <returns>
                Returning True in this callback will prevent it being called in other scripts. This should be used to signal
                that the textdraw on which they clicked was 'found' and no further processing is needed. You should return False if
                the textdraw on which they clicked wasn't found.
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayer(System.Int32,System.Int32,System.Int32)">
            <summary>
                Called when a player double-clicks on a player on the scoreboard.
            </summary>
            <remarks>
                There is currently only one 'source' (0 - CLICK_SOURCE_SCOREBOARD). The existence of this argument suggests that
                more sources may be supported in the future.
            </remarks>
            <param name="playerid">The ID of the player that clicked on a player on the scoreboard.</param>
            <param name="clickedplayerid">The ID of the player that was clicked on.</param>
            <param name="source">The source of the player's click.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEditObject(System.Int32,System.Boolean,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                This callback is called when a player ends object edition mode.
            </summary>
            <param name="playerid">The ID of the player that edited an object.</param>
            <param name="playerobject">0 if it is a global object or 1 if it is a playerobject.</param>
            <param name="objectid">The ID of the edited object.</param>
            <param name="response">The type of response.</param>
            <param name="fX">The X offset for the object that was edited.</param>
            <param name="fY">The Y offset for the object that was edited.</param>
            <param name="fZ">The Z offset for the object that was edited.</param>
            <param name="fRotX">The X rotation for the object that was edited.</param>
            <param name="fRotY">The Y rotation for the object that was edited.</param>
            <param name="fRotZ">The Z rotation for the object that was edited.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerEditAttachedObject(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                This callback is called when a player ends attached object edition mode.
            </summary>
            <remarks>
                Editions should be discarded if response was '0' (cancelled). This must be done by storing the offsets etc. in an
                array BEFORE using EditAttachedObject.
            </remarks>
            <param name="playerid">The ID of the player that ended edition mode.</param>
            <param name="response">0 if they cancelled (ESC) or 1 if they clicked the save icon.</param>
            <param name="index">Slot ID of the attached object that was edited.</param>
            <param name="modelid">The model of the attached object that was edited.</param>
            <param name="boneid">The bone of the attached object that was edited.</param>
            <param name="fOffsetX">The X offset for the attached object that was edited.</param>
            <param name="fOffsetY">The Y offset for the attached object that was edited.</param>
            <param name="fOffsetZ">The Z offset for the attached object that was edited.</param>
            <param name="fRotX">The X rotation for the attached object that was edited.</param>
            <param name="fRotY">The Y rotation for the attached object that was edited.</param>
            <param name="fRotZ">The Z rotation for the attached object that was edited.</param>
            <param name="fScaleX">The X scale for the attached object that was edited.</param>
            <param name="fScaleY">The Y scale for the attached object that was edited.</param>
            <param name="fScaleZ">The Z scale for the attached object that was edited.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerSelectObject(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                This callback is called when a player selects an object after <see cref="M:SampSharp.GameMode.Natives.Native.SelectObject(System.Int32)"/> has been used.
            </summary>
            <param name="playerid">The ID of the player that selected an object.</param>
            <param name="type">The type of selection.</param>
            <param name="objectid">The ID of the selected object.</param>
            <param name="modelid">The model of the selected object.</param>
            <param name="fX">The X position of the selected object.</param>
            <param name="fY">The Y position of the selected object.</param>
            <param name="fZ">The Z position of the selected object.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnPlayerWeaponShot(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                This callback is called when a player fires a shot from a weapon.
            </summary>
            <remarks>
                BULLET_HIT_TYPE_NONE: the fX, fY and fZ parameters are normal coordinates;
                Others: the fX, fY and fZ are offsets from the center of hitid.
            </remarks>
            <param name="playerid">The ID of the player that shot a weapon.</param>
            <param name="weaponid">The ID of the weapon shot by the player.</param>
            <param name="hittype">The type of thing the shot hit (none, player, vehicle, or (player)object).</param>
            <param name="hitid">The ID of the player, vehicle or object that was hit.</param>
            <param name="fX">The X coordinate that the shot hit.</param>
            <param name="fY">The Y coordinate that the shot hit.</param>
            <param name="fZ">The Z coordinate that the shot hit.</param>
            <returns> False: Prevent the bullet from causing damage. True: Allow the bullet to cause damage.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnIncomingConnection(System.Int32,System.String,System.Int32)">
            <summary>
                This callback is called when an IP address attempts a connection to the server.
            </summary>
            <param name="playerid">The ID of the player attempting to connect.</param>
            <param name="ipAddress">The IP address of the player attempting to connect.</param>
            <param name="port">The port of the attempted connection.</param>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="M:SampSharp.GameMode.BaseMode.OnTick">
            <summary>
                This callback is called every tick.
            </summary>
            <returns>This callback does not handle returns.</returns>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.Initialized">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/> callback is being called.
                This callback is triggered when the gamemode starts.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.Exited">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnGameModeExit"/> callback is being called.
                This callback is called when a gamemode ends.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerConnected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerConnect(System.Int32)"/> callback is being called.
                This callback is called when a player connects to the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerDisconnected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerDisconnect(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player disconnects from the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerCleanup">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerCleanup(SampSharp.GameMode.Events.PlayerDisconnectedEventArgs)"/> callback is being called.
                This callback is called after a player has disconnected.
            </summary>
            <remarks>
                Because <see cref="T:SampSharp.GameMode.World.GtaPlayer"/> probably is the first listener of this event,
                the <see cref="T:SampSharp.GameMode.World.GtaPlayer"/> object is already disposed before any other listeners are called.
                It is better to either use the <see cref="E:SampSharp.GameMode.BaseMode.PlayerDisconnected"/> event or <see cref="E:SampSharp.GameMode.World.GtaPlayer.Cleanup"/>
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerSpawned">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSpawn(System.Int32)"/> callback is being called.
                This callback is called when a player spawns.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerDied">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/> callback is being called.
                This callback is triggered when the gamemode starts.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleSpawned">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleSpawn(System.Int32)"/> callback is being called.
                This callback is called when a vehicle respawns.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleDied">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleDeath(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a vehicle is destroyed - either by exploding or becoming submerged in water.
            </summary>
            <remarks>
                This callback will also be called when a vehicle enters water, but the vehicle can be saved from destruction by
                teleportation or driving out (if only partially submerged). The callback won't be called a second time, and the
                vehicle may disappear when the driver exits, or after a short time.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerText">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerText(System.Int32,System.String)"/> callback is being called.
                Called when a player sends a chat message.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerCommandText">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerCommandText(System.Int32,System.String)"/> callback is being called.
                This callback is called when a player enters a command into the client chat window, e.g. /help.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerRequestClass">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerRequestClass(System.Int32,System.Int32)"/> callback is being called.
                Called when a player changes class at class selection (and when class selection first appears).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEnterVehicle">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterVehicle(System.Int32,System.Int32,System.Boolean)"/> callback is being called.
                This callback is called when a player starts to enter a vehicle, meaning the player is not in vehicle yet at the
                time this callback is called.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerExitVehicle">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerExitVehicle(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player exits a vehicle.
            </summary>
            <remarks>
                Not called if the player falls off a bike or is removed from a vehicle by other means such as using
                <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerPos(System.Int32,SampSharp.GameMode.World.Vector)"/>.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerStateChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerStateChange(System.Int32,System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player exits a vehicle.
            </summary>
            <remarks>
                Not called if the player falls off a bike or is removed from a vehicle by other means such as using
                <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerPos(System.Int32,SampSharp.GameMode.World.Vector)"/>.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEnterCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterCheckpoint(System.Int32)"/> callback is being called.
                This callback is called when a player enters the checkpoint set for that player.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerLeaveCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerLeaveCheckpoint(System.Int32)"/> callback is being called.
                This callback is called when a player leaves the checkpoint set for that player.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEnterRaceCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterRaceCheckpoint(System.Int32)"/> callback is being called.
                This callback is called when a player enters a race checkpoint.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerLeaveRaceCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerLeaveRaceCheckpoint(System.Int32)"/> callback is being called.
                This callback is called when a player leaves the race checkpoint.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.RconCommand">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnRconCommand(System.String)"/> callback is being called.
                This callback is called when a command is sent through the server console, remote RCON, or via the in-game /rcon
                command.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerRequestSpawn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerRequestSpawn(System.Int32)"/> callback is being called.
                Called when a player attempts to spawn via class selection.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.ObjectMoved">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnObjectMoved(System.Int32)"/> callback is being called.
                This callback is called when an object is moved after <see cref="M:SampSharp.GameMode.Natives.Native.MoveObject(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> (when it stops moving).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerObjectMoved">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerObjectMoved(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player object is moved after <see cref="M:SampSharp.GameMode.Natives.Native.MovePlayerObject(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> (when it stops
                moving).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerPickUpPickup">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerPickUpPickup(System.Int32,System.Int32)"/> callback is being called.
                Called when a player picks up a pickup created with <see cref="M:SampSharp.GameMode.Natives.Native.CreatePickup(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32)"/>.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleMod">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleMod(System.Int32,System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a vehicle is modded.
            </summary>
            <remarks>
                This callback is not called by <see cref="M:SampSharp.GameMode.Natives.Native.AddVehicleComponent(System.Int32,System.Int32)"/>.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEnterExitModShop">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnEnterExitModShop(System.Int32,System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player enters or exits a mod shop.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehiclePaintjobApplied">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehiclePaintjob(System.Int32,System.Int32,System.Int32)"/> callback is being called.
                Called when a player changes the paintjob of their vehicle (in a modshop).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleResprayed">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleRespray(System.Int32,System.Int32,System.Int32,System.Int32)"/> callback is being called.
                The callback name is deceptive, this callback is called when a player exits a mod shop, regardless of whether the
                vehicle's colors were changed, and is NEVER called for pay 'n' spray garages.
            </summary>
            <remarks>
                Misleadingly, this callback is not called for pay 'n' spray (only modshops).
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleDamageStatusUpdated">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleDamageStatusUpdate(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a vehicle element such as doors, tires, panels, or lights get damaged.
            </summary>
            <remarks>
                This does not include vehicle health changes.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.UnoccupiedVehicleUpdated">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnUnoccupiedVehicleUpdate(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> callback is being called.
                This callback is called everytime an unoccupied vehicle updates the server with their status.
            </summary>
            <remarks>
                This callback is called very frequently per second per unoccupied vehicle. You should refrain from implementing
                intensive calculations or intensive file writing/reading operations in this callback.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerSelectedMenuRow">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSelectedMenuRow(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player selects an item from a menu.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerExitedMenu">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerExitedMenu(System.Int32)"/> callback is being called.
                Called when a player exits a menu.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerInteriorChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerInteriorChange(System.Int32,System.Int32,System.Int32)"/> callback is being called.
                Called when a player changes interior.
            </summary>
            <remarks>
                This is also called when <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerInterior(System.Int32,System.Int32)"/> is used.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerKeyStateChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerKeyStateChange(System.Int32,System.Int32,System.Int32)"/> callback is being called.
                This callback is called when the state of any supported key is changed (pressed/released). Directional keys do not
                trigger this callback.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.RconLoginAttempt">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnRconLoginAttempt(System.String,System.String,System.Boolean)"/> callback is being called.
                This callback is called when someone tries to login to RCON, succesful or not.
            </summary>
            <remarks>
                This callback is only called when /rcon login is used.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerUpdate">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerUpdate(System.Int32)"/> callback is being called.
                This callback is called everytime a client/player updates the server with their status.
            </summary>
            <remarks>
                This callback is called very frequently per second per player, only use it when you know what it's meant for.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerStreamIn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerStreamIn(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player is streamed by some other player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerStreamOut">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerStreamOut(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player is streamed out from some other player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleStreamIn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleStreamIn(System.Int32,System.Int32)"/> callback is being called.
                Called when a vehicle is streamed to a player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.VehicleStreamOut">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleStreamOut(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a vehicle is streamed out from some player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.TrailerUpdate">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnTrailerUpdate(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player sent a trailer update.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.DialogResponse">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnDialogResponse(System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> callback is being called.
                This callback is called when a player responds to a dialog shown using <see cref="M:SampSharp.GameMode.Natives.Native.ShowPlayerDialog(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)"/> by
                either clicking a button, pressing ENTER/ESC or double-clicking a list item (if using a list style dialog).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerTakeDamage">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerTakeDamage(System.Int32,System.Int32,System.Single,System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player takes damage.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerGiveDamage">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerGiveDamage(System.Int32,System.Int32,System.Single,System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player gives damage to another player.
            </summary>
            <remarks>
                One thing you can do with GiveDamage is detect when other players report that they have damaged a certain player,
                and that player hasn't taken any health loss. You can flag those players as suspicious.
                You can also set all players to the same team (so they don't take damage from other players) and process all health
                loss from other players manually.
                You might have a server where players get a wanted level if they attack Cop players (or some specific class). In
                that case you might trust GiveDamage over TakeDamage.
                There should be a lot you can do with it. You just have to keep in mind the levels of trust between clients. In
                most cases it's better to trust the client who is being damaged to report their health/armour (TakeDamage). SA-MP
                normally does this. GiveDamage provides some extra information which may be useful when you require a different
                level of trust.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerClickMap">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickMap(System.Int32,System.Single,System.Single,System.Single)"/> callback is being called.
                This callback is called when a player places a target/waypoint on the pause menu map (by right-clicking).
            </summary>
            <remarks>
                The Z value provided is only an estimate; you may find it useful to use a plugin like the MapAndreas plugin to get
                a more accurate Z coordinate (or for teleportation; use <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerPosFindZ(System.Int32,SampSharp.GameMode.World.Vector)"/>).
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerClickTextDraw">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player clicks on a textdraw or cancels the select mode(ESC).
            </summary>
            <remarks>
                The clickable area is defined by <see cref="M:SampSharp.GameMode.Natives.Native.TextDrawTextSize(System.Int32,System.Single,System.Single)"/>. The x and y parameters passed to that
                function must not be zero or negative.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerClickPlayerTextDraw">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayerTextDraw(System.Int32,System.Int32)"/> callback is being called.
                This callback is called when a player clicks on a player-textdraw. It is not called when player cancels the select
                mode (ESC) - however, <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(System.Int32,System.Int32)"/> is.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerClickPlayer">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayer(System.Int32,System.Int32,System.Int32)"/> callback is being called.
                Called when a player double-clicks on a player on the scoreboard.
            </summary>
            <remarks>
                There is currently only one 'source' (<see cref="F:SampSharp.GameMode.Definitions.PlayerClickSource.Scoreboard"/>). The existence of this argument
                suggests that more sources may be supported in the future.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEditObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEditObject(System.Int32,System.Boolean,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> callback is being called.
                This callback is called when a player ends object edition mode.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerEditAttachedObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEditAttachedObject(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> callback is being called.
                This callback is called when a player ends attached object edition mode.
            </summary>
            <remarks>
                Editions should be discarded if response was '0' (cancelled). This must be done by storing the offsets etc. in an
                array BEFORE using EditAttachedObject.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerSelectObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSelectObject(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)"/> callback is being called.
                This callback is called when a player selects an object after <see cref="M:SampSharp.GameMode.Natives.Native.SelectObject(System.Int32)"/> has been used.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.PlayerWeaponShot">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerWeaponShot(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)"/> callback is being called.
                This callback is called when a player fires a shot from a weapon.
            </summary>
            <remarks>
                <see cref="F:SampSharp.GameMode.Definitions.BulletHitType.None"/>: the fX, fY and fZ parameters are normal coordinates;
                Others: the fX, fY and fZ are offsets from the center of hitid.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.IncomingConnection">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnIncomingConnection(System.Int32,System.String,System.Int32)"/> callback is being called.
                This callback is called when an IP address attempts a connection to the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.Tick">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnTick"/> callback is being called.
                This callback is called every tick(50 times per second).
            </summary>
            <remarks>
                USE WITH CARE!
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.BaseMode.TimerTick">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnTimerTick(System.Int32,System.Object)"/> callback is being called.
                This callback is called when a timer ticks.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Pools.IdentifiedOwnedPool`1">
            <summary>
                Keeps track of a pool of owned and identified instances.
            </summary>
            <typeparam name="T">Base type of instances to keep track of.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`1.Register``1">
            <summary>
                Registers the type to use when initializing new instances.
            </summary>
            <typeparam name="T2">The Type to use when initializing new instances.</typeparam>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`1.Find(SampSharp.GameMode.World.GtaPlayer,System.Int32)">
            <summary>
                Finds an instance with the given <paramref name="owner" /> and <paramref name="id" />".
            </summary>
            <param name="owner">The owner of the instance to find.</param>
            <param name="id">The identity of the instance to find.</param>
            <returns>The found instance.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`1.Add(SampSharp.GameMode.World.GtaPlayer,System.Int32)">
            <summary>
                Initializes a new instance with the given <paramref name="owner" /> and <paramref name="id" />.
            </summary>
            <param name="owner">The owner of the instance to create.</param>
            <param name="id">The identity of the instance to create.</param>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Pools.IdentifiedOwnedPool`1.FindOrCreate(SampSharp.GameMode.World.GtaPlayer,System.Int32)">
            <summary>
                Finds an instance with the given <paramref name="owner" /> and <paramref name="id" /> or initializes a new one.
            </summary>
            <param name="owner">The owner of the instance to find or create.</param>
            <param name="id">The identity of the instance to find or create.</param>
            <returns>The found instance.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.CommandAttribute">
            <summary>
                Indicates that a method is a player-comammand and specifies information about the command.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.CommandAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.SAMP.Commands.CommandAttribute"/> class.
            </summary>
            <param name="name">The name of the command.</param>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandAttribute.Name">
            <summary>
                Gets or sets the name of this Command.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandAttribute.IgnoreCase">
            <summary>
                Gets or sets whether this Command is case-sensitive.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandAttribute.Alias">
            <summary>
                Gets or sets an alias of this Command.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandAttribute.Shortcut">
            <summary>
                Gets or sets a shortcut of this Command.
            </summary>
            <remarks>
                A shortcut is the same as an alias, but without the commandgroup in front of it.
            </remarks>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Commands.CommandAttribute.PermissionCheckMethod">
            <summary>
                Gets or sets the method run to check whether a player has the permissions the run the command.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.IntegerAttribute">
            <summary>
                Represents an integer command-parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.IntegerAttribute.Check(System.String@,System.Object@)">
            <summary>
                Check if the parameter is well-formatted and return the output.
            </summary>
            <param name="command">The command text.</param>
            <param name="output">The output of this parameter.</param>
            <returns>True if the parameter is well-formatted, False otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Commands.TextAttribute">
            <summary>
                Represents an text command-parameter.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Commands.TextAttribute.Check(System.String@,System.Object@)">
            <summary>
                Check if the parameter is well-formatted and return the output.
            </summary>
            <param name="command">The command text.</param>
            <param name="output">The output of this parameter.</param>
            <returns>True if the parameter is well-formatted, False otherwise.</returns>
        </member>
        <member name="T:SampSharp.GameMode.Tools.KeyUtils">
            <summary>
                Contains methods to check for keypresses.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.HasPressed(SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys"/> have been pressed.
            </summary>
            <param name="newKeys">New <see cref="T:SampSharp.GameMode.Definitions.Keys"/>.</param>
            <param name="oldKeys">Old <see cref="T:SampSharp.GameMode.Definitions.Keys"/>.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys"/> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys"/> have been pressed.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.HasPressed(SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys"/> have been pressed.
            </summary>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs"/>.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys"/> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys"/> have been pressed.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.HasReleased(SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys"/> have been released.
            </summary>
            <param name="newKeys">New <see cref="T:SampSharp.GameMode.Definitions.Keys"/>.</param>
            <param name="oldKeys">Old <see cref="T:SampSharp.GameMode.Definitions.Keys"/>.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys"/> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys"/> have been released.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.HasReleased(SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys"/> have been released.
            </summary>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs"/>.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys"/> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys"/> have been released.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.IsHolding(SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys"/> are being hold.
            </summary>
            <param name="newKeys">New <see cref="T:SampSharp.GameMode.Definitions.Keys"/>.</param>
            <param name="oldKeys">Old <see cref="T:SampSharp.GameMode.Definitions.Keys"/>.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys"/> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys"/> are being hold.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.KeyUtils.IsHolding(SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs,SampSharp.GameMode.Definitions.Keys)">
            <summary>
                Checks if <see cref="T:SampSharp.GameMode.Definitions.Keys"/> are being hold.
            </summary>
            <param name="e">The <see cref="T:SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs"/>.</param>
            <param name="keys">The <see cref="T:SampSharp.GameMode.Definitions.Keys"/> to check for.</param>
            <returns>Whether the <see cref="T:SampSharp.GameMode.Definitions.Keys"/> are being hold.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.Load(SampSharp.GameMode.Tools.MapAndreasMode)">
            <summary>
                Loads the mapdata in to the memory.
            </summary>
            <param name="mode">The mode to load with</param>
            <exception cref="T:System.IO.FileLoadException">Thrown when the file couldn't be loaded</exception>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.Unload">
            <summary>
                Unloads the mapdate from the memory.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.Find(System.Single,System.Single)">
            <summary>
                Finds highest Z point (ground level) for the provided point.
            </summary>
            <param name="x">X-coordinate of the point.</param>
            <param name="y">Y-coordinate of the point.</param>
            <returns>Ground level at the given point.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.Find(SampSharp.GameMode.World.Vector)">
            <summary>
                Finds highest Z point (ground level) for the provided point.
            </summary>
            <param name="point">The point to look at.</param>
            <returns>Ground level at the given point.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.FindAverage(System.Single,System.Single)">
            <summary>
                Calculates a linear approximation of the ground level at the provided point.
            </summary>
            <param name="x">X-coordinate of the point.</param>
            <param name="y">Y-coordinate of the point.</param>
            <returns>A approximation of the ground level at the given point.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Tools.MapAndreas.FindAverage(SampSharp.GameMode.World.Vector)">
            <summary>
                Calculates a linear approximation of the ground level at the provided point.
            </summary>
            <param name="point">The point to look at.</param>
            <returns>A approximation of the ground level at the given point.</returns>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Color">
            <summary>
                Represents a hexidecimal color.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="r">The red value of this Color.</param>
            <param name="g">The green value of this Color.</param>
            <param name="b">The blue value of this Color.</param>
            <param name="a">The alpha value of this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="r">The red value of this Color.</param>
            <param name="g">The red value of this Color.</param>
            <param name="b">The red value of this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(SampSharp.GameMode.SAMP.Color)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="color">The Color values to use for this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="color">The Color values to use for this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.#ctor(System.UInt32)">
            <summary>
                Initializes a new instance of the Color struct.
            </summary>
            <param name="color">The Color values to use for this Color.</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.GetColorValue(SampSharp.GameMode.SAMP.ColorFormat)">
            <summary>
                Returns an Integer representation of this Color.
            </summary>
            <param name="colorFormat">The ColorFormat to use in the conversion.</param>
            <returns>An Integer representation of this Color.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.GetColorFromValue(System.UInt32,SampSharp.GameMode.SAMP.ColorFormat)">
            <summary>
                Returns an Color representation of this Integer.
            </summary>
            <param name="color">The color to convert.</param>
            <param name="colorFormat">The ColorFormat to use in the conversion.</param>
            <returns>An Color representation of this Integer.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.GetColorFromValue(System.Int32,SampSharp.GameMode.SAMP.ColorFormat)">
            <summary>
                Returns an Color representation of this Integer.
            </summary>
            <param name="color">The color to convert.</param>
            <param name="colorFormat">The ColorFormat to use in the conversion.</param>
            <returns>An Color representation of this Integer.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.ToString(SampSharp.GameMode.SAMP.ColorFormat)">
            <summary>
                Returns a String representation of this Color.
            </summary>
            <param name="colorFormat">The format to use to convert the color to a string.</param>
            <returns>A String representation of this Color.</returns>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Color.ToString">
            <summary>
                Returns a String representation of this Color.
            </summary>
            <returns>A String representation of this Color.</returns>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.AliceBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0F8FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.AntiqueWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAEBD7.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Aqua">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Aquamarine">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7FFFD4.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Azure">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0FFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Beige">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5F5DC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Bisque">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4C4.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Black">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF000000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.BlanchedAlmond">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFEBCD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Blue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF0000FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.BlueViolet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8A2BE2.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Brown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA52A2A.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.BurlyWood">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDEB887.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.CadetBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF5F9EA0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Chartreuse">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7FFF00.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Chocolate">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD2691E.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Coral">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF7F50.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.CornflowerBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6495ED.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Cornsilk">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF8DC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Crimson">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDC143C.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Cyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00008B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkCyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008B8B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkGoldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB8860B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA9A9A9.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF006400.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkKhaki">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBDB76B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkMagenta">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B008B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkOliveGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF556B2F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkOrange">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF8C00.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkOrchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9932CC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B0000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkSalmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE9967A.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8FBC8F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkSlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF483D8B.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkSlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF2F4F4F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00CED1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DarkViolet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9400D3.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DeepPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF1493.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DeepSkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00BFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DimGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF696969.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.DodgerBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF1E90FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Firebrick">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB22222.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.FloralWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFAF0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.ForestGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF228B22.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Fuchsia">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Gainsboro">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDCDCDC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.GhostWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF8F8FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Gold">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFD700.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Goldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDAA520.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Gray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF808080.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Green">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.GreenYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFADFF2F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Honeydew">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0FFF0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.HotPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF69B4.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.IndianRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFCD5C5C.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Indigo">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4B0082.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Ivory">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFF0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Khaki">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0E68C.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Lavender">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE6E6FA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LavenderBlush">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF0F5.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LawnGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7CFC00.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LemonChiffon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFACD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFADD8E6.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightCoral">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF08080.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightCyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE0FFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightGoldenrodYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAFAD2.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD3D3D3.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF90EE90.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFB6C1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightSalmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFA07A.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF20B2AA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightSkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF87CEFA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightSlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF778899.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightSteelBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB0C4DE.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LightYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFE0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Lime">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FF00.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.LimeGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF32CD32.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Linen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAF0E6.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Magenta">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Maroon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF800000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumAquamarine">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF66CDAA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF0000CD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumOrchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBA55D3.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumPurple">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9370DB.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF3CB371.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumSlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7B68EE.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumSpringGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FA9A.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF48D1CC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MediumVioletRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFC71585.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MidnightBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF191970.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MintCream">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5FFFA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.MistyRose">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4E1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Moccasin">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4B5.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.NavajoWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFDEAD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Navy">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF000080.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.OldLace">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFDF5E6.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Olive">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF808000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.OliveDrab">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6B8E23.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Orange">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFA500.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.OrangeRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF4500.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Orchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDA70D6.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PaleGoldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFEEE8AA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PaleGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF98FB98.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PaleTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFAFEEEE.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PaleVioletRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDB7093.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PapayaWhip">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFEFD5.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PeachPuff">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFDAB9.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Peru">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFCD853F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Pink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFC0CB.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Plum">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDDA0DD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.PowderBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB0E0E6.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Purple">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF800080.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Red">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF0000.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.RosyBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBC8F8F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.RoyalBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4169E1.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SaddleBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B4513.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Salmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFA8072.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SandyBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF4A460.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF2E8B57.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SeaShell">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF5EE.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Sienna">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA0522D.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Silver">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFC0C0C0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF87CEEB.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6A5ACD.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF708090.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Snow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFAFA.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SpringGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FF7F.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.SteelBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4682B4.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Tan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD2B48C.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Teal">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008080.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Thistle">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD8BFD8.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Tomato">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF6347.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Transparent">
            <summary>
                Gets a system-defined color.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Turquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF40E0D0.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Violet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFEE82EE.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Wheat">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5DEB3.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.White">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFFF.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.WhiteSmoke">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5F5F5.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.Yellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFF00.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.YellowGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9ACD32.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.R">
            <summary>
                Gets or sets the red value of this Color.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.G">
            <summary>
                Gets or sets the green value of this Color.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.B">
            <summary>
                Gets or sets the blue value of this Color.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Color.A">
            <summary>
                Gets or sets the alpha value of this Color.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.ColorFormat">
            <summary>
                Contains different formats of String representations of Color instances.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.SAMP.ColorFormat.RGBA">
            <summary>
                {RRGGBBAA}
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.SAMP.ColorFormat.ARGB">
            <summary>
                {AARRGGBB}
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.SAMP.ColorFormat.RGB">
            <summary>
                {RRGGBB}
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.Dialog">
            <summary>
                Represents a SA:MP dialog.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Display.Dialog.DialogId">
            <summary>
                Gets the ID this system will use.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Display.Dialog.DialogHideId">
            <summary>
                Gets the ID this system will use to hide Dialogs.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Display.Dialog.OpenDialogs">
            <summary>
                Contains all instances of Dialogs that are being shown to Players.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.#ctor(SampSharp.GameMode.Definitions.DialogStyle,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the Dialog class.
            </summary>
            <param name="style">The style of the dialog.</param>
            <param name="caption">
                The title at the top of the dialog. The length of the caption can not exceed more than 64
                characters before it starts to cut off.
            </param>
            <param name="message">The text to display in the main dialog. Use \n to start a new line and \t to tabulate.</param>
            <param name="button">The text on the left button.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.#ctor(SampSharp.GameMode.Definitions.DialogStyle,System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the Dialog class.
            </summary>
            <param name="style">The style of the dialog.</param>
            <param name="caption">
                The title at the top of the dialog. The length of the caption can not exceed more than 64
                characters before it starts to cut off.
            </param>
            <param name="message">The text to display in the main dialog. Use \n to start a new line and \t to tabulate.</param>
            <param name="button1">The text on the left button.</param>
            <param name="button2">The text on the right button. Leave it blank to hide it.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.#ctor(System.String,System.String[],System.String)">
            <summary>
                Initializes a new instance of the Dialog class with the <see cref="F:SampSharp.GameMode.Definitions.DialogStyle.List"/>.
            </summary>
            <param name="caption">
                The title at the top of the dialog. The length of the caption can not exceed more than 64
                characters before it starts to cut off.
            </param>
            <param name="lines">The lines to display in the list dialog.</param>
            <param name="button">The text on the button.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.#ctor(System.String,System.String[],System.String,System.String)">
            <summary>
                Initializes a new instance of the Dialog class with the <see cref="F:SampSharp.GameMode.Definitions.DialogStyle.List"/>.
            </summary>
            <param name="caption">
                The title at the top of the dialog. The length of the caption can not exceed more than 64
                characters before it starts to cut off.
            </param>
            <param name="lines">The lines to display in the list dialog.</param>
            <param name="button1">The text on the left button.</param>
            <param name="button2">The text on the right button. Leave it blank to hide it.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.Show(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Shows the dialog box to a Player.
            </summary>
            <param name="player">The Player to show the dialog to.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.Hide(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Hides all dialogs for a Player.
            </summary>
            <param name="player">The Player to hide all dialogs from.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.GetOpenDialog(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Gets the dialog currently being shown to a Player.
            </summary>
            <param name="player">The Player whose Dialog you want.</param>
            <returns>The Dialog currently being shown to the Player.</returns>
        </member>
        <member name="M:SampSharp.GameMode.Display.Dialog.OnResponse(SampSharp.GameMode.Events.DialogResponseEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.Display.Dialog.Response"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DialogResponseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="P:SampSharp.GameMode.Display.Dialog.Style">
            <summary>
                The style of the dialog.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Dialog.Caption">
            <summary>
                The title at the top of the dialog. The length of the caption can not exceed more than 64 characters before it
                starts to cut off.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Dialog.Message">
            <summary>
                The text to display in the main dialog. Use \n to start a new line and \t to tabulate.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Dialog.Button1">
            <summary>
                The text on the left button.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.Dialog.Button2">
            <summary>
                The text on the right button. Leave it blank to hide it.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.Display.Dialog.Response">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnDialogResponse(System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> is being called.
                This callback is called when a player responds to a dialog by either clicking a button, pressing ENTER/ESC or
                double-clicking a list item (if using a <see cref="F:SampSharp.GameMode.Definitions.DialogStyle.List"/>).
                This callback is called when a player connects to the server.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.GangZone.InvalidId">
            <summary>
                Gets an ID commonly returned by methods to point out that no GangZone matched the requirements.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.AttachCameraToObject(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Attaches a player's camera to this GlobalObject.
            </summary>
            <param name="player">The player whose camera to attach to this GlobalObject.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.OnMoved(SampSharp.GameMode.Events.ObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GlobalObject.Moved"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.ObjectEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.OnSelected(SampSharp.GameMode.Events.PlayerSelectObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GlobalObject.Selected"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerSelectObjectEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GlobalObject.OnEdited(SampSharp.GameMode.Events.PlayerEditObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GlobalObject.Edited"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEditObjectEventArgs"/> that contains the event data. </param>
        </member>
        <member name="E:SampSharp.GameMode.World.GlobalObject.Moved">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnObjectMoved(System.Int32)"/> callback is being called.
                This callback is called when an object is moved after <see cref="M:SampSharp.GameMode.World.GlobalObject.Move(SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.World.Vector)"/> (when it stops moving).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GlobalObject.Selected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSelectObject(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)"/> callback is being called.
                This callback is called when a player selects an object after <see cref="M:SampSharp.GameMode.Natives.Native.SelectObject(System.Int32)"/> has been used.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GlobalObject.Edited">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEditObject(System.Int32,System.Boolean,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> callback is being called.
                This callback is called when a player ends object edition mode.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.World.IOwnable`1">
            <summary>
                Contains an Owner property.
            </summary>
            <typeparam name="T">The type of the owner</typeparam>
        </member>
        <member name="T:SampSharp.GameMode.World.GtaPlayer">
            <summary>
                Represents a SA:MP player.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.GtaPlayer.InvalidId">
            <summary>
                Gets an ID commonly returned by methods to point out that no player matched the requirements.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.#ctor(System.Int32)">
            <summary>
                Initalizes a new instance of the Player class.
            </summary>
            <param name="id">The ID of the player to initialize.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetSpawnInfo(System.Int32,System.Int32,SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32,SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                This function can be used to change the spawn information of a specific player. It allows you to automatically set
                someone's spawn weapons, their team, skin and spawn position, normally used in case of minigames or automatic-spawn
                systems. This function is more crash-safe then using <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerSkin(System.Int32,System.Int32)"/> in
                <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSpawn(System.Int32)"/> and/or <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerRequestClass(System.Int32,System.Int32)"/>.
            </summary>
            <param name="team">The Team-ID of the chosen player.</param>
            <param name="skin">The skin which the player will spawn with.</param>
            <param name="position">The player's spawn position.</param>
            <param name="rotation">The direction in which the player needs to be facing after spawning.</param>
            <param name="weapon1">The first spawn-weapon for the player.</param>
            <param name="weapon1Ammo">The amount of ammunition for the primary spawnweapon.</param>
            <param name="weapon2">The second spawn-weapon for the player.</param>
            <param name="weapon2Ammo">The amount of ammunition for the second spawnweapon.</param>
            <param name="weapon3">The third spawn-weapon for the player.</param>
            <param name="weapon3Ammo">The amount of ammunition for the third spawnweapon.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.Spawn">
            <summary>
                (Re)Spawns a player.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetPositionFindZ(SampSharp.GameMode.World.Vector)">
            <summary>
                This sets this Player's position then adjusts the Player's z-coordinate to the nearest solid ground under the
                position.
            </summary>
            <param name="position">The position to move this Player to.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.IsInRangeOfPoint(System.Single,SampSharp.GameMode.World.Vector)">
            <summary>
                Check if this Player is in range of a point.
            </summary>
            <param name="range">The furthest distance the player can be from the point to be in range.</param>
            <param name="point">The point to check the range to.</param>
            <returns>True if this Player is in range of the point, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.GetDistanceFromPoint(SampSharp.GameMode.World.Vector)">
            <summary>
                Calculate the distance between this Player and a map coordinate.
            </summary>
            <param name="point">The point to calculate the distance from.</param>
            <returns>The distance between the player and the point as a float.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.IsPlayerStreamedIn(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Checks if a Player is streamed in this Player's client.
            </summary>
            <remarks>
                Players aren't streamed in on their own client, so if this Player is the same as the other Player, it will return
                false!
            </remarks>
            <remarks>
                Players stream out if they are more than 150 meters away (see server.cfg - stream_distance)
            </remarks>
            <param name="other">The Player to check is streamed in.</param>
            <returns>True if the other Player is streamed in for this Player, False if not.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetAmmo(SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Set the ammo of this Player's weapon.
            </summary>
            <param name="weapon">The weapon to set the ammo of.</param>
            <param name="ammo">The amount of ammo to set.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.GiveWeapon(SampSharp.GameMode.Definitions.Weapon,System.Int32)">
            <summary>
                Give this Player a Weapon with a specified amount of ammo.
            </summary>
            <param name="weapon">The Weapon to give to this Player.</param>
            <param name="ammo">The amount of ammo to give to this Player.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ResetWeapons">
            <summary>
                Removes all weapons from this Player.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetArmedWeapon(SampSharp.GameMode.Definitions.Weapon)">
            <summary>
                Sets the armed weapon of this Player.
            </summary>
            <param name="weapon">The weapon that the player should be armed with.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.GetWeaponData(System.Int32,SampSharp.GameMode.Definitions.Weapon@,System.Int32@)">
            <summary>
                Get the Weapon and ammo in this Player's weapon slot.
            </summary>
            <param name="slot">The weapon slot to get data for (0-12).</param>
            <param name="weapon">The variable in which to store the weapon, passed by reference.</param>
            <param name="ammo">The variable in which to store the ammo, passed by reference.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.GiveMoney(System.Int32)">
            <summary>
                Give money to this Player.
            </summary>
            <param name="money">The amount of money to give this Player. Use a minus value to take money.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ResetMoney">
            <summary>
                Reset this Player's money to $0.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.GetKeys(SampSharp.GameMode.Definitions.Keys@,System.Int32@,System.Int32@)">
            <summary>
                Check which keys this Player is pressing.
            </summary>
            <remarks>
                Only the FUNCTION of keys can be detected; not actual keys. You can not detect if the player presses space, but you
                can detect if they press sprint (which can be mapped (assigned) to ANY key, but is space by default)).
            </remarks>
            <param name="keys">A set of bits containing this Player's key states</param>
            <param name="updown">Up or Down value, passed by reference.</param>
            <param name="leftright">Left or Right value, passed by reference.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetTime(System.Int32,System.Int32)">
            <summary>
                Sets the clock of this Player to a specific value. This also changes the daytime. (night/day etc.)
            </summary>
            <param name="hour">Hour to set (0-23).</param>
            <param name="minutes">Minutes to set (0-59).</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.GetTime(System.Int32@,System.Int32@)">
            <summary>
                Get this Player's current game time. Set by <see cref="M:SampSharp.GameMode.Natives.Native.SetWorldTime(System.Int32)"/>, <see cref="M:SampSharp.GameMode.Natives.Native.SetWorldTime(System.Int32)"/>,
                or by <see cref="M:SampSharp.GameMode.World.GtaPlayer.ToggleClock(System.Boolean)"/>.
            </summary>
            <param name="hour">The variable to store the hour in, passed by reference.</param>
            <param name="minutes">The variable to store the minutes in, passed by reference.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ToggleClock(System.Boolean)">
            <summary>
                Show/Hide the in-game clock (top right corner) for this Player.
            </summary>
            <remarks>
                Time is not synced with other players!
            </remarks>
            <param name="toggle">True to show, False to hide.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetWeather(System.Int32)">
            <summary>
                Set this Player's weather. If <see cref="M:SampSharp.GameMode.World.GtaPlayer.ToggleClock(System.Boolean)"/> has been used to enable the clock, weather changes will
                interpolate (gradually change), otherwise will change instantly.
            </summary>
            <param name="weather">The weather to set.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ForceClassSelection">
            <summary>
                Forces this Player to go back to class selection.
            </summary>
            <remarks>
                The player will not return to class selection until they re-spawn. This can be achieved with
                <see cref="M:SampSharp.GameMode.World.GtaPlayer.ToggleSpectating(System.Boolean)"/>
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SelectTextDraw(SampSharp.GameMode.SAMP.Color)">
            <summary>
                Display the cursor and allow this Player to select a textdraw.
            </summary>
            <param name="hoverColor">The color of the textdraw when hovering over with mouse.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.CancelSelectTextDraw">
            <summary>
                Cancel textdraw selection with the mouse.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.PlayCrimeReport(System.Int32,System.Int32)">
            <summary>
                This function plays a crime report for this Player - just like in single-player when CJ commits a crime.
            </summary>
            <param name="suspectid">The ID of the suspect player which will be described in the crime report.</param>
            <param name="crime">The crime ID, which will be reported as a 10-code (i.e. 10-16 if 16 was passed as the crimeid).</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.PlayAudioStream(System.String,SampSharp.GameMode.World.Vector,System.Single)">
            <summary>
                Play an 'audio stream' for this Player. Normal audio files also work (e.g. MP3).
            </summary>
            <param name="url">
                The url to play. Valid formats are mp3 and ogg/vorbis. A link to a .pls (playlist) file will play
                that playlist.
            </param>
            <param name="position">The position at which to play the audio. Has no effect unless usepos is set to True.</param>
            <param name="distance">The distance over which the audio will be heard. Has no effect unless usepos is set to True.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.PlayAudioStream(System.String)">
            <summary>
                Play an 'audio stream' for this Player. Normal audio files also work (e.g. MP3).
            </summary>
            <param name="url">
                The url to play. Valid formats are mp3 and ogg/vorbis. A link to a .pls (playlist) file will play
                that playlist.
            </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.StopAudioStream">
            <summary>
                Stops the current audio stream for this Player.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetShopName(System.String)">
            <summary>
                Loads or unloads an interior script for this Player. (for example the ammunation menu)
            </summary>
            <param name="shopname"></param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetSkillLevel(SampSharp.GameMode.Definitions.WeaponSkill,System.Int32)">
            <summary>
                Set the skill level of a certain weapon type for this Player.
            </summary>
            <remarks>
                The skill parameter is NOT the weapon ID, it is the skill type.
            </remarks>
            <param name="skill">The weapon type you want to set the skill of.</param>
            <param name="level">
                The skill level to set for that weapon, ranging from 0 to 999. (A level out of range will max it
                out)
            </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.RemoveBuilding(System.Int32,SampSharp.GameMode.World.Vector,System.Single)">
            <summary>
                Removes a standard San Andreas model for this Player within a specified range.
            </summary>
            <param name="modelid">The model to remove.</param>
            <param name="point">The point around which the objects will be removed.</param>
            <param name="radius">The radius. Objects within this radius from the coordinates above will be removed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetAttachedObject(System.Int32,System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Attach an object to a specific bone on this Player.
            </summary>
            <param name="index">The index (slot) to assign the object to (0-9).</param>
            <param name="modelid">The model to attach.</param>
            <param name="bone">The bone to attach the object to.</param>
            <param name="offset">offset for the object position.</param>
            <param name="rotation">rotation of the object.</param>
            <param name="scale">scale of the object.</param>
            <param name="materialcolor1">The first object color to set.</param>
            <param name="materialcolor2">The second object color to set.</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.RemoveAttachedObject(System.Int32)">
            <summary>
                Remove an attached object from this Player.
            </summary>
            <param name="index">The index of the object to remove (set with <see cref="M:SampSharp.GameMode.World.GtaPlayer.SetAttachedObject(System.Int32,System.Int32,System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.SAMP.Color)"/>).</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.IsAttachedObjectSlotUsed(System.Int32)">
            <summary>
                Check if this Player has an object attached in the specified index (slot).
            </summary>
            <param name="index">The index (slot) to check.</param>
            <returns>True if the slot is used, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.DoEditAttachedObject(System.Int32)">
            <summary>
                Enter edition mode for an attached object.
            </summary>
            <param name="index">The index (slot) of the attached object to edit.</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetChatBubble(System.String,SampSharp.GameMode.SAMP.Color,System.Single,System.Int32)">
            <summary>
                Creates a chat bubble above this Player's name tag.
            </summary>
            <param name="text">The text to display.</param>
            <param name="color">The text color.</param>
            <param name="drawdistance">The distance from where players are able to see the chat bubble.</param>
            <param name="expiretime">The time in miliseconds the bubble should be displayed for.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.PutInVehicle(SampSharp.GameMode.World.GtaVehicle,System.Int32)">
            <summary>
                Puts this Player in a vehicle.
            </summary>
            <param name="vehicle">The vehicle for the player to be put in.</param>
            <param name="seatid">The ID of the seat to put the player in.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.PutInVehicle(SampSharp.GameMode.World.GtaVehicle)">
            <summary>
                Puts this Player in a vehicle as driver.
            </summary>
            <param name="vehicle">The vehicle for the player to be put in.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.RemoveFromVehicle">
            <summary>
                Removes/ejects this Player from his vehicle.
            </summary>
            <remarks>
                The exiting animation is not synced for other players.
                This function will not work when used in <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterVehicle(System.Int32,System.Int32,System.Boolean)"/>, because the player isn't in
                the vehicle when the callback is called. Use <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerStateChange(System.Int32,System.Int32,System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ToggleControllable(System.Boolean)">
            <summary>
                Toggles whether this Player can control themselves, basically freezes them.
            </summary>
            <param name="toggle">False to freeze the player or True to unfreeze them.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.PlaySound(System.Int32,SampSharp.GameMode.World.Vector)">
            <summary>
                Plays the specified sound for this Player at a specific point.
            </summary>
            <param name="soundid">The sound to play.</param>
            <param name="point">Point for the sound to play at.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.PlaySound(System.Int32)">
            <summary>
                Plays the specified sound for this Player.
            </summary>
            <param name="soundid">The sound to play.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ApplyAnimation(System.String,System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Apply an animation to this Player.
            </summary>
            <remarks>
                The <paramref name="forcesync" /> parameter, in most cases is not needed since players sync animations themselves.
                The <paramref name="forcesync" /> parameter can force all players who can see this Player to play the animation
                regardless of whether the player is performing that animation. This is useful in circumstances where the player
                can't sync the animation themselves. For example, they may be paused.
            </remarks>
            <param name="animlib">The name of the animation library in which the animation to apply is in.</param>
            <param name="animname">The name of the animation, within the library specified.</param>
            <param name="fDelta">The speed to play the animation (use 4.1).</param>
            <param name="loop">Set to True for looping otherwise set to False for playing animation sequence only once.</param>
            <param name="lockx">
                Set to False to return player to original x position after animation is complete for moving
                animations. The opposite effect occurs if set to True.
            </param>
            <param name="locky">
                Set to False to return player to original y position after animation is complete for moving
                animations. The opposite effect occurs if set to True.
            </param>
            <param name="freeze">Will freeze the player in position after the animation finishes.</param>
            <param name="time">Timer in milliseconds. For a never ending loop it should be 0.</param>
            <param name="forcesync">Set to True to force playerid to sync animation with other players in all instances</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ApplyAnimation(System.String,System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                Apply an animation to this Player.
            </summary>
            <param name="animlib">The name of the animation library in which the animation to apply is in.</param>
            <param name="animname">The name of the animation, within the library specified.</param>
            <param name="fDelta">The speed to play the animation (use 4.1).</param>
            <param name="loop">Set to True for looping otherwise set to False for playing animation sequence only once.</param>
            <param name="lockx">
                Set to False to return player to original x position after animation is complete for moving
                animations. The opposite effect occurs if set to True.
            </param>
            <param name="locky">
                Set to False to return player to original y position after animation is complete for moving
                animations. The opposite effect occurs if set to True.
            </param>
            <param name="freeze">Will freeze the player in position after the animation finishes.</param>
            <param name="time">Timer in milliseconds. For a never ending loop it should be 0.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ClearAnimations(System.Boolean)">
            <summary>
                Clears all animations for this Player.
            </summary>
            <param name="forcesync">Specifies whether the animation should be shown to streamed in players.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ClearAnimations">
            <summary>
                Clears all animations for this Player.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.GetAnimationName(System.String@,System.String@)">
            <summary>
                Get the animation library/name this Player is playing.
            </summary>
            <param name="animlib">String variable that stores the animation library.</param>
            <param name="animname">String variable that stores the animation name.</param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetCheckpoint(SampSharp.GameMode.World.Vector,System.Single)">
            <summary>
                Sets a checkpoint (red circle) for this Player. Also shows a red blip on the radar.
            </summary>
            <remarks>
                Checkpoints created on server-created objects will appear down on the 'real' ground, but will still function
                correctly.
                There is no fix available for this issue. A pickup can be used instead.
            </remarks>
            <param name="point">The point to set the checkpoint at.</param>
            <param name="size">The size of the checkpoint.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.DisableCheckpoint">
            <summary>
                Disable any initialized checkpoints for this Player.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetRaceCheckpoint(SampSharp.GameMode.Definitions.CheckpointType,SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Single)">
            <summary>
                Creates a race checkpoint. When this Player enters it, the <see cref="E:SampSharp.GameMode.World.GtaPlayer.EnterRaceCheckpoint"/> callback is called.
            </summary>
            <param name="type">Type of checkpoint.</param>
            <param name="point">The point to set the checkpoint at.</param>
            <param name="nextPosition">Coordinates of the next point, for the arrow facing direction.</param>
            <param name="size">Size (diameter) of the checkpoint</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.DisableRaceCheckpoint">
            <summary>
                Disable any initialized race checkpoints for this Player.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetWorldBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Set the world boundaries for this Player - players can not go out of the boundaries.
            </summary>
            <remarks>
                You can reset the player world bounds by setting the parameters to 20000.0000, -20000.0000, 20000.0000,
                -20000.0000.
            </remarks>
            <param name="xMax">The maximum X coordinate the player can go to.</param>
            <param name="xMin">The minimum X coordinate the player can go to.</param>
            <param name="yMax">The maximum Y coordinate the player can go to.</param>
            <param name="yMin">The minimum Y coordinate the player can go to.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetPlayerMarker(SampSharp.GameMode.World.GtaPlayer,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Change the colour of this Player's nametag and radar blip for another Player.
            </summary>
            <param name="player">The player whose color will be changed.</param>
            <param name="color">New color.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ShowNameTagForPlayer(SampSharp.GameMode.World.GtaPlayer,System.Boolean)">
            <summary>
                This functions allows you to toggle the drawing of player nametags, healthbars and armor bars which display above
                their head. For use of a similar function like this on a global level, <see cref="M:SampSharp.GameMode.Natives.Native.ShowNameTags(System.Boolean)"/> function.
            </summary>
            <remarks>
                <see cref="M:SampSharp.GameMode.Natives.Native.ShowNameTags(System.Boolean)"/> must be set to True to be able to show name tags with
                <see cref="M:SampSharp.GameMode.World.GtaPlayer.ShowNameTagForPlayer(SampSharp.GameMode.World.GtaPlayer,System.Boolean)"/>.
            </remarks>
            <param name="player">Player whose name tag will be shown or hidden.</param>
            <param name="show">True to show name tag, False to hide name tag.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetMapIcon(System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.Definitions.PlayerMarkersMode,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Definitions.MapIconType)">
            <summary>
                This function allows you to place your own icons on the map, enabling you to emphasise the locations of banks,
                airports or whatever else you want. A total of 63 icons are available in GTA: San Andreas, all of which can be used
                using this function. You can also specify the color of the icon, which allows you to change the square icon (ID:
                0).
            </summary>
            <param name="iconid">The player's icon ID, ranging from 0 to 99, to be used in RemovePlayerMapIcon.</param>
            <param name="position">The coordinates of the place where you want the icon to be.</param>
            <param name="markertype">The icon to set.</param>
            <param name="color">The color of the icon, this should only be used with the square icon (ID: 0).</param>
            <param name="style">The style of icon.</param>
            <returns>True if it was successful, False otherwise (e.g. the player isn't connected).</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.RemovePlayerMapIcon(System.Int32)">
            <summary>
                Removes a map icon that was set earlier for this Player.
            </summary>
            <param name="iconid">The ID of the icon to remove. This is the second parameter of <see cref="M:SampSharp.GameMode.World.GtaPlayer.SetMapIcon(System.Int32,SampSharp.GameMode.World.Vector,SampSharp.GameMode.Definitions.PlayerMarkersMode,SampSharp.GameMode.SAMP.Color,SampSharp.GameMode.Definitions.MapIconType)"/>.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetCameraLookAt(SampSharp.GameMode.World.Vector,SampSharp.GameMode.Definitions.CameraCut)">
            <summary>
                Set the direction this Player's camera looks at. To be used in combination with SetPlayerCameraPos.
            </summary>
            <param name="point">The coordinates for this Player's camera to look at.</param>
            <param name="cut">The style the camera-position changes.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SetCameraLookAt(SampSharp.GameMode.World.Vector)">
            <summary>
                Set the direction this Player's camera looks at. To be used in combination with SetPlayerCameraPos.
            </summary>
            <param name="point">The coordinates for this Player's camera to look at.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.InterpolateCameraPos(SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Int32,SampSharp.GameMode.Definitions.CameraCut)">
            <summary>
                Move this Player's camera from one position to another, within the set time.
            </summary>
            <param name="from">The position the camera should start to move from.</param>
            <param name="to">The position the camera should move to.</param>
            <param name="time">Time in milliseconds.</param>
            <param name="cut">The jumpcut to use. Defaults to CameraCut.Cut. Set to CameraCut. Move for a smooth movement.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.InterpolateCameraLookAt(SampSharp.GameMode.World.Vector,SampSharp.GameMode.World.Vector,System.Int32,SampSharp.GameMode.Definitions.CameraCut)">
            <summary>
                Interpolate this Player's camera's 'look at' point between two coordinates with a set speed.
            </summary>
            <param name="from">The position the camera should start to move from.</param>
            <param name="to">The position the camera should move to.</param>
            <param name="time">Time in milliseconds to complete interpolation.</param>
            <param name="cut">The 'jumpcut' to use. Defaults to CameraCut.Cut (pointless). Set to CameraCut.Move for interpolation.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.IsInVehicle(SampSharp.GameMode.World.GtaVehicle)">
            <summary>
                Checks if this Player is in a specific vehicle.
            </summary>
            <param name="vehicle">The vehicle.</param>
            <returns>True if player is in the vehicle, otherwise False.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.EnableStuntBonus(System.Boolean)">
            <summary>
                Toggle stunt bonuses for this Player.
            </summary>
            <param name="enable">True to enable stunt bonuses, False to disable them.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ToggleSpectating(System.Boolean)">
            <summary>
                Toggle this Player's spectate mode.
            </summary>
            <remarks>
                When the spectating is turned off, OnPlayerSpawn will automatically be called.
            </remarks>
            <param name="toggle">True to enable spectating and False to disable.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SpectatePlayer(SampSharp.GameMode.World.GtaPlayer,SampSharp.GameMode.Definitions.SpectateMode)">
            <summary>
                Makes this Player spectate (watch) another player.
            </summary>
            <remarks>
                Order is CRITICAL! Ensure that you use <see cref="M:SampSharp.GameMode.World.GtaPlayer.ToggleSpectating(System.Boolean)"/> before <see cref="M:SampSharp.GameMode.World.GtaPlayer.SpectatePlayer(SampSharp.GameMode.World.GtaPlayer,SampSharp.GameMode.Definitions.SpectateMode)"/>.
            </remarks>
            <param name="targetPlayer">The Player that should be spectated.</param>
            <param name="mode">The mode to spectate with.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SpectatePlayer(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Makes this Player spectate (watch) another player.
            </summary>
            <remarks>
                Order is CRITICAL! Ensure that you use <see cref="M:SampSharp.GameMode.World.GtaPlayer.ToggleSpectating(System.Boolean)"/> before <see cref="M:SampSharp.GameMode.World.GtaPlayer.SpectatePlayer(SampSharp.GameMode.World.GtaPlayer,SampSharp.GameMode.Definitions.SpectateMode)"/>.
            </remarks>
            <param name="targetPlayer">The Player that should be spectated.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SpectateVehicle(SampSharp.GameMode.World.GtaVehicle,SampSharp.GameMode.Definitions.SpectateMode)">
            <summary>
                Sets this Player to spectate another vehicle, i.e. see what its driver sees.
            </summary>
            <remarks>
                Order is CRITICAL! Ensure that you use <see cref="M:SampSharp.GameMode.World.GtaPlayer.ToggleSpectating(System.Boolean)"/> before <see cref="M:SampSharp.GameMode.World.GtaPlayer.SpectateVehicle(SampSharp.GameMode.World.GtaVehicle,SampSharp.GameMode.Definitions.SpectateMode)"/>.
            </remarks>
            <param name="targetVehicle">The vehicle to spectate.</param>
            <param name="mode">Spectate mode.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SpectateVehicle(SampSharp.GameMode.World.GtaVehicle)">
            <summary>
                Sets this Player to spectate another vehicle, i.e. see what its driver sees.
            </summary>
            <remarks>
                Order is CRITICAL! Ensure that you use <see cref="M:SampSharp.GameMode.World.GtaPlayer.ToggleSpectating(System.Boolean)"/> before <see cref="M:SampSharp.GameMode.World.GtaPlayer.SpectateVehicle(SampSharp.GameMode.World.GtaVehicle,SampSharp.GameMode.Definitions.SpectateMode)"/>.
            </remarks>
            <param name="targetVehicle">The vehicle to spectate.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.GetSurfingObjectID">
            <summary>
                Returns the ID of the object this Player is surfing on.
            </summary>
            <returns>
                The ID of the moving object the player is surfing. If the player isn't surfing a moving object, it will return
                <see cref="F:SampSharp.GameMode.Definitions.Misc.InvalidObjectId"/>
            </returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.StartRecordingPlayerData(SampSharp.GameMode.Definitions.PlayerRecordingType,System.String)">
            <summary>
                Starts recording this Player's movements to a file, which can then be reproduced by an NPC.
            </summary>
            <param name="recordtype">The type of recording.</param>
            <param name="recordname">
                Name of the file which will hold the recorded data. It will be saved in scriptfiles, with an
                automatically added .rec extension.
            </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.StopRecordingPlayerData">
            <summary>
                Stops all the recordings that had been started with <see cref="M:SampSharp.GameMode.World.GtaPlayer.StartRecordingPlayerData(SampSharp.GameMode.Definitions.PlayerRecordingType,System.String)"/> for this Player.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendClientMessage(SampSharp.GameMode.SAMP.Color,System.String)">
            <summary>
                This function sends a message to this Player with a chosen color in the chat. The whole line in the chatbox will be
                in the set color unless colour embedding is used.
            </summary>
            <param name="color">The color of the message.</param>
            <param name="message">The text that will be displayed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.Kick">
            <summary>
                Kicks this Player from the server. They will have to quit the game and re-connect if they wish to continue playing.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.Ban">
            <summary>
                Ban this Player. The ban will be IP-based, and be saved in the samp.ban file in the
                server's root directory. <see cref="M:SampSharp.GameMode.World.GtaPlayer.Ban(System.String)"/> allows you to ban with a reason, while you can ban and unban
                IPs
                using the RCON banip and unbanip commands.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.Ban(System.String)">
            <summary>
                Ban this Player with a reason.
            </summary>
            <param name="reason">The reason for the ban.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendClientMessage(SampSharp.GameMode.SAMP.Color,System.String,System.Object[])">
            <summary>
                This function sends a message to this Player with a chosen color in the chat. The whole line in the chatbox will be
                in the set color unless colour embedding is used.
            </summary>
            <param name="color">The color of the message.</param>
            <param name="messageFormat">The composite format string of the text that will be displayed (max 144 characters).</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendClientMessage(System.String)">
            <summary>
                This function sends a message to this Player in white in the chat. The whole line in the chatbox will be
                in the set color unless colour embedding is used.
            </summary>
            <param name="message">The text that will be displayed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendClientMessage(System.String,System.Object[])">
            <summary>
                This function sends a message to this Player in white in the chat. The whole line in the chatbox will be
                in the set color unless colour embedding is used.
            </summary>
            <param name="messageFormat">The composite format string of the text that will be displayed (max 144 characters).</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendClientMessageToAll(SampSharp.GameMode.SAMP.Color,System.String)">
            <summary>
                Displays a message in chat to all players.
            </summary>
            <param name="color">The color of the message.</param>
            <param name="message">The message to show (max 144 characters).</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendClientMessageToAll(SampSharp.GameMode.SAMP.Color,System.String,System.Object[])">
            <summary>
                Displays a message in chat to all players.
            </summary>
            <param name="color">The color of the message.</param>
            <param name="messageFormat">The composite format string of the text that will be displayed.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendClientMessageToAll(System.String)">
            <summary>
                Displays a message in white in chat to all players.
            </summary>
            <param name="message">The message to show.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendClientMessageToAll(System.String,System.Object[])">
            <summary>
                Displays a message in white in chat to all players..
            </summary>
            <param name="messageFormat">The composite format string of the text that will be displayed.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendPlayerMessageToPlayer(SampSharp.GameMode.World.GtaPlayer,System.String)">
            <summary>
                Sends a message in the name this Player to another player on the server. The message will appear in the chat box
                but can only be seen by <paramref name="receiver" />. The line will start with the this Player's name in his color,
                followed by the <paramref name="message" /> in white.
            </summary>
            <param name="receiver">The Player who will recieve the message</param>
            <param name="message">The message that will be sent.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendPlayerMessageToAll(System.String)">
            <summary>
                Sends a message in the name of this Player to all other players on the server. The line will start with the this
                Player's name in their color, followed by the <paramref name="message" /> in white.
            </summary>
            <param name="message">The message that will be sent.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.GameTextForAll(System.String,System.Int32,System.Int32)">
            <summary>
                Shows 'game text' (on-screen text) for a certain length of time for all players.
            </summary>
            <param name="text">The text to be displayed.</param>
            <param name="time">The duration of the text being shown in milliseconds.</param>
            <param name="style">The style of text to be displayed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.GameText(System.String,System.Int32,System.Int32)">
            <summary>
                Shows 'game text' (on-screen text) for a certain length of time for this Player.
            </summary>
            <param name="text">The text to be displayed.</param>
            <param name="time">The duration of the text being shown in milliseconds.</param>
            <param name="style">The style of text to be displayed.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.CreateExplosionForAll(SampSharp.GameMode.World.Vector,System.Int32,System.Single)">
            <summary>
                Create an explosion at the specified coordinates.
            </summary>
            <param name="position">The position of the explosion.</param>
            <param name="type">The type of explosion.</param>
            <param name="radius">The explosion radius.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.CreateExposionForAll(SampSharp.GameMode.World.Vector,System.Int32,System.Single,System.Int32)">
            <summary>
                Create an explosion at the specified coordinates.
            </summary>
            <param name="position">The position of the explosion.</param>
            <param name="type">The type of explosion.</param>
            <param name="radius">The explosion radius.</param>
            <param name="interior">The interior of the explosion.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.CreateExposionForAll(SampSharp.GameMode.World.Vector,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
                Create an explosion at the specified coordinates.
            </summary>
            <param name="position">The position of the explosion.</param>
            <param name="type">The type of explosion.</param>
            <param name="radius">The explosion radius.</param>
            <param name="interior">The interior of the explosion.</param>
            <param name="virtualworld">The virtualworld of the explosion.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.CreateExplosion(SampSharp.GameMode.World.Vector,System.Int32,System.Single)">
            <summary>
                Creates an explosion for a player.
                Only the specific player will see explosion and feel its effects.
                This is useful when you want to isolate explosions from other players or to make them only appear in specific
                virtual worlds.
            </summary>
            <param name="position">The position of the explosion.</param>
            <param name="type">The explosion type.</param>
            <param name="radius">The radius of the explosion.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendDeathMessage(SampSharp.GameMode.World.GtaPlayer,SampSharp.GameMode.World.GtaPlayer,SampSharp.GameMode.Definitions.Weapon)">
            <summary>
                Adds a death to the 'killfeed' on the right-hand side of the screen of this Player.
            </summary>
            <param name="killer">The Player that killer the <paramref name="killee" />.</param>
            <param name="killee">The player that has been killed.</param>
            <param name="weapon">The reason for this Player's death.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.SendDeathMessageToAll(SampSharp.GameMode.World.GtaPlayer,SampSharp.GameMode.World.GtaPlayer,SampSharp.GameMode.Definitions.Weapon)">
            <summary>
                Adds a death to the 'killfeed' on the right-hand side of the screen.
            </summary>
            <param name="killer">The Player that killer the <paramref name="killee" />.</param>
            <param name="killee">The player that has been killed.</param>
            <param name="weapon">The reason for this Player's death.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnConnected(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.Connected"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnDisconnected(SampSharp.GameMode.Events.PlayerDisconnectedEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.Disconnected"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerDisconnectedEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnCleanup(SampSharp.GameMode.Events.PlayerDisconnectedEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.Cleanup"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerDisconnectedEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnSpawned(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.Spawned"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnDeath(SampSharp.GameMode.Events.PlayerDeathEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.Died"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerDeathEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnText(SampSharp.GameMode.Events.PlayerTextEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.Text"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerTextEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnCommandText(SampSharp.GameMode.Events.PlayerTextEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.CommandText"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerTextEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnRequestClass(SampSharp.GameMode.Events.PlayerRequestClassEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.RequestClass"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerRequestClassEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnEnterVehicle(SampSharp.GameMode.Events.PlayerEnterVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.EnterVehicle"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEnterVehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnExitVehicle(SampSharp.GameMode.Events.PlayerVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.ExitVehicle"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnStateChanged(SampSharp.GameMode.Events.PlayerStateEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.StateChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerStateEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnEnterCheckpoint(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.EnterCheckpoint"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnLeaveCheckpoint(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.LeaveCheckpoint"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnEnterRaceCheckpoint(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.EnterRaceCheckpoint"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnLeaveRaceCheckpoint(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.LeaveRaceCheckpoint"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnRequestSpawn(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.RequestSpawn"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnPickUpPickup(SampSharp.GameMode.Events.PlayerPickupEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.PickUpPickup"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerPickupEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnEnterExitModShop(SampSharp.GameMode.Events.PlayerEnterModShopEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.EnterExitModShop"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEnterModShopEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnSelectedMenuRow(SampSharp.GameMode.Events.PlayerSelectedMenuRowEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.SelectedMenuRow"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerSelectedMenuRowEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnExitedMenu(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.ExitedMenu"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnInteriorChanged(SampSharp.GameMode.Events.PlayerInteriorChangedEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.InteriorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerInteriorChangedEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnKeyStateChanged(SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.KeyStateChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerKeyStateChangedEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnUpdate(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.Update"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnStreamIn(SampSharp.GameMode.Events.StreamPlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.StreamIn"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.StreamPlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnStreamOut(SampSharp.GameMode.Events.StreamPlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.StreamOut"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.StreamPlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnDialogResponse(SampSharp.GameMode.Events.DialogResponseEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.DialogResponse"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.DialogResponseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnTakeDamage(SampSharp.GameMode.Events.PlayerDamageEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.TakeDamage"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerDamageEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnGiveDamage(SampSharp.GameMode.Events.PlayerDamageEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.GiveDamage"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerDamageEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnClickMap(SampSharp.GameMode.Events.PlayerClickMapEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.ClickMap"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerClickMapEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnClickTextDraw(SampSharp.GameMode.Events.PlayerClickTextDrawEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.ClickTextDraw"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerClickTextDrawEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnCancelClickTextDraw(SampSharp.GameMode.Events.PlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.CancelClickTextDraw"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnClickPlayerTextDraw(SampSharp.GameMode.Events.PlayerClickTextDrawEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.ClickPlayerTextDraw"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerClickTextDrawEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnClickPlayer(SampSharp.GameMode.Events.PlayerClickPlayerEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.ClickPlayer"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerClickPlayerEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnEditObject(SampSharp.GameMode.Events.PlayerEditObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.EditObject"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEditObjectEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnEditAttachedObject(SampSharp.GameMode.Events.PlayerEditAttachedObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.EditAttachedObject"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEditAttachedObjectEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnSelectObject(SampSharp.GameMode.Events.PlayerSelectObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.SelectObject"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerSelectObjectEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.OnWeaponShot(SampSharp.GameMode.Events.WeaponShotEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaPlayer.WeaponShot"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.WeaponShotEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaPlayer.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.PVars">
            <summary>
                Gets a collections of Player Variables of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Key">
            <summary>
                Gets a set of KeyHandlers for different keystates.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Id">
            <summary>
                Gets the ID of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Name">
            <summary>
                Gets or sets the name of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Angle">
            <summary>
                Gets or sets the facing angle of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Interior">
            <summary>
                Gets or sets the interior of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.VirtualWorld">
            <summary>
                Gets or sets the virtual world of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Health">
            <summary>
                Gets or sets the health of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Armour">
            <summary>
                Gets or sets the armour of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.WeaponAmmo">
            <summary>
                Gets the ammo of the Weapon this Player is currently holding.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.WeaponState">
            <summary>
                Gets the WeaponState of the Weapon this Player is currently holding.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Weapon">
            <summary>
                Gets the Weapon this Player is currently holding.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.TargetPlayer">
            <summary>
                Gets the Player this Player is aiming at.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Team">
            <summary>
                Gets or sets the team this Player is in.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Score">
            <summary>
                Gets or sets the score of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.DrunkLevel">
            <summary>
                Gets or sets the drunkness level of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Color">
            <summary>
                Gets or sets the Color of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Skin">
            <summary>
                Gets or sets the skin of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Money">
            <summary>
                Gets or sets the money of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.State">
            <summary>
                Gets the state of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.IP">
            <summary>
                Gets the IP of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Ping">
            <summary>
                Gets the ping of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.WantedLevel">
            <summary>
                Gets or sets the wanted level of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.FightStyle">
            <summary>
                Gets or sets the FightStyle of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Velocity">
            <summary>
                Gets or sets the velocity of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.VehicleSeat">
            <summary>
                Gets the vehicle seat this Player sits on.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.AnimationIndex">
            <summary>
                Gets the index of the animation this Player is playing.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.SpecialAction">
            <summary>
                Gets or sets the SpecialAction of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.CameraPosition">
            <summary>
                Gets or sets the position of this Players's camera.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.CameraFrontVector">
            <summary>
                Gets the front vector of this Player's camera.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.CameraMode">
            <summary>
                Gets the mode of this Player's camera.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.InAnyVehicle">
            <summary>
                Gets whether this Player is currently in any vehicle.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.InCheckpoint">
            <summary>
                Gets whether this Player is in his checkpoint.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.InRaceCheckpoint">
            <summary>
                Gets whether this Player is in his race-checkpoint.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.SurfingVehicle">
            <summary>
                Gets the Vehicle that this Player is surfing.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Vehicle">
            <summary>
                Gets the Vehicle this Player is currently in.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.IsConnected">
            <summary>
                Gets whether this Player is connected to the server.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Rotation">
            <summary>
                Gets or sets the rotation of this Player.
            </summary>
            <remarks>
                Only the Z angle can be set!
            </remarks>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Position">
            <summary>
                Gets or sets the position of this Player.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.IsNPC">
            <summary>
                Gets whether this Player is an actual player or an NPC.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.IsAdmin">
            <summary>
                Gets whether this Player is logged into RCON.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.IsAlive">
            <summary>
                Gets whether this Player is alive;
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.NetworkStats">
            <summary>
                Gets this Player's network stats and saves them into a string.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.Version">
            <summary>
                Gets this Player's game version.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.GPCI">
            <summary>
                Gets this Player's GPCI string.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaPlayer.MaxPlayers">
            <summary>
                Gets the maximum number of players that can join the server, as set by the server var 'maxplayers' in server.cfg.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.Connected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerConnect(System.Int32)"/> is being called.
                This callback is called when a player connects to the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.Disconnected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerDisconnect(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player disconnects from the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.Cleanup">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerDisconnect(System.Int32,System.Int32)"/> is being called.
                This callback is called after a player disconnects from the server.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.Spawned">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSpawn(System.Int32)"/> is being called.
                This callback is called when a player spawns.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.Died">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/> is being called.
                This callback is triggered when the gamemode starts.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.Text">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerText(System.Int32,System.String)"/> is being called.
                Called when a player sends a chat message.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.CommandText">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerCommandText(System.Int32,System.String)"/> is being called.
                This callback is called when a player enters a command into the client chat window, e.g. /help.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.RequestClass">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerRequestClass(System.Int32,System.Int32)"/> is being called.
                Called when a player changes class at class selection (and when class selection first appears).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.EnterVehicle">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterVehicle(System.Int32,System.Int32,System.Boolean)"/> is being called.
                This callback is called when a player starts to enter a vehicle, meaning the player is not in vehicle yet at the
                time this callback is called.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.ExitVehicle">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerExitVehicle(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player exits a vehicle.
            </summary>
            <remarks>
                Not called if the player falls off a bike or is removed from a vehicle by other means such as using
                <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerPos(System.Int32,SampSharp.GameMode.World.Vector)"/>.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.StateChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerStateChange(System.Int32,System.Int32,System.Int32)"/> is being called.
                This callback is called when a player exits a vehicle.
            </summary>
            <remarks>
                Not called if the player falls off a bike or is removed from a vehicle by other means such as using
                <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerPos(System.Int32,SampSharp.GameMode.World.Vector)"/>.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.EnterCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterCheckpoint(System.Int32)"/> is being called.
                This callback is called when a player enters the checkpoint set for that player.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.LeaveCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerLeaveCheckpoint(System.Int32)"/> is being called.
                This callback is called when a player leaves the checkpoint set for that player.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.EnterRaceCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterRaceCheckpoint(System.Int32)"/> is being called.
                This callback is called when a player enters a race checkpoint.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.LeaveRaceCheckpoint">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerLeaveRaceCheckpoint(System.Int32)"/> is being called.
                This callback is called when a player leaves the race checkpoint.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.RequestSpawn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerRequestSpawn(System.Int32)"/> is being called.
                Called when a player attempts to spawn via class selection.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.PickUpPickup">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerPickUpPickup(System.Int32,System.Int32)"/> is being called.
                Called when a player picks up a pickup created with <see cref="M:SampSharp.GameMode.Natives.Native.CreatePickup(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32)"/>.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.EnterExitModShop">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnEnterExitModShop(System.Int32,System.Int32,System.Int32)"/> is being called.
                This callback is called when a player enters or exits a mod shop.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.SelectedMenuRow">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSelectedMenuRow(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player selects an item from a menu.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.ExitedMenu">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerExitedMenu(System.Int32)"/> is being called.
                Called when a player exits a menu.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.InteriorChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerInteriorChange(System.Int32,System.Int32,System.Int32)"/> is being called.
                Called when a player changes interior.
            </summary>
            <remarks>
                This is also called when <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerInterior(System.Int32,System.Int32)"/> is used.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.KeyStateChanged">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerKeyStateChange(System.Int32,System.Int32,System.Int32)"/> is being called.
                This callback is called when the state of any supported key is changed (pressed/released). Directional keys do not
                trigger this callback.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.Update">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerUpdate(System.Int32)"/> is being called.
                This callback is called everytime a client/player updates the server with their status.
            </summary>
            <remarks>
                This callback is called very frequently per second per player, only use it when you know what it's meant for.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.StreamIn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerStreamIn(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player is streamed by some other player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.StreamOut">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerStreamOut(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player is streamed out from some other player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.DialogResponse">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnDialogResponse(System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/> is being called.
                This callback is called when a player responds to a dialog shown using <see cref="M:SampSharp.GameMode.Natives.Native.ShowPlayerDialog(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)"/> by
                either clicking a button, pressing ENTER/ESC or double-clicking a list item (if using a list style dialog).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.TakeDamage">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerTakeDamage(System.Int32,System.Int32,System.Single,System.Int32,System.Int32)"/> is being called.
                This callback is called when a player takes damage.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.GiveDamage">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerGiveDamage(System.Int32,System.Int32,System.Single,System.Int32,System.Int32)"/> is being called.
                This callback is called when a player gives damage to another player.
            </summary>
            <remarks>
                One thing you can do with GiveDamage is detect when other players report that they have damaged a certain player,
                and that player hasn't taken any health loss. You can flag those players as suspicious.
                You can also set all players to the same team (so they don't take damage from other players) and process all health
                loss from other players manually.
                You might have a server where players get a wanted level if they attack Cop players (or some specific class). In
                that case you might trust GiveDamage over TakeDamage.
                There should be a lot you can do with it. You just have to keep in mind the levels of trust between clients. In
                most cases it's better to trust the client who is being damaged to report their health/armour (TakeDamage). SA-MP
                normally does this. GiveDamage provides some extra information which may be useful when you require a different
                level of trust.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.ClickMap">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickMap(System.Int32,System.Single,System.Single,System.Single)"/> is being called.
                This callback is called when a player places a target/waypoint on the pause menu map (by right-clicking).
            </summary>
            <remarks>
                The Z value provided is only an estimate; you may find it useful to use a plugin like the MapAndreas plugin to get
                a more accurate Z coordinate (or for teleportation; use <see cref="M:SampSharp.GameMode.Natives.Native.SetPlayerPosFindZ(System.Int32,SampSharp.GameMode.World.Vector)"/>).
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.ClickTextDraw">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player clicks on a textdraw.
            </summary>
            <remarks>
                The clickable area is defined by <see cref="M:SampSharp.GameMode.Natives.Native.TextDrawTextSize(System.Int32,System.Single,System.Single)"/>. The x and y parameters passed to that
                function must not be zero or negative.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.CancelClickTextDraw">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player cancels the textdraw select mode(ESC).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.ClickPlayerTextDraw">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayerTextDraw(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player clicks on a player-textdraw. It is not called when player cancels the select
                mode (ESC) - however, <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(System.Int32,System.Int32)"/> is.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.ClickPlayer">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayer(System.Int32,System.Int32,System.Int32)"/> is being called.
                Called when a player double-clicks on a player on the scoreboard.
            </summary>
            <remarks>
                There is currently only one 'source' (<see cref="F:SampSharp.GameMode.Definitions.PlayerClickSource.Scoreboard"/>). The existence of this argument
                suggests that more sources may be supported in the future.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.EditObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEditObject(System.Int32,System.Boolean,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> is being called.
                This callback is called when a player ends object edition mode.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.EditAttachedObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEditAttachedObject(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> is being called.
                This callback is called when a player ends attached object edition mode.
            </summary>
            <remarks>
                Editions should be discarded if response was '0' (cancelled). This must be done by storing the offsets etc. in an
                array BEFORE using EditAttachedObject.
            </remarks>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.SelectObject">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSelectObject(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)"/> is being called.
                This callback is called when a player selects an object after <see cref="M:SampSharp.GameMode.Natives.Native.SelectObject(System.Int32)"/> has been used.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaPlayer.WeaponShot">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerWeaponShot(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)"/> is being called.
                This callback is called when a player fires a shot from a weapon.
            </summary>
            <remarks>
                <see cref="F:SampSharp.GameMode.Definitions.BulletHitType.None"/>: the fX, fY and fZ parameters are normal coordinates;
                Others: the fX, fY and fZ are offsets from the center of hitid.
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.AttachCameraToObject">
            <summary>
                Attaches the player's camera to this PlayerObject.
            </summary>
            <remarks>
                This will attach the camera of the player whose object this is to this object.
            </remarks>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.OnMoved(SampSharp.GameMode.Events.PlayerObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.PlayerObject.Moved"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.ObjectEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.OnSelected(SampSharp.GameMode.Events.PlayerSelectObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.PlayerObject.Selected"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerSelectObjectEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.PlayerObject.OnEdited(SampSharp.GameMode.Events.PlayerEditObjectEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.PlayerObject.Edited"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEditObjectEventArgs"/> that contains the event data. </param>
        </member>
        <member name="E:SampSharp.GameMode.World.PlayerObject.Moved">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnObjectMoved(System.Int32)"/> callback is being called.
                This callback is called when an object is moved after <see cref="M:SampSharp.GameMode.World.PlayerObject.Move(SampSharp.GameMode.World.Vector,System.Single,SampSharp.GameMode.World.Vector)"/> (when it stops moving).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.PlayerObject.Selected">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerSelectObject(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)"/> callback is being called.
                This callback is called when a player selects an object after <see cref="M:SampSharp.GameMode.Natives.Native.SelectObject(System.Int32)"/> has been used.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.PlayerObject.Edited">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEditObject(System.Int32,System.Boolean,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> callback is being called.
                This callback is called when a player ends object edition mode.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.PlayerTextDraw">
            <summary>
                Represents a player-textdraw.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Display.PlayerTextDraw.InvalidId">
            <summary>
                Gets an ID commonly returned by methods to point out that no textdraw matched the requirements.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.#ctor(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.PlayerTextDraw"/> class.
            </summary>
            <param name="owner">The owner of the player-textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.#ctor(SampSharp.GameMode.World.GtaPlayer,System.Single,System.Single,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.PlayerTextDraw"/> class.
            </summary>
            <param name="owner">The owner of the player-textdraw.</param>
            <param name="x">The x-position of the player-textdraw on the screen.</param>
            <param name="y">The y-position of the player-textdraw on the screen.</param>
            <param name="text">The text of the player-textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.#ctor(SampSharp.GameMode.World.GtaPlayer,System.Single,System.Single,System.String,SampSharp.GameMode.Definitions.TextDrawFont)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.PlayerTextDraw"/> class.
            </summary>
            <param name="owner">The owner of the player-textdraw.</param>
            <param name="x">The x-position of the player-textdraw on the screen.</param>
            <param name="y">The y-position of the player-textdraw on the screen.</param>
            <param name="text">The text of the player-textdraw.</param>
            <param name="font">The <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont"/> of this textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.#ctor(SampSharp.GameMode.World.GtaPlayer,System.Single,System.Single,System.String,SampSharp.GameMode.Definitions.TextDrawFont,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.PlayerTextDraw"/> class.
            </summary>
            <param name="owner">The owner of the player-textdraw.</param>
            <param name="x">The x-position of the player-textdraw on the screen.</param>
            <param name="y">The y-position of the player-textdraw on the screen.</param>
            <param name="text">The text of the player-textdraw.</param>
            <param name="font">The <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont"/> of the player-textdraw.</param>
            <param name="foreColor">The foreground <see cref="T:SampSharp.GameMode.SAMP.Color"/> of the player-textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.Show">
            <summary>
                Displays this player-textdraw to the <see cref="P:SampSharp.GameMode.Display.PlayerTextDraw.Owner"/> of this textdraw.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.Hide">
            <summary>
                Hides this player-textdraw.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.Refresh">
            <summary>
                Recreates this player-textdraw with all set properties. Called when changing the location on the screen.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.FixString(System.String)">
            <summary>
                Fixes a string so no SA-MP bugs will occur during application.
            </summary>
            <param name="input">The input string.</param>
            <returns>The fixed string</returns>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.Update">
            <summary>
                Updates this textdraw on the client's screen.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.PlayerTextDraw.OnClick(SampSharp.GameMode.Events.PlayerClickTextDrawEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.Display.PlayerTextDraw.Click"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerClickTextDrawEventArgs"/> that contains the event data. </param>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.IsApplyFixes">
            <summary>
                Gets or sets whether SA-MP fixes should be applied.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Alignment">
            <summary>
                Gets or sets the <see cref="T:SampSharp.GameMode.Definitions.TextDrawAlignment"/> of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.BackColor">
            <summary>
                Gets or sets the background <see cref="T:SampSharp.GameMode.SAMP.Color"/> of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.ForeColor">
            <summary>
                Gets or sets the foreground <see cref="T:SampSharp.GameMode.SAMP.Color"/> of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.BoxColor">
            <summary>
                Gets or sets the box <see cref="T:SampSharp.GameMode.SAMP.Color"/> of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Font">
            <summary>
                Gets or sets the <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont"/> to use in this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.LetterWidth">
            <summary>
                Gets or sets the letter-width of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.LetterHeight">
            <summary>
                Gets or sets the letter-height of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Outline">
            <summary>
                Gets or sets the outline size of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Proportional">
            <summary>
                Gets or sets wheter proporionally space the characters of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Shadow">
            <summary>
                Gets or sets the shadow-size of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Text">
            <summary>
                Gets or sets the text of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.X">
            <summary>
                Gets or sets the x-position of this player-textdraw on the screen.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Y">
            <summary>
                Gets or sets the y-position of this player-textdraw on the screen.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Width">
            <summary>
                Gets or sets the width of this player-textdraw's box.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Height">
            <summary>
                Gets or sets the height of this player-textdraw's box.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.UseBox">
            <summary>
                Gets or sets whether to draw a box behind the player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Selectable">
            <summary>
                Gets or sets whether this player-textdraw is selectable.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.PreviewModel">
            <summary>
                Gets or sets the previewmodel to draw on this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.PreviewRotation">
            <summary>
                Gets or sets the rotation of this player-textdraw's previewmodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.PreviewZoom">
            <summary>
                Gets or sets the zoom level of this player-textdraw's previewmodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.PreviewPrimaryColor">
            <summary>
                Gets or sets the primary vehicle color of this player-textdraw's previewmodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.PreviewSecondaryColor">
            <summary>
                Gets or sets the secondary vehicle color of this player-textdraw's previewmodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Id">
            <summary>
                Gets the textdraw-id of this player-textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.PlayerTextDraw.Owner">
            <summary>
                Gets the owner of this player-textdraw.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.Display.PlayerTextDraw.Click">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickPlayerTextDraw(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player clicks on a player-textdraw.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.SAMP.PlayerTextLabel.InvalidId">
            <summary>
                Gets an ID commonly returned by methods to point out that no PlayerTextLabel matched the requirements.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.Display.TextDraw">
            <summary>
                Represents a textdraw.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.Display.TextDraw.InvalidId">
            <summary>
                Gets an ID commonly returned by methods to point out that no textdraw matched the requirements.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.TextDraw"/> class.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.#ctor(System.Single,System.Single,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.TextDraw"/> class.
            </summary>
            <param name="x">The x-position of the textdraw on the screen.</param>
            <param name="y">The y-position of the textdraw on the screen.</param>
            <param name="text">The text of the textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.#ctor(System.Single,System.Single,System.String,SampSharp.GameMode.Definitions.TextDrawFont)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.TextDraw"/> class.
            </summary>
            <param name="x">The x-position of the textdraw on the screen.</param>
            <param name="y">The y-position of the textdraw on the screen.</param>
            <param name="text">The text of the textdraw.</param>
            <param name="font">The <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont"/> of the textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.#ctor(System.Single,System.Single,System.String,SampSharp.GameMode.Definitions.TextDrawFont,SampSharp.GameMode.SAMP.Color)">
            <summary>
                Initializes a new instance of the <see cref="T:SampSharp.GameMode.Display.TextDraw"/> class.
            </summary>
            <param name="x">The x-position of the textdraw on the screen.</param>
            <param name="y">The y-position of the textdraw on the screen.</param>
            <param name="text">The text of the textdraw.</param>
            <param name="font">The <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont"/> of the textdraw.</param>
            <param name="foreColor">The foreground <see cref="T:SampSharp.GameMode.SAMP.Color"/> of the textdraw.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.Show">
            <summary>
                Displays this textdraw to all players.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.Show(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Display this textdraw to the given <paramref name="player" />.
            </summary>
            <param name="player">The player to display this textdraw to.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.Hide">
            <summary>
                Hides this textdraw.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.Hide(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Hides this textdraw for the given <paramref name="player" />.
            </summary>
            <param name="player">The player to hide this textdraw from.</param>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.Refresh">
            <summary>
                Recreates this textdraw with all set properties. Called when changing the location on the screen.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.FixString(System.String)">
            <summary>
                Fixes a string so no SA-MP bugs will occur during application.
            </summary>
            <param name="input">The input string.</param>
            <returns>The fixed string</returns>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.UpdateClients">
            <summary>
                Updates this textdraw on all client's screens.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.Display.TextDraw.OnClick(SampSharp.GameMode.Events.PlayerClickTextDrawEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.Display.TextDraw.Click"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerClickTextDrawEventArgs"/> that contains the event data. </param>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.IsApplyFixes">
            <summary>
                Gets or sets whether SA-MP fixes should be applied.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Alignment">
            <summary>
                Gets or sets the <see cref="T:SampSharp.GameMode.Definitions.TextDrawAlignment"/> of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.BackColor">
            <summary>
                Gets or sets the background <see cref="T:SampSharp.GameMode.SAMP.Color"/> of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.ForeColor">
            <summary>
                Gets or sets the foreground <see cref="T:SampSharp.GameMode.SAMP.Color"/> of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.BoxColor">
            <summary>
                Gets or sets the box <see cref="T:SampSharp.GameMode.SAMP.Color"/> of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Font">
            <summary>
                Gets or sets the <see cref="T:SampSharp.GameMode.Definitions.TextDrawFont"/> to use in this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.LetterWidth">
            <summary>
                Gets or sets the letter-width of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.LetterHeight">
            <summary>
                Gets or sets the letter-height of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Outline">
            <summary>
                Gets or sets the outline size of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Proportional">
            <summary>
                Gets or sets wheter proporionally space the characters of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Shadow">
            <summary>
                Gets or sets the shadow-size of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Text">
            <summary>
                Gets or sets the text of this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.X">
            <summary>
                Gets or sets the x-position of this textdraw on the screen.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Y">
            <summary>
                Gets or sets the y-position of this textdraw on the screen.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Width">
            <summary>
                Gets or sets the width of this textdraw's box.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Height">
            <summary>
                Gets or sets the height of this textdraw's box.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.UseBox">
            <summary>
                Gets or sets whether to draw a box behind the textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Selectable">
            <summary>
                Gets or sets whether this textdraw is selectable.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.PreviewModel">
            <summary>
                Gets or sets the previewmodel to draw on this textdraw.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.PreviewRotation">
            <summary>
                Gets or sets the rotation of this textdraw's previewmodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.PreviewZoom">
            <summary>
                Gets or sets the zoom level of this textdraw's previewmodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.PreviewPrimaryColor">
            <summary>
                Gets or sets the primary vehicle color of this textdraw's previewmodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.PreviewSecondaryColor">
            <summary>
                Gets or sets the secondary vehicle color of this textdraw's previewmodel.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.Display.TextDraw.Id">
            <summary>
                Gets the id of this textdraw.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.Display.TextDraw.Click">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerClickTextDraw(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player clicks on a textdraw or cancels the select mode(ESC).
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.TextLabel.InvalidId">
            <summary>
                Gets an ID commonly returned by methods to point out that no TextLabel matched the requirements.
            </summary>
        </member>
        <member name="T:SampSharp.GameMode.SAMP.Timer">
            <summary>
                Represents a SA:MP timer.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Timer.#ctor(System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the Timer class.
            </summary>
            <param name="interval">The interval in miliseconds.</param>
            <param name="repeat">Whether to repeat the timer (True); or stop after the first Tick(False).</param>
        </member>
        <member name="M:SampSharp.GameMode.SAMP.Timer.OnTick(System.EventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.SAMP.Timer.Tick"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Timer.Interval">
            <summary>
                Gets the interval of this Timer.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Timer.Repeat">
            <summary>
                Gets whether this Timer is a repeating timer.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Timer.Running">
            <summary>
                Gets or sets whether this Timer is running.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Timer.Tag">
            <summary>
                Gets or sets a tag containing about this Timer.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.SAMP.Timer.Id">
            <summary>
                Gets the ID of this Timer.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.SAMP.Timer.Tick">
            <summary>
                Occurs when the interval has elapsed.
            </summary>
        </member>
        <member name="F:SampSharp.GameMode.World.GtaVehicle.InvalidId">
            <summary>
                Gets an ID commonly returned by methods to point out that no vehicle matched the requirements.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.#ctor(System.Int32)">
            <summary>
                Initalizes a new instance of the Vehicle class.
            </summary>
            <param name="id">The ID of the vehicle to initialize.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.GetDistanceFromPoint(SampSharp.GameMode.World.Vector)">
            <summary>
                This function can be used to calculate the distance (as a float) between this Vehicle and another map coordinate.
                This can be useful to detect how far a vehicle away is from a location.
            </summary>
            <param name="point">The point.</param>
            <returns>A float containing the distance from the point specified in the coordinates.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.Create(System.Int32,SampSharp.GameMode.World.Vector,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a vehicle in the world.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <param name="respawnDelay">
                The delay until the car is respawned without a driver in seconds. Using -1 will prevent the
                vehicle from respawning.
            </param>
            <returns> The vehicle created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.Create(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.World.Vector,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a vehicle in the world.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <param name="respawnDelay">
                The delay until the car is respawned without a driver in seconds. Using -1 will prevent the
                vehicle from respawning.
            </param>
            <returns> The vehicle created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.CreateStatic(System.Int32,SampSharp.GameMode.World.Vector,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a static vehicle in the world.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <param name="respawnDelay">
                The delay until the car is respawned without a driver in seconds. Using -1 will prevent the
                vehicle from respawning.
            </param>
            <returns> The vehicle created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.CreateStatic(System.Int32,SampSharp.GameMode.World.Vector,System.Single,System.Int32,System.Int32)">
            <summary>
                Creates a static vehicle in the world.
            </summary>
            <param name="vehicletype">The model for the vehicle.</param>
            <param name="position">The coordinates for the vehicle.</param>
            <param name="rotation">The facing angle for the vehicle.</param>
            <param name="color1">The primary color ID.</param>
            <param name="color2">The secondary color ID.</param>
            <returns> The vehicle created.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.IsStreamedIn(SampSharp.GameMode.World.GtaPlayer)">
            <summary>
                Checks if this Vehicle is streamed in for a Player.
            </summary>
            <param name="forplayer">The Player to check.</param>
            <returns>False: Vehicle is not streamed in for the Player. False: Vehicle is streamed in for the Player.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.GetRotationQuat(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
                Returns this Vehicle's rotation on all axis as a quaternion.
            </summary>
            <param name="w">A float variable in which to store the first quaternion angle, passed by reference.</param>
            <param name="x">A float variable in which to store the second quaternion angle, passed by reference.</param>
            <param name="y">A float variable in which to store the third quaternion angle, passed by reference.</param>
            <param name="z">A float variable in which to store the fourth quaternion angle, passed by reference.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.SetParamsForPlayer(SampSharp.GameMode.World.GtaPlayer,System.Boolean,System.Boolean)">
            <summary>
                Set the parameters of this Vehicle for a Player.
            </summary>
            <param name="player">The Player to set this Vehicle's parameters for.</param>
            <param name="objective">False to disable the objective or True to show it.</param>
            <param name="doorslocked">False to unlock the doors or True to lock them.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.ManualEngineAndLights">
            <summary>
                Use this function before any player connects (<see cref="M:SampSharp.GameMode.BaseMode.OnGameModeInit"/>) to tell all clients that the
                script will control vehicle engines and lights. This prevents the game automatically turning the engine on/off when
                players enter/exit vehicles and headlights automatically coming on when it is dark.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.SetParams(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Sets this Vehicle's parameters for all players.
            </summary>
            <param name="engine">Toggle the engine status on or off.</param>
            <param name="lights">Toggle the lights on or off.</param>
            <param name="alarm">Toggle the vehicle alarm on or off.</param>
            <param name="doors">Toggle the lock status of the doors.</param>
            <param name="bonnet">Toggle the bonnet to be open or closed.</param>
            <param name="boot">Toggle the boot to be open or closed.</param>
            <param name="objective">Toggle the objective status for the vehicle on or off.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.GetParams(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Gets this Vehicle's parameters.
            </summary>
            <param name="engine">Get the engine status. If True, the engine is running.</param>
            <param name="lights">Get the vehicle's lights' state. If True the lights are on.</param>
            <param name="alarm">Get the vehicle's alarm state. If True the alarm is (or was) sounding.</param>
            <param name="doors">Get the lock status of the doors. If True the doors are locked.</param>
            <param name="bonnet">Get the bonnet/hood status. If True, it's open.</param>
            <param name="boot">Get the boot/trunk status. True means it is open.</param>
            <param name="objective">Get the objective status. True means the objective is on.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.Respawn">
            <summary>
                Sets this Vehicle back to the position at where it was created.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.LinkToInterior(System.Int32)">
            <summary>
                Links this Vehicle to the interior. This can be used for example for an arena/stadium.
            </summary>
            <param name="interiorid">Interior ID.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.AddComponent(System.Int32)">
            <summary>
                Adds a 'component' (often referred to as a 'mod' (modification)) to this Vehicle.
            </summary>
            <param name="componentid">The ID of the component to add to the vehicle.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.RemoveComponent(System.Int32)">
            <summary>
                Remove a component from the Vehicle.
            </summary>
            <param name="componentid">ID of the component to remove.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.ChangeColor(System.Int32,System.Int32)">
            <summary>
                Change this Vehicle's primary and secondary colors.
            </summary>
            <param name="color1">The new vehicle's primary Color ID.</param>
            <param name="color2">The new vehicle's secondary Color ID.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.ChangePaintjob(System.Int32)">
            <summary>
                Change this Vehicle's paintjob (for plain colors see <see cref="M:SampSharp.GameMode.World.GtaVehicle.ChangeColor(System.Int32,System.Int32)"/>).
            </summary>
            <param name="paintjobid">The ID of the Paintjob to apply. Use 3 to remove a paintjob.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.SetNumberPlate(System.String)">
            <summary>
                Set this Vehicle's numberplate, which supports olor embedding.
            </summary>
            <param name="numberplate">The text that should be displayed on the numberplate. Color Embedding> is supported.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.GetComponentInSlot(System.Int32)">
            <summary>
                Retreives the installed component ID from this Vehicle in a specific slot.
            </summary>
            <param name="slot">The component slot to check for components.</param>
            <returns>The ID of the component installed in the specified slot.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.GetComponentType(System.Int32)">
            <summary>
                Find out what type of component a certain ID is.
            </summary>
            <param name="componentid">The component ID to check.</param>
            <returns>The component slot ID of the specified component.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.Repair">
            <summary>
                Fully repairs this Vehicle, including visual damage (bumps, dents, scratches, popped tires etc.).
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.SetVehicleAngularVelocity(SampSharp.GameMode.World.Vector)">
            <summary>
                Sets the angular velocity of this Vehicle.
            </summary>
            <param name="velocity">The amount of velocity in the angular directions.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.GetVehicleDamageStatus(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                Retrieve the damage statuses of this Vehicle.
            </summary>
            <param name="panels">A variable to store the panel damage data in, passed by reference.</param>
            <param name="doors">A variable to store the door damage data in, passed by reference.</param>
            <param name="lights">A variable to store the light damage data in, passed by reference.</param>
            <param name="tires">A variable to store the tire damage data in, passed by reference.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.UpdateVehicleDamageStatus(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the various visual damage statuses of this Vehicle, such as popped tires, broken lights and damaged panels.
            </summary>
            <param name="panels">A set of bits containing the panel damage status.</param>
            <param name="doors">A set of bits containing the door damage status.</param>
            <param name="lights">A set of bits containing the light damage status.</param>
            <param name="tires">A set of bits containing the tire damage status.</param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.GetVehicleModelInfo(SampSharp.GameMode.Definitions.VehicleModelType,SampSharp.GameMode.Definitions.VehicleModelInfoType)">
            <summary>
                Retrieve information about a specific vehicle model such as the size or position of seats.
            </summary>
            <param name="model">The vehicle model to get info of.</param>
            <param name="infotype">The type of information to retrieve.</param>
            <returns>The offset vector.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.GetVehicleModelInfo(SampSharp.GameMode.Definitions.VehicleModelInfoType)">
            <summary>
                Retrieve information about this Vehicle's model such as the size or position of seats.
            </summary>
            <param name="infotype">The type of information to retrieve.</param>
            <returns>The offset vector.</returns>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.Dispose(System.Boolean)">
            <summary>
                Removes this instance from the pool.
            </summary>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnSpawn(SampSharp.GameMode.Events.VehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.Spawn"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnDeath(SampSharp.GameMode.Events.PlayerVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.Died"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnPlayerEnter(SampSharp.GameMode.Events.PlayerEnterVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.PlayerEnter"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerEnterVehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnPlayerExit(SampSharp.GameMode.Events.PlayerVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.PlayerExit"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnMod(SampSharp.GameMode.Events.VehicleModEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.Mod"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehicleModEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnPaintjobApplied(SampSharp.GameMode.Events.VehiclePaintjobEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.PaintjobApplied"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehiclePaintjobEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnResprayed(SampSharp.GameMode.Events.VehicleResprayedEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.Resprayed"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnDamageStatusUpdated(SampSharp.GameMode.Events.PlayerVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.DamageStatusUpdated"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnUnoccupiedUpdate(SampSharp.GameMode.Events.UnoccupiedVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.UnoccupiedUpdate"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.VehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnStreamIn(SampSharp.GameMode.Events.PlayerVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.StreamIn"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnStreamOut(SampSharp.GameMode.Events.PlayerVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.StreamOut"/> event.
            </summary>
            <param name="e">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.OnTrailerUpdate(SampSharp.GameMode.Events.PlayerVehicleEventArgs)">
            <summary>
                Raises the <see cref="E:SampSharp.GameMode.World.GtaVehicle.TrailerUpdate"/> event.
            </summary>
            <param name="args">An <see cref="T:SampSharp.GameMode.Events.PlayerVehicleEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SampSharp.GameMode.World.GtaVehicle.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Info">
            <summary>
                Gets an instance of VehicleModelInfo about this Vehicle.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Driver">
            <summary>
                Gets the driver of this Vehicle.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Passengers">
            <summary>
                Gets the passengers of this Vehicle. (not the driver)
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Id">
            <summary>
                Gets the ID of this Vehicle.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.IsValid">
            <summary>
                Gets whether this Vehicle has been created and still is alive.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Angle">
            <summary>
                Gets or sets the Z angle of this Vehicle.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Model">
            <summary>
                Gets the model ID of this Vehicle.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.HasTrailer">
            <summary>
                Gets whether this Vehicle has a trailer attached to it.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Trailer">
            <summary>
                Gets or sets the the trailer attached to this Vehicle.
            </summary>
            <returns>The trailer attached.</returns>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Velocity">
            <summary>
                Gets or sets the velocity at which this Vehicle is moving.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.VirtualWorld">
            <summary>
                Gets or sets the virtual world of this Vehicle.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Engine">
            <summary>
                Gets this Vehicle's engine status. If True, the engine is running.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Lights">
            <summary>
                Gets this Vehicle's lights' state. If True the lights are on.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Alarm">
            <summary>
                Gets this Vehicle's alarm state. If True the alarm is (or was) sounding.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Doors">
            <summary>
                Gets the lock status of the doors of this Vehicle. If True the doors are locked.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Bonnet">
            <summary>
                Gets the bonnet/hood status of this Vehicle. If True, it's open.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Boot">
            <summary>
                Gets the boot/trunk status of this Vehicle. True means it is open.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Objective">
            <summary>
                Gets the objective status of this Vehicle. True means the objective is on.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Rotation">
            <summary>
                Gets or sets the rotation of this Vehicle.
            </summary>
            <remarks>
                Only the Z angle can be set!
            </remarks>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Health">
            <summary>
                Gets or sets the health of this Vehicle.
            </summary>
        </member>
        <member name="P:SampSharp.GameMode.World.GtaVehicle.Position">
            <summary>
                Gets or sets the position of this Vehicle.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.Spawn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleSpawn(System.Int32)"/> is being called.
                This callback is called when a vehicle spawns.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.Died">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleDeath(System.Int32,System.Int32)"/> is being called.
                This callback is called when a vehicle is destroyed - either by exploding or becoming submerged in water.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.PlayerEnter">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerEnterVehicle(System.Int32,System.Int32,System.Boolean)"/> is being called.
                This callback is called when a player starts to enter a vehicle, meaning the player is not in vehicle yet at the
                time this callback is called.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.PlayerExit">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnPlayerExitVehicle(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player exits a vehicle.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.Mod">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleMod(System.Int32,System.Int32,System.Int32)"/> is being called.
                This callback is called when a vehicle is modded.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.PaintjobApplied">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehiclePaintjob(System.Int32,System.Int32,System.Int32)"/> is being called.
                Called when a player changes the paintjob of their vehicle (in a modshop).
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.Resprayed">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleRespray(System.Int32,System.Int32,System.Int32,System.Int32)"/> is being called.
                The callback name is deceptive, this callback is called when a player exits a mod shop, regardless of whether the
                vehicle's colors were changed, and is NEVER called for pay 'n' spray garages.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.DamageStatusUpdated">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleDamageStatusUpdate(System.Int32,System.Int32)"/> is being called.
                This callback is called when a vehicle element such as doors, tires, panels, or lights get damaged.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.UnoccupiedUpdate">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnUnoccupiedVehicleUpdate(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/> is being called.
                This callback is called everytime an unoccupied vehicle updates the server with their status.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.StreamIn">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleStreamIn(System.Int32,System.Int32)"/> is being called.
                Called when a vehicle is streamed to a player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.StreamOut">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnVehicleStreamOut(System.Int32,System.Int32)"/> is being called.
                This callback is called when a vehicle is streamed out from some player's client.
            </summary>
        </member>
        <member name="E:SampSharp.GameMode.World.GtaVehicle.TrailerUpdate">
            <summary>
                Occurs when the <see cref="M:SampSharp.GameMode.BaseMode.OnTrailerUpdate(System.Int32,System.Int32)"/> is being called.
                This callback is called when a player sent a trailer update.
            </summary>
        </member>
    </members>
</doc>
